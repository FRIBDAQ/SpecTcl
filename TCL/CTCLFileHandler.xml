<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Docbook XML 4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"
 >
<book>
<article>

<refentry>
    <refmeta>
        <refentrytitle>CTCLFileHandler</refentrytitle>
        <manvolnum>3</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>CTCLFileHandler</refname>
        <refpurpose>
            Base class for building object oriented Tcl File event handlers.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
    <programlisting>
#include &lt;TCLFileHandler.h&gt;
...

class CTCLFileHandler  : public CTCLInterpreterObject
{
  CTCLFileHandler(CTCLInterpreter* pInterp,
                   UInt_t am_nFid = STDIN_FILENO);
  CTCLFileHandler(CTCLInterpreter* pInterp,
                  FILE* pFile);
  CTCLFileHandler (const CTCLFileHandler&amp; aCTCLFileHandler );
  ~CTCLFileHandler ( );
  CTCLFileHandler&amp; operator= (const CTCLFileHandler&amp; aCTCLFileHandler);
  int operator== (const CTCLFileHandler&amp; aCTCLFileHandler) const;

  UInt_t getFid() const;

  virtual   void operator() (int mask)   = 0;

  void Set (int mask)  ;
  void Clear ()  ;
};

    </programlisting>
    </refsynopsisdiv>

    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            Tcl supplies an event loop.  It is possible to add events specifications
            to this loop.  One very useful event type is based on readability or writability
            of a file descriptor.   The <classname>CTCLFileHandler</classname> allows you
            to create an object oriented file handler, and register it with the event
            loop so that you can gain control when, for example, a file becomes readable.
        </para>
        <para>
            As <classname>CTCLFileHandler</classname> is an abstract base class,
            it is necessary to create a derived class.  The derived class should
            implement the <function>operator()</function> which will be called
            when the specific event is fired.  An instance of this derived class should
            be created, and then the <function>Set</function> and <function>Clear</function>
            members used to establish and remove the event handler.
        </para>
    </refsect1>
    <refsect1>
        <title>METHODS</title>
        <para>
        <programlisting>
  <function>CTCLFileHandler</function>(<type>CTCLInterpreter</type>* <parameter>pInterp</parameter>,
                   <type>UInt_t</type> <parameter>nFid</parameter> = <literal>STDIN_FILENO</literal>);
  <function>CTCLFileHandler</function>(<type>CTCLInterpreter</type>* <parameter>pInterp</parameter>,
                  <type>FILE</type>* <parameter>pFile</parameter>);
  <function>CTCLFileHandler</function> (const <type>CTCLFileHandler</type>&amp; <parameter>aCTCLFileHandler</parameter> );
        </programlisting>
        </para>
        <para>
            Constructs a file handler object.  <parameter>pInterp</parameter> is a
            pointer to the interpreter on which the file handler will be registered.
            The file can be specified either by <parameter>nFid</parameter>, a file
            descriptor, or <parameter>pFile</parameter> an stdio File stream pointer.
        </para>
        <para>
            A copy constructor allows the creation of a copy of the file handler object
            given <parameter>aCTCLFileHandler</parameter> an existing one.  This is normally
            not useful.
        </para>
        <para>
            <programlisting>
  <type>CTCLFileHandler</type>&amp; <function>operator=</function> (const <type>CTCLFileHandler</type>&amp; <parameter>aCTCLFileHandler</parameter>);
  <type>int</type> <function>operator==</function> (const <type>CTCLFileHandler</type>&amp; <parameter>aCTCLFileHandler</parameter>) const;
            </programlisting>
        </para>
        <para>
            These functions support assignment and equality comparison.  Note that these functions
            are usually not very useful for file handlers.
        </para>
        <para>
        <programlisting>
  <type>UInt_t</type> <function>getFid()</function> const;
        </programlisting>
        </para>
        <para>
            Returns the file id that is associated with the event.
        </para>
        <para>
            <programlisting>
  virtual   <type>void</type> <function>operator</function>() (<type>int</type> <parameter>mask</parameter>)   = 0;
            </programlisting>
        </para>
        <para>
            The user's derived class must override this to provide the desired
            funtionality when event fires.  <parameter>mask</parameter>
            indicates which event fired the function and can be an or of the following:
            <literal>TCL_READABLE</literal> if the file can be read without blocking,
            <literal>TCL_WRITABLE</literal> if the file can be written without blocking,
            or <literal>TCL_EXCEPTION</literal> if some exceptional condition occured on the
            file.
        </para>
        <para>
            <programlisting>
  <type>void</type> <function>Set</function> (<type>int</type> <parameter>mask</parameter>)  ;
  <type>void</type> <function>Clear</function> ()  ;
        </programlisting>
        </para>
        <para>
            <function>Set</function> establishes the event handler for the set of conditions
            described in <parameter>mask</parameter>.  The valid bits for <parameter>mask</parameter>,
            are described in the documentation for the <parameter>mask</parameter>
            parameter to <function>operator()</function>.
        </para>
    </refsect1>
    <refsect1>
        <title>SEE ALSO</title>
        <para>
CTCLObject(3),
CTCLInterpreter(3)
Tcl_CreateFileHandler(3tcl),
Tcl_DeleteFileHandler(3tcl)
        </para>
    </refsect1>
</refentry>



</article>
</book>
