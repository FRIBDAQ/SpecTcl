<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Docbook XML 4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd">
<book>
<article>

<refentry>
    <refmeta>
        <refentrytitle>TclPlus</refentrytitle>
        <manvolnum>3</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>TclPlus</refname>
        <refpurpose>
            C++ object encapsulation of the Tcl/Tk Api.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
    <programlisting>
        g++ -o <replaceable>yourprogram yoursources</replaceable> -L${SPECTCLHOME}/lib -ltclPlus -lException
    </programlisting>
    <para>
        Where <varname>SPECTCLHOME</varname> is an environment variable that
        refers to the top level of the installation directory hierarhcy for SpecTcl.
        Note this library, and the exceptions library  are also
        provided with nscldaq, in which case
        <varname>SPECTCLHOME</varname> can
        refer to the top level of the installation directory hierarchy for nscldaq
    </para>
    </refsynopsisdiv>

    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            This library provides an object oriented encaspulation of the Tcl/Tk API,
            or rather of large segments of it.  It can be used to create entire applications
            that extend the Tcl/Tk interpreter.  It is also the library used within
            SpecTcl to access the Tcl/Tk command.  Therefore people extending SpecTcl
            can use it to provide their own extensions to SpecTcl.  The paragraphs below
            will provide brief descriptions of some of the key classes.  See the manpages
            for those classes for more information.
        </para>
        <para>
            <classname>CTCLApplication</classname>
        </para>
        <para>
            This is a base class for complete applications that extend the Tcl/Tk
            interpreter.  By appropriately subclassing it you can build your own
            standalong extended Tcl/Tk interpreters.
        </para>
        <para>
            <classname>CTCLException</classname>
        </para>
        <para>
            The Tcl/Tk API use return codes to indicate error conditions.  This is
            error prone.  The tclPlus library converts these return codes in to
            thrown exceptions of the type <classname>CTCLException</classname>.
            To handle these exceptions properly requires use of  C++ try/catch blocks.
            A code fragment example of this is provided in the
            <classname>CTCLException</classname>(3) manpage.
        </para>
        <para>
            <classname>CTCLInterpreter</classname>
        </para>
        <para>
            The <classname>CTCLInterpreter</classname> object is at the core of the
            library.  It is a wrapping of a <type>Tcl_Interp*</type> along with member
            functions that access many functions that logically operate on a Tcl interpreter.
        </para>
        <para>
            <classname>CTCLInterpreterObject</classname>
        </para>
        <para>
            The <classname>CTCLInterpreterObject</classname> wraps objects that
            require an interpreter to function correctly.  It is a base class for
            many of the classes in the library.  It provides common services for those
            objects.
        </para>
        <para>
            <classname>CTCLList</classname>
        </para>
        <para>
            In Tcl scripting, lists play a key role in providing a structured
            data type.  The <classname>CTCLList</classname> object can be created
            on a string believed to be a list, and used to split a list into its
            elements or merge a set of words into a list.
        </para>
        <para>
            <classname>CTCLObject</classname>
        </para>
        <para>
            Tcl has the philosophy that everything can be treated as if it were a string.
            In older versions of the interpreter, everything <emphasis>was</emphasis> a
            string. This led to a great deal of inefficiency converting other data types
            to and from strings.  The <type>Tcl_Obj</type> type was created to reduce this
            inefficiency and to reduce the amount of string copying that was necessary
            to invoke commands.
        </para>
        <para>
            A <type>Tcl_Obj</type> is an object  that stores the string representation
            and another representation type for a Tcl interpreter entity.  <type>Tcl_Obj</type>
            also provides for object sharing with copy on modify semantics.  This reduces
            much of the string copying overhead that was previously associated with executing
            Tcl interpreter commands.
        </para>
        <para>
            The <classname>CTCLObject</classname> is a wrappig of a <type>Tcl_Obj</type>
            along with functions that operate on the underlying object.
        </para>
        <para>
            <classname>CTCLObjectProcessor</classname>
        </para>
        <para>
            Key to the concept of the Tcl interpreter as an application scripting language
            is the ability to add new commands to the interpreter that are application
            specific.  The <classname>CTCLObjectProcessor</classname> class is an
            abstract base class that, when subclassed and instantiated adds new
            commands to the interpreter.
        </para>
        <para>
            <classname>CTCLVariable</classname>
        </para>
        <para>
            The <classname>CTCLVariable</classname> class provides access to
            Tcl script variables.
        </para>
    </refsect1>
    <refsect1>
        <title>SEE ALSO</title>
        <para>
CTCLApplication(3),
CTCLChannel(3),
CTCLCommandPackage(3),
CTCLCompatibilityProcessor(3),
CTCLException(3),
CTCLFileHandler(3),
CTCLHashTable(3),
CTCLHashTableItem(3),
CTCLHashTableIterator(3),
CTCLIdleProcess(3),
CTCLInterpreter(3),
CTCLInterpreterObject(3),
CTCLList(3),
CTCLObject(3),
CTCLObjectProcessor(3),
CTCLPackagedCommand(3),
CTCLProcessor(3),
CTCLResult(3),
CTCLString(3),
CTCLTimer(3),
CTCLVariable(3)
        </para>
    </refsect1>
</refentry>



</article>
</book>
