<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Docbook XML 4.3//EN"
        "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
 >
<book>
<article>
<refentry>
    <refmeta>
        <refentrytitle>CTCLApplication 3</refentrytitle>
        <manvolnum>3</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>CTCLApplication</refname>
        <refpurpose>
            Base class for TCL/Tk applications.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <programlisting>
#include &lt;tcl.h&gt;
#include &lt;TCLApplication.h&gt;
...
class CTCLApplication  : public CTCLInterpreterObject
{
public:
  CTCLApplication ();
  ~CTCLApplication ( );
  virtual   int operator() ()  =0;
};
        </programlisting>
    </refsynopsisdiv>

    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            <classname>CTCLApplication</classname> is an abstract base class
            that facilitates the creation of applications that extend the
            Tcl interpreter.  The `main program' of SpecTcl is derived from
            this class, for example.
        </para>
        <para>
            Initializing a Tcl application generallly consists of a bunch
            of boilerplate that initializes the interpreter, and then a bunch
            of application specific code to register extensions to the interpreter.
            <classname>CTCLApplication</classname>
            provides the main boilerplate.  It is expected that you
            derive a class from
            <classname>CTCLApplication</classname>
            Implement <function>operator()</function> to register
            application specific commands, and then create exactly one
            instance of your application class named, and a global pointer
            to that object named gpTCLApplication.
        </para>
        <para>
            For example, suppose you have created a class named MyTclApp:
            <programlisting>
// This code is at the global level:
...
MyTclApp app;                              // Makes an instance of this
CTCLApplication* gpTCLApplication = &amp;app;  // Pointer expected by framework.
...
            </programlisting>
            Will ensure that the <function>operator()</function> of your
            application object will be called with the interpreter already
            initialized.
        </para>
    </refsect1>
    <refsect1>
        <title>METHODS</title>
        <para>
            <type>int</type> <function>operator()</function>()
        </para>
        <para>
            This function is pure virtual and must be overridden by your
            derived class.  <function>operator()</function> is expected to
            install all required extensions to the interprter and return to it
            to start the main event loop.  The return value from this should be
            <literal>TCL_OK</literal> if the application was successfully initialized
            or <literal>TCL_ERROR</literal> if the program encountered an error that
            should prevent the interpreter main loop from starting
        </para>
    </refsect1>
    <refsect1>
        <title>SEE ALSO</title>
        <para>
        CTCLInterpreter, CTCLInterpreterObject, CTCLObjectProcessor, CTCLVariable
        </para>
    </refsect1>
</refentry>


</article>
</book>
