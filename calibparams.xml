<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"
>
<book>
   <bookinfo>
      <title>The calibrated parameter plugin</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>February 8, 2008</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
      </revhistory>
   </bookinfo>
   
   <!-- Introductory material (chapter 1).  -->
   
   <chapter>
      <title>Introduction</title>
        <para>
            This document describes a plugin for SpecTcl that provides the
            capability of fitting calibrations to raw parameters and then
            using those fits to create calibrated parameters.
        </para>
        <para>
            The remaining chapters of this document:
            <orderedlist>
                <listitem>
                    <para>
                        Describe how to obtain and install this plugin.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Describe how to load the plugin and how to use it.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Provide reference material describing the SpecTcl
                        commands added by the plugin.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Describe a sample graphical user interface to the plugin
                        that is installed along with the plugin itself.
                    </para>
                </listitem>
            </orderedlist>
        </para>
         <section>
            <title>What does the calibrated parameter plugin provide?</title>
            <para>
               In many applications, a simple linear transform relates raw ADC
               values to some more meaningful value.  For ADC's this value is often
               the energy left in a detector by a detected particle or photon.
               For TDC's this value is usually a time relative to some other 'happening'
               in the event.
            </para>
            <para>
               The Calibrated parameter plugin provides a means to compute and apply
               these linear transforms to any raw parameter value to produce
               a value with 'real world' units, or a  <firstterm>calibrated parameter</firstterm>.
               The plugin supports creating the calibration function as well as
               providing, and registering an event processor to apply calibration
               functions to raw parameter to produce calibrated parameters.
            </para>
            <para>
               The plugin adds two commands to <application>SpecTcl</application>.
               <command>calibrationfit</command> accumulates takes a set of
               raw parameter/actual parameter pairs, and produces a linear
               least squares fit that can be used as the calibration function
               for calbirated parameters.   The <command>calibparam</command>
               command associates a raw parameter, with a fit to direct the
               calibration event processor to produce a new calibrated parameter.
            </para>
         </section>

   </chapter>
    <chapter>
        <title>Obtaining and installing the plugin</title>
        <para>
            The plugin source code can be downloaded from
            http://www.sourceforge.net/projects/nsclspectcl
            It is a tarball nmed
            <filename>calibratedparams-</filename><emphasis>version</emphasis><filename>.tar.gz</filename>
            in the <literal>plugins</literal> package.  
        </para>
        <para>
            Download the source tarball.  In the previous paragraph:
            <emphasis>version</emphasis> is the version of the plugin in the form:
            <literal>major.minor-editlevel</literal> e.g.
            <literal>1.0-001</literal>.  Where the <literal>-editlevel</literal>
            is optional.
            Suppose for the sake of this example, that the version is 1.0-001.
            Download <filename>calibratedparams-1.0-001.tar.gz</filename>
            to some work directory.
        </para>
        <para>
            Unwrap the tarball e.g.:
            <programlisting>
                <command>
tar xzf calibratedparams-1.0-001.tar.gz
                </command>
            </programlisting>
        </para>
        <para>
            In this example, the directory <filename>calibratedparams-1.0-001</filename>
            is created.
        </para>
        <para>
            cd, to the desired directory, configure and build the software using
            the usual <command>configure</command> and <command>make install</command>.
        </para>
        <para>
            The <command>configure</command> script configures the software build
            system and creates the final makefiles.  It understands quite a few
            options.  The ones important and unique to the plugin are:
        </para>
        <variablelist>
            <varlistentry>
                <term><option>--prefix</option>=<replaceable>install-path</replaceable></term>
                <listitem>
                    <para>
                        Determines where the plugin will be installed.
                        Note that the actual plugin software is installed in
                        <filename>install-path/TclLibs/calibration</filename>.
                    </para>
                    <para>
                        By default, SpecTcl is also assumed to be installed in
                        <replaceable>install-path</replaceable>.  Note that
                        The TclLibs directory and one level of subdirectory are
                        automatically part of the SpecTcl package load path.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--with-tcl-header-dir</option>=<replaceable>tc.h-path</replaceable></term>
                <listitem>
                    <para>
                        The <command>configure</command> script searches for
                        the Tcl header file <filename>tcl.h</filename> in several
                        popular directories.  If it is not able to find it,
                        you can use this switch to give it the the directory that
                        contains it.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--with-spectcl-home</option>=<replaceable>spectclhome</replaceable></term>
                <listitem>
                    <para>
                        While I encourage you to install the plugin in the SpecTcl
                        installation directory, It is not necessary that you do so.
                        If the value of <option>--prefix</option> is not the same
                        as the value of the <varname>SpecTclHome</varname> directory
                        when you run SpecTcl, use this switch and provide the correct
                        <replaceable>spectclhome</replaceable>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--with-gsl-home</option>=<replaceable>path</replaceable></term>
                <listitem>
                    <para>
                        The software uses the Gnu Scientific Library (gsl)
                        to perform its fits.  On Debian linux, this is the
                        package <literal>libgsl0-dev</literal>.
                        If your installation of the gsl does not make the
                        header and libraries findable, you should use this
                        switch and set <replaceable>path</replaceable> to the top
                        level directory of the <application>GSL</application> installation.
                        The header is then assumed to be in
                        <replaceable>path</replaceable><filename>/include</filename>
                        while the library is assumed to be installed in
                        <replaceable>path</replaceable><filename>/lib</filename>
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            Once you have configured the software, install it using
            <command>make install</command>.
            The example below shows how to install version 1.0-001 of the
            plugin at the
            NSCL for SpecTcl 3.2.
        </para>
        <example>
            <title>Installing the plugin for SpecTcl 3.2 at the NSCL</title>
            <programlisting>

tar xzf calibratedparams-1.0-001.tar.gz
cd calibratedparams-1.0-001
./configure --prefix=/usr/opt/spectcl/3.2
...
make install
...

            </programlisting>
        </example>
    </chapter>
    <chapter>
        <title>Loading and using the plugin</title>
        <para>
            The calibrated parameter plugin is a Tcl loadable package which is
            a compiled extension.
        </para>
        <para>
            If you install the plugin in SpecTcl's installation directory,
            you will not need to do anything to prepare to load the plugin.
            If you installed the plugin anywhere else, you will need to add
            the directory the plugin is installed in to the SpecTcl package
            load path.
        </para>
        <para>
            You can do this by using <command>lappend</command> to append
            that directory to <varname>auto_path</varname>. For example:
        </para>
        <example>
            <title>Adding the plugin directory to the package load path</title>
            <programlisting>
lappend auto_path [file join ~ calibratedparameters]
            </programlisting>
        </example>
        <para>
            Once the plugin can be found it can be loaded via the
            Tcl <command>package require</command> command:
        </para>
        <example>
            <title>Loading the plugin</title>
            <programlisting>
package require Calibrations
            </programlisting>
        </example>
        <section>
            <title>Using the plugin</title>
            <para>
               The sequence for using the plugin, once it is loaded is
               <orderedlist>
                  <listitem>
                     <para>
                        Create a calibration fit that will provide a calibration function.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        Add points to the calibration fit.  Each point consists of a
                        raw parameter value and the corresponding desired calibrated
                        value.  Often fit points are gotten by identifying
                        features in spectra of the raw parameter (e.g. known
                        energy peaks in gamma spectra).
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        Ask the calibration fit to perform itself.  Performing
                        a calibration fit does a linear least squares fit to the
                        fit points computing the slope and offset of the best
                        fit line throug the points you provided.
                     </para>
                  </listitem>
                  <listitem>
                     <para>
                        Create a calibrated parameter by applying your calibration
                        fit to a raw parameter to produce a new parameter.
                        Once this calibrated parameter has been created it
                        looks to <application>SpecTcl</application> like any other
                        parameter; Spectra can be created, pseudo parameters can
                        be scripted using it and so on (creating a calibrated
                        sum parameter from several calibrated parameters e.g.).
                     </para>
                  </listitem>
               </orderedlist>
            </para>
            <para>
               The Example below shows this process for calibrating a parameter named
               <literal>adc1.00</literal> to produce a parameter named <literal>adc1.e.00</literal>.
               Don't take the actual calibration points too seriously.
            </para>
            <example>
               <title>Calibrating a parameter</title>
               <programlisting>
calibrationfit linear   testfit
calibrationfit -add     testfit  {0.0 0.0}  {1.0 2.0} {100.0 202.0}
calibrationfit -perform testfit

calibparam -create adc1.e.00 1234 adc1.00 testfit KeV

               </programlisting>
            </example>
            <para>
               The first three lines of the example above create a fit named
               <literal>testfit</literal> add three points to the fit that describe
               the relationship between channel values and energies.  The relationship
               is a linear with intercept very nearly 0.0 and slope very nearly 2.0.
               The <command>calibparam</command> command creates the new calibrated
               <parameter>adc1.e.00</parameter>
               parameter as paramteer number <literal>1234</literal> computing it by
               applying the fit <literal>testfit</literal> to the raw parameter
               <parameter>adc1.00</parameter> for each event.  The <literal>KeV</literal>
               indicates that the units for this new parameter will be KeV.
            </para>
            <para>
               The fit is a snapshot of the fit.   If you later delete the fit,
               the calibrated parameter will continue to function on the original fit data.
               If you later re-create the fit with a different set of values, the parameter
               will continue to compute on the old fit.  To change the fit you would need
               to delete and recreate the calibrated parameter.  This is a
               compromise that is mandated by performance considerations (it would be expensive
               to have to locate the correct fit for each event, rather than storing
               a copy of the fit itself).
            </para>
        </section>            
    </chapter>
    <chapter>
        <title>Calibrated parameter plugin command reference</title>
            <refentry id="calibrationfit">
              <refmeta>
                 <refentrytitle>calibrationfit</refentrytitle>
                 <manvolnum>1tcl</manvolnum>
              </refmeta>
              <refnamediv>
                 <refname>calbrationfit</refname>
                 <refpurpose>Manipulate fits used to compute calibrated parameters</refpurpose>
              </refnamediv>
              
              <refsynopsisdiv>
                <cmdsynopsis>
                    <command>
calibrationfit <option>?-create?</option> <replaceable>type name</replaceable>
                    </command>
                </cmdsynopsis>
                    <cmdsynopsis>
                        <command>
calibrationfit <option>-list</option> <replaceable>?pattern?</replaceable>
                        </command>
                    </cmdsynopsis>
                   <cmdsynopsis>
                       <command>
calibrationfit <option>-delete</option> <replaceable>name</replaceable>
                       </command>
                   </cmdsynopsis>
                   <cmdsynopsis>
                       <command>
calibrationfit <option>-perform</option> <replaceable>name</replaceable>
                       </command>
                   </cmdsynopsis>
                   <cmdsynopsis>
                       <command>
calibrationfit <option>-add</option> <replaceable>name point1 ?point2...?</replaceable>
                       </command>
                   </cmdsynopsis>
                   <cmdsynopsis>
                       <command>
calibrationfit <option>-evaluate</option> <replaceable>name xValue</replaceable>
                       </command>
                   </cmdsynopsis>
              </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	The <command>calibrationfit</command> command manipulates the set of fits
         that are used to compute calibrated parameters.  The fitting software is
         extensible to any sort of calibration fit that can be computed.  At present,
         however only <literal>linear</literal> fits are supported.
     </para>
     <para>
         The general form of the <command>calibrationfit</command> command is the
         command, followed by an option that describes the action the command
         will take, followed by the parameters that action needs.
     </para>
     <para>
         The options, their actions and the parameters they need are documented
         in the OPTIONS section below.
     </para>
     <para>
         Fits have state associated with them. The state determines what actions
         you are allowed to perform.  The states are:
         <literal>accepting</literal> and <literal>performed</literal>.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
	<varlistentry>
	    <term><command><option>?-create?</option> <replaceable>type name</replaceable></command></term>
	    <listitem>
		<para>
                  Creates  new fit.  The option <option>-create</option> is optional.
                  if not provided, this is the default action.  The fit subsystem
                  is extensible to support any type of fit.  Fit types have names.
                  The <parameter>type</parameter> parameter is the fit type.  At present
                  this can only be <literal>linear</literal>.  The
                  <parameter>name</parameter> parameter is the name to assign to this
                  fit.  The fit name must be unique amongst all fits and will be used
                  to refer to this fit in future <command>calibrationfit</command> and
                  <command>calibparam</command> commands.
		</para>
                  <para>
                     The initial state of a fit is <literal>accepting</literal> indicating
                     that it is capable of accepting fit data points.
                  </para>
	    </listitem>
        </varlistentry>
         <varlistentry>
               <term><command><option>-list</option> <replaceable>?pattern?</replaceable></command></term>
               <listitem>
                  <para>
                     Lists the known fits.  If <parameter>pattern</parameter> is supplied, it is a
                     pattern with <firstterm>glob</firstterm> wild cards that restricts the listing
                     to those fits whose names match the pattern.  glob pattern
                     wild-cards are essentially those supported by filesystem
                     matching wild cards in the Linux command shells.
                  </para>
                  <para>
                     The command returns a (possibly empty) list of fit descriptions.
                     Each fit description is itself a sublist containing in order the
                     <parameter>fit-name</parameter>, <parameter>fit-type</parameter>,
                     <parameter>fit-state</parameter>, A list of the points used
                     to compute the fit;  each point is itself a two element
                     raw/real coordinate pair, if the fit state is <literal>accepting</literal>,
                     the fit description contains a final empty list element.  If the state
                     is <literal>performed</literal>, the final list element contains
                     a list that is a set of name, value pairs that define the
                     computed fit parameters and the Chisquare.  The name for the
                     linear fit are: <literal>slope</literal>,
                     <literal>offset</literal>,
                     and <literal>chisquare</literal>.
                  </para>
               </listitem>
	 </varlistentry>
         <varlistentry>
            <term><option>-delete</option> <replaceable>name</replaceable></term>
            <listitem>
               <para>
                  Deletes the fit named <parameter>name</parameter>. Note that
                  calibrated parameters are created with a copy of the fit.
                  To stop a calibrated parameter from computing, you will need to
                  delete it.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term><option>-perform</option> <replaceable>name</replaceable></term>
            <listitem>
               <para>
                  Peforms the fit.  If there are sufficient points, the fit parameters
                  are computed, and the state of the fit becomes <literal>performed</literal>.
                  The command returns the list of fit parameter name/value pairs.  For the
                  linear fit type these are:
                  <literal>slope</literal>,
                  <literal>offset</literal>,
                  <literal>chisquare</literal>.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term><option>-add</option> <replaceable>name point ?...?</replaceable></term>
            <listitem>
               <para>
                  Adds calibration points to a fit that is in the <literal>accepting</literal>
                  state.  Any number of points can be added to the fit.  At present,
                  there is no way to edit the set of points, other than to delete and
                  re-create the fit.  Each point is a Tcl list of two elements,
                  raw value and corresponding calibrated value.
               </para>
            </listitem>
         </varlistentry>
         <varlistentry>
            <term><option>-evaluate</option> <replaceable>name raw-value</replaceable></term>
            <listitem>
               <para>
                  This action is only available for fits that are in the
                  <literal>performed</literal> state.  The <parameter>raw-value</parameter>
                  is passed to the fitted function computed for <parameter>name</parameter>.
                  The resulting calibrated value is returned as the command's value.
               </para>
            </listitem>
         </varlistentry>
     </variablelist>
  </refsect1>

</refentry>
<refentry id="calibparam">
  <refmeta>
     <refentrytitle>calibparam</refentrytitle>
     <manvolnum>1tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>calibparam</refname>
     <refpurpose>Create, list and manipulate calibrated parameters.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
calibparam <option>?-create?</option> <replaceable>name number raw fitname ?units?</replaceable>
	</command>
    </cmdsynopsis>
       <cmdsynopsis>
           <command>
calibparam <option>-list</option> <replaceable>?pattern?</replaceable>
           </command>
       </cmdsynopsis>
       <cmdsynopsis>
           <command>
calibparam <option>-delete</option>   <replaceable> name</replaceable>
           </command>
       </cmdsynopsis>
       <cmdsynopsis>
           <command>
calibparam <option>-refresh</option> <replaceable>?pattern?</replaceable>
           </command>
       </cmdsynopsis>
   
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	The <command>calibparam</command> command creates and manipulates
         calibrated parameters.  A calibrated parameter is a computed parameter that
         depends on a base, or raw parameter and a calibration function or calibrationfit.
         Calibrated parameters are implemented as event processors and run at compiled
         speeds.
     </para>
     <para>
         The base parameter for a calibrated parameter can be any parameter known
         to SpecTcl at the time the calibrated parameter is created with the exception
         of scripted pseudo parameters, which are always last in SpecTcl's evaluation
         chain in this implementation of SpecTcl.
     </para>
     <para>
         The first word of the <command>calibparam</command> command following
         the command keyword is an option switch that defines the action the
         command will be performing.
         These options and their actions are described in OPTIONS below.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
	<varlistentry>
	    <term><option>-create</option> <replaceable>name number raw fitname ?units?</replaceable></term>
	    <listitem>
		<para>
                  Creates a new calibrated parameter.  The
                  <option>-create</option> option is not required. Creation is the
                  default action if no initial option is present.
                  <parameter>name</parameter> is the name of the new calibrated parameter and
                  <parameter>number</parameter> is the SpecTcl parameter number associated
                  with that name.   <parameter>number</parameter> must be unique as must
                  <parameter>name</parameter>.
		</para>
                  <para>
                     <parameter>raw</parameter> is the name of the raw parameter to
                     which the fit named <parameter>fitname</parameter> will be applied
                     to compute values of the <parameter>name</parameter> calibrated
                     parameter.  The optional <parameter>units</parameter>
                     parameter allows you to associate units of measure with the
                     new parameter <parameter>name</parameter>.  These units of
                     measure will be displayed on axes of spectra that
                     depend on this parameter.
                  </para>
	    </listitem>
	</varlistentry>
        <varlistentry>
         <term><option>-list</option> <replaceable>?pattern?</replaceable></term>
         <listitem>
            <para>
               Lists the calibrated parameters that are now active.
               If the optional <parameter>?pattern?</parameter> is present,
               only parameters whose names match the <parameter>pattern</parameter>
               will be listed.  The <parameter>pattern</parameter> can contain
               all the wildcards recognized by the unix shells when expandind/finding
               filenames.  If <parameter>pattern</parameter> is missing it defaults
               to <literal>*</literal> which lists all parameters.
         </para>
         <para>
            The list is returned as the command result and therefore can be
            manipulated by other commands.  The list is  a well formed,
            possibly empty Tcl list.
            Each element of the list is a sublist that describes one parameter.
            The sublists have five elements, the name of the parameter,
            the number of the parameter, the name of the raw parameter, the name
            of the fit used to compute the parameter, and the units or an empty string
            if no untits were defined.
         </para>
         </listitem>
        </varlistentry>
         <varlistentry>
            <term><option>-delete</option> <replaceable>name</replaceable></term>
            <listitem>
               <para>
                  Deletes the calibrated parameter <parameter>name</parameter>
                                                   </para>
            </listitem>
         </varlistentry>
     <varlistentry>
      <term><option>-refresh</option> <replaceable>?pattern?</replaceable></term>
      <listitem>
         <para>
            Refreshes the calibrated parameters whose names match the <parameter>pattern</parameter>.
            <parameter>pattern</parameter>
            can contain any of the unix file matching wild-cards.  If omitted, the
            <parameter>pattern</parameter> defaults to <literal>*</literal>, refreshing
            all parameters.
         </para>
         <para>
            Refreshing a parameter updates any changes to the fit that computes the
            parameter.
         </para>
      </listitem>
     </varlistentry>
     </variablelist>
  </refsect1>

</refentry>

    </chapter>
    <chapter>
        <title>Sample GUI for the calibrated parameter plugin.</title>
            <para>
                The GUI supplied with the plugin was originally funded for work
                at Duke University at TUNL.  It is intended to calibrate parameters
                by having the user make correspondences between peaks in spectra
                and reference values for peaks that are expected to live in the
                spectra.  This is a typical calibration method used in gamma ray
                spectroscopy, where a source with known energy lines can be used
                to extract a calibration.
            </para>
            <para>
                This GUI may or may not be suitable to your application.  If it
                is, use it.  If not, don't.
            </para>
            <para>
                This chapter will describe:
                <itemizedlist>
                    <listitem>
                        <para>
                            How to setup the table of reference energies used
                            by the GUI.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            How to incorporate the GUI into your SpecTcl
                            application.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            How to use the GUI to calibrate your parameters.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        <section>
            <title>Creating a table of reference energies.</title>
            <para>
                The GUI requires a table of referene values.  When you
                calibrate a parameter, you will be selecting the reference
                values that match the centroids of specific peaks in your spectrum.
                These correspondences provide the points for the
                calibration fit.
            </para>
            <para>
                The calibration GUI reads, and merges a system-wide and
                a user-specific reference file.  One or the other or both of
                these files must exist (or fitting is not possible).
                If <varname>SpecTclHome</varname> is a Tcl variable that
                points to your SpecTcl installation,
                <varname>$SpecTclHome/etc/CalibrationPoints.dat</varname>
                is the system-wide reference file.  The user specific
                calibration file is
                <varname>~/.SpecTcl/CalibrationPoints.dat</varname>.
            </para>
            <para>
                The contents of these files are just real parameter values,
                one per line.  The units and scaling are entirely up to you.
                Comments and blank lines are not supported.
            </para>
        </section>

        <section>
            <title>Incorporating the GUI into your application specific
                SpecTcl</title>
            <para>
                The calibration GUI is a complex of packages that can be
                loaded via the <command>pacakge require</command> command.
            </para>
            <para>
                If you installed the plugin in SpecTcl's installation directory,
                you don't need to do anything to prepare to use this package.
                If you installed it elsewhere, you need to add that directory to
                SpecTcl's <varname>auto_path</varname> e.g.
                <programlisting>
lappend auto_path [file join ~ calibrationplugin]
                </programlisting>
            </para>
            <para>
                Load the calibration GUI and attach its components to buttons by
                modifying the following example:
            </para>
            <example>
                <title>Loading the Calibration GUI and attaching it to buttons</title>
                <programlisting>
package require Calibrations
package require CalibrationGUI
package require CalibIOGUI

frame .calibration
button .calibration.create -text {Create Calibration...} -command CalibrationGUI::CalibrationGUI
button .calibration.save   -text {Save Calibrated Parameters...} \
                           -command CalibIOGUI::WriteConfiguration
button .calibration.read   -text {Read Calibrated Parameters...} \
                            -command CalibIOGUI::ReadConfiguration

grid .calibration.create .calibration.save .calibration.read -sticky w

# Below here do what's needed to make the calibration frame visible in some
# parent.
...

                </programlisting>
            </example>
            <para>
                The code in this example places three buttons in a frame. These
                buttons are laid out left to right as follows:
            </para>
            <variablelist>
                <varlistentry>
                <term><guibutton>Create Calibration...</guibutton></term>
                <listitem>
                    <para>
                        Create a new calibrated parameter.
                    </para>
                </listitem>
                </varlistentry>
                <varlistentry>
                    <term><guibutton>Save Calibrated Parameters...</guibutton></term>
                    <listitem>
                        <para>
                            Prompts for a file into which will be written
                            the Tcl commands needed to reconstruct the fits
                            and calibrated parameters currently defined.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><guibutton>Read CalibratedParameters...</guibutton></term>
                    <listitem>
                        <para>
                            Prompts for a file saved with the
                            <guibutton>Save Calibrated Parameters...</guibutton>
                            button and reads it in.  Really this just
                            <command>source</command>es the selected
                            file.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section>
            <title>Calibrating parameters with the GUI.</title>
            <para>
                The parameter calibration GUI operates by asking you to define
                correspondences between peak positions in a spectrum on a raw
                parameter, and values in the reference file.
                To define peak positions, you will need to give SpecTcl information
                about where the peaks are.  You do this by creating
                <firstterm>Cut</firstterm> gates on a raw parameter spectrum
                in Xamine.
            </para>
            <para>
                When you click the <guibutton>Create Calibration...</guibutton>
                button, you are first presented with a list of the SpecTcl
                parameters:
            </para>
            <figure>
              <title>Raw parameter selection box</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="paramselect.gif" format="GIF" />
                </imageobject>

                <imageobject>
                  <imagedata fileref="paramselect.eps" format="EPS" />
                </imageobject>
              </mediaobject>
            </figure>
            <para>
                Select the raw parameter to be calibrated either by double
                clicking its name in the list box or selecting it and then
                clicking the <guibutton>Fit...</guibutton> button.
            </para>
            <para>
                The next step in creating a calibrated parameter presents
                you with the following dialog:
            </para>
            <figure>
                <title>Calibration dialog</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="calibrate.gif" format="GIF" />
                </imageobject>

                <imageobject>
                  <imagedata fileref="calibrate.eps" format="EPS" />
                </imageobject>
              </mediaobject>
            </figure>
            <para>
                Fill in the top part of this dialog with the name of the
                new parameter you will be creating, and optionally the units
                (e.g. Gamma1 and KeV).
            </para>
            <para>
                Using the middle part of the dialog, select peaks by clicking the
                checkbox next to the name of the gate that has been integtated.
                The position of the peak in the raw parameter space is shown in
                the middle column.  The right most column is a set of drop down
                menus that allow you to choose the reference value that
                corresponds to that peak.
            </para>
            <para>
                If you don't want to use a peak, simply leave the gate in which the
                peak position is unchecked.
            </para>
            <para>
                Click the <guibutton>Create</guibutton> to create the
                calibrated parameter. If the calibrated parameter already
                exists you will be prompted to decide  if you want to replace
                it.
            </para>
            <para>
                Once the calibrated parameter is created, the plugin will compute
                it for each event.  The parameter can be treated as any other
                SpecTcl parameter.  Spectra can be made on it, gates set on it
                and so on.
            </para>
        </section>
    </chapter>
   </book>
   
   
