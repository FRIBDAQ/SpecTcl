<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"

>
<book>
   <bookinfo>
    <title>CC-USB SpecTcl</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>May 5, 2012</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
      </revhistory>
   </bookinfo>
  <chapter>
    <title>Introduction</title>
    <para>
        CCUSBSpecTcl is a tailored version of SpecTcl that can process
        configuration files from the CC-USB readout software and, with a little
        added metadata on the part of the user, create tree parameters and
        spectra for the raw channels of each digitizer.  This allows
        you to use the same configuration file to describe an experiment
        end-to-end.  CCUSBSpecTcl is included in the distribution of
        NSCLSpecTcl starting with version 3.3-009.
    </para>
    <para>
        This document will describes:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                The metadata SpecTcl needs to create parameters.
            </para>
        </listitem>
        <listitem>
            <para>
                How to run CCUSBSpecTcl as is.
            </para>
        </listitem>
        <listitem>
            <para>
                How to obtain CCUSBSpecTcl and modify it to include additional
                stages of analysis.
            </para>
        </listitem>    
    </itemizedlist>
  </chapter>
  <chapter>
    <title>Configuration file metadata</title>
    <para>
        CC-USB readout's code uses a configuration file to build CC-USB stacks
        which execute in response to triggers.  These configuration files
        provide nearly enough information to allow SpecTcl to operate.  The only
        information missing is a naming of the used parameters of the
        digitizer modules in the stack.
    </para>
    <para>
        This chapter will describe how to add metadata to the configuration
        file that provides this information.
    </para>
    <para>
        We will also provide a description of each of the module types
        supported by CCUSBSpecTcl and any additional needs each module type
        may have.
    </para>
    <para>
        Let's consider the simple configuration file shown below:
    </para>
    <example id='ex.configfile'>
        <title>CC-USB Readout configuration file without metadata</title>
        <programlisting>
ph7xxx create tdc -slot 13 -id 0x7186 -sparse false
ph7xxx config tdc -readhits true -usellt false -usehlt false

stack create events
stack config events -modules [list tdc] -type event -delay 108
        </programlisting>
    </example>
    <para>
        This example creates a Phillips TDC module and requests that it
        be read in response to the trigger in the
        <literal>events</literal> stack..  While all 16 channels are read,
        the hit pattern is also read.
    </para>
    <para>
        This information is nearly sufficient to allow events to be decoded.
        The only thing missing is a correspondencde between the input channels
        on the TDC and SpecTcl parameters.  This is done by adding metadata
        to the configuration file that is not processed by the
        CCUSBReadout program.
    </para>
    <para>
        Recall that CCUSBConfiguration files are just Tcl scripts that
        are interpreted by an extended interpreter.  One logical way to add
        metadata is to store it in global data.  CCUSBSpecTcl takes that approach.
    </para>
    <para>
        CCUSBSpecTcl expects a global array named <varname>parameters</varname>
        to contain channel to parameter maps.  Elements of <varname>parameters</varname>
        are indexed by module name. Element values are a Tcl list that provides
        the channel/parameter mapping. The first element of that list is the
        parameter name for the first channel and so on.
        CCUSBSpecTcl will automatically create the parameter definition and
        a full resolution 1-d spectrum for each parameter.
    </para>
    <para>
        If you are not using a channel you can specify its name as an
        empty string (<literal>""</literal>).  If the last several channels
        of am odule are unused, you can omit them from the list.
    </para>
    <para>
        The next section provides several examples of metadata for the
        <link linkend='ex.configfile'>configuration file above</link>
    </para>
    <section>
        <title>EXAMPLES</title>
        <para>
            If you have a homgenous array of detectors, you can use the technique
            in the example below to provide a compact definition of
            digitizer channels:
        </para>
        <informalexample>
            <programlisting>

for {set i 0} {$i &lt; 16} {incr i} {
   lappend parameters(tdc)  [format tdc.%02d $i]
}
            </programlisting>
        </informalexample>
        <para>
            The example below shows what to do if you have an unused
            channel in the middle of an otherwise fully utilized module.
            Suppose channel 4 (numbered from 0) is not used:
        </para>
        <informalexample>
            <programlisting>
set parameters(tdc) [list tdc.00 tdc.01 tdc.02 tdc.03 \
                          ""     tdc.05 tdc.06 tdc.07 \
                          tdc.08 tdc.09 tdc.10 tdc.11 \
                          tdc.12 tdc.13 tdc.14 tdc.15 \
                    ]
                    
            </programlisting>
        </informalexample>
        <para>
            Finally, in the last example, only the first four channels are used:
        </para>
        <informalexample>
            <programlisting>
set parameters(tdc) [list tdc.00 tdc.01 tdc.02 tdc.03]
            </programlisting>
        </informalexample>
    </section>
    <section>
        <title>Module specific needs</title>
        <para>
            Some module types have special metadata needs or interpret
            their <varname>parameters</varname> array elements in a
            way different than 'normal'.  This section describes those
            module types and what makes them special.
        </para>
        <section>
            <title>CAEN C1205 multirange ADC</title>
            <para>
                This module produces three values for each input channel,
                a low range, a high range and a middle range. Therefore
                CCUSBSpecTcl will produce three parameters as well for
                each parameter name in its <varname>parameters</varname>
                element.
            </para>
            <para>
                The parameter names are taken as a base parameter name.
                The actual parameters and spectra are created by appending
                <literal>.low</literal> for the low range,
                <literal>.mid</literal> for the middle range, and
                <literal>.high</literal> for the high range.
            </para>
            <informalexample>
                <programlisting>
set parameters(c1205) [list e.00 e.01 e.02 e.03 e.04 e.05 e.06 e.07 \
                            e.08 e.09 e.10 e.11 e.12 e.13 e.14 e.15 \

        ]
                </programlisting>
            </informalexample>
            <para>
                The parameter list is an example that provides the base names
                for the 16 channels of the ADC.  This definition will produce
                48 parameters:
                <literal>e.00.low e.00.mid e.00.high ... e.15.high</literal>.
            </para>
        </section>
    </section>
  </chapter>
  <chapter>
    <title>Running CCUSBSpecTcl unmodified</title>
    <para>
        This chapter describes how to run CCUSBSpecTcl in its unmodified form.
        When you do that you will be able to process either online or event file
        based event data from the CCUSBReadout program taken with the same
        configuration file you point SpecTcl at.
    </para>
    <para>
        To run CCUSBSpecTcl you need to:
    </para>
    <orderedlist>
        <listitem>
            <para>
                Create a directory from which to run the program.
            </para>
        </listitem>
        <listitem>
            <para>
                Obtain a copy of the <filename>SpecTclRC.tcl</filename>
                for CCUSBSpecTcl and put it in the directory you
                created.
            </para>
            <para>
                This is stored in the
                <filename>CCUSBSkel</filename> subdirectory.  For example at the
                NSCL for the production version of SpecTcl 3.3 you will find this
                file at <filename>/usr/opt/spectcl/3.3/CCUSBSkel/SpecTclRC.tcl</filename>.
            </para>
        </listitem>
        <listitem>
            <para>
                Optionally integrate whatever additions you normall have for
                SpecTclRC.tcl into the <filename>CCUSBSpecTclRC.tcl</filename>.
            </para>
            <note>
                <title>Programming Hint</title>
                <para>
                    If you centralize those additions somewhere else and just
                    <command>source</command> them you'll save yourself a lot
                    of maintenance headaches.
                </para>
            </note>
        </listitem>
        <listitem>
            <para>
                CCUSBSpecTcl can then be run directly see the example below
            </para>
        </listitem>
    </orderedlist>
    <example>
        <title>Setting up and running CCUSBSpecTcl</title>
        <para>
            This example assumes Spectcl is installed in
            <filename>/usr/opt/spectcl/3.3</filename>.
        </para>
        <programlisting>
#
#  These only need to be done once:
#
mkdir ccusb
cp /usr/opt/spectcl/3.3/CCUSBSkel/SpecTclRC.tcl ccusb

# Optionally modify SpecTclRC.tcl below.

#
#  These are always done:
#
cd ccusb
/usr/opt/spectcl/3.3/bin/CCUSBSpecTcl

        </programlisting>
    </example>
    <para>
        By default, as it starts up, CCUSBSpecTcl will process the configuration
        file in <filename>~/config/daqconfig.tcl</filename>.  This is not always
        what you want. If the global variable <varname>daqconfig</varname> is
        defined prior to the call to <command>configureSpecTcl</command>
        (located in <filename>SpecTclRC.tcl</filename>), it is assumed to be the name
        of the configuration file.
    </para>
    <para>
        The following lines added to <filename>SpecTclInit.tcl</filename>
        allow you to use the environment variable <varname>DAQCONFIG</varname>
        to specify the configuration file:
    </para>
    <informalexample>
        <programlisting>
if {[array names env DAQCONFIG] ne ""} {
  set daqconfig $env(DAQCONFIG)
}
        </programlisting>
    </informalexample>
    <para>
        Tcl loads the environment into the global array <varname>env</varname>.
        If that environment variable is not set, then
        <command>array names env DAQCONFIG</command> will return the empty string
        and the default configuration file will be used.
    </para>
    <para>
        You can use this in conjunction with bash's ability to define
        environment variables for the duration of a command:
    </para>
    <informalexample>
        <programlisting>
DAQCONFIG=~/config.camac/daqconfig.tcl /usr/opt/spectcl/3.3/bin/CCUSBSpecTcl
        </programlisting>
    </informalexample>
    <para>
        The command above, in conjunction with the code snippet shown for
        <filename>SpecTclInit.tcl</filename> will run
        CCUSBSpecTcl with the configuration file
        <filename>~/config.camac/daqconfig.tcl</filename>
    </para>
    
  </chapter>
  <chapter>
    <title>Modifying CCUSBSpecTcl</title>
    <para>
        You may want to modify CCUSBSpecTcl if you want to produce parameters
        other than the raw parameters CCUSBSpecTcl and the SpecTcl plugins
        can produce (SpecTcl plugins include some dynamically loadable event
        processors that can produce several types of computed parameters
        that operate at compiled code speeds).
    </para>
    <para>
        This chapter shows you how to
        <orderedlist>
            <listitem>
                <para>
                    Obtain the source code for CCUSBSpecTcl
                </para>
            </listitem>
            <listitem>
                <para>
                    Add your own event processors to CCUSBSpecTcl, including a
                    discussion on how to locate parameters created by
                    CCUSBSpecTcl.
                </para>
            </listitem>
            <listitem>
                <para>
                    How to build your modified CCUSBSpecTcl
                </para>
            </listitem>
        </orderedlist>
    </para>
    <formalpara>
        <title>Obtaining the CCUSBSpecTcl source code</title>
        <para>
            The CCUSBSpecTcl source code and Makefile are located in
            the <filename>CCUSBSkel</filename> directory of your
            SpecTcl installation.  At the NSCL, for version 3.3,
            which we will use in our examples, this directory is
            <filename>/usr/opt/spectcl/3.3/CCUSBSkel</filename>.
        </para>
    </formalpara>
    <para>
        The example below creates a directory <filename>myccusbSpecTcl</filename>
        and copies the CCUSBSpecTcl code into that directory.
    </para>
    <informalexample>
        <programlisting>
mkdir myccusbSpectcl
cd    myccusbSpecTcl
cp /usr/opt/spectcl/3.3/CCUSBSkel/* .
        </programlisting>
    </informalexample>
    <formalpara>
        <title>Adding event processors to CCUSBSpecTcl</title>
        <para>
            When working with CCUSBSpecTcl it's important to keep in mind
            that CCUSBSpecTcl is really nothing special.  It is just SpecTcl
            with a set of specialized event processors a few extra commands
            and scripts.
            Everything you know about SpecTcl programming applies.
        </para>
    </formalpara>
    <para>
        To write an additional event processor for CCUSBSpecTcl just
        do what you normally do to write an event processor and register it
        in <filename>MySpecTclApp</filename> after the call to
        <function>RegisterEventProcessor</function> that is already there.
    </para>
    <formalpara>
        <title>Locating parameters by name</title>
    <para>
        One issue you will face is locating raw parameters that have been unpacked
        by CCUSBSpecTcl so that you can use them as input to the event processors
         you have created.
         There are two approaches to this:
         <orderedlist>
            <listitem>
                <para>Use the SpecTclAPI to locate the raw parameter</para>
            </listitem>
            <listitem>
                <para>Create tree parameters with the same name/definitions
                as the parameters you want to get/set
                </para>
            </listitem>
         </orderedlist>
    </para>
    </formalpara>
    <para>
        To use the SpecTcl API to locate a parameter you must know the
        parameter name and use the fact that a parameter id is just its index
        in the <parameter>rEvent</parameter> parameter passed into your
        event processor's <methodname>operator()</methodname> method.
        Since parameter lookup by name is time consuming, and since the parameter
        name/id mapping does not change unless a parameter is deleted/recreated,
        you should probably only do the lookup the first time your
        event processor is called to handle an event.
    </para>
    <para>
        The example below shows how to write an event processor
        that adds two parameters named <literal>param1</literal>
        and <literal>param2</literal> together.
        Only the relevant chunks of code are shown for brevity.
    </para>
    <example>
        <title>Using the SpecTcl API to locate parameters</title>
        <para>
            In the code below, we assume that
            <varname>m_param1, m_param2</varname> and
            <varname>m_initialized</varname> are two integer variables
            and a <type>bool</type> respectively.  We also assume that
            <varname>m_initialized</varname> is set to <literal>false</literal>
            when our event processor is constructed.
        </para>
        <programlisting>
#include &lt;SpecTcl.h&gt;
#include &lt;Parameter.h&gt;
#include &lt;string&gt;
...

//do the actual lookup:

void CMyUnpacker::lookupVariables()
{
    if (!m_initialized) {
        SpecTcl *pApi = SpecTcl::getInstance();  <co id='apilookup-instantiate' />
        
        CParameter* p1 = pApi->findParameter("param1"); <co id='apilookup-p1' />
        if (!p1) {
            throw std::string("Could not find param1"); <co id='apilookup-error' />
        }
        m_param1 = p1->getNumber();            <co id='apilookup-getid' />
        
        CParameter* p2 = pApi->findParameter("param2"); <co id='apilookup-p2' />
        if (!p2) {
            throw std::string("Could not find param2");
        }
        m_param2 = p2->getNumber();
        
        m_initialized = true;
    }
}
        </programlisting>
    </example>
    <calloutlist>
        <callout arearefs='apilookup-instantiate'>
            <para>
                Creates an instance of the SpecTcl API object.  This object
                contains data and methods that make up the SpecTcl API.
            </para>
        </callout>
        <callout arearefs='apilookup-p1'>
            <para>
                <methodname>findParameter</methodname> locates the parameter
                object (<type>CParameter</type>) that is associated with a parameter
                given its name. A pointer to the parameter object is returned
                if the parameter is found.  If the parameter does not exist,
                <literal>NULL</literal> is returned.
            </para>
        </callout>
        <callout arearefs='apilookup-error' >
            <para>
                In this example, if the named parameter is not found,
                a <type>std::string</type> exception is thrown. You
                must either arrange for the exception to be caught or rely on
                some SpecTcl last chance exception handler.   If this is called
                from an event processor's <methodname>operator()</methodname>
                method, the event processing framework will report the message
                and abort further processing of the event.
            </para>
        </callout>
        <callout arearefs='apilookup-getid'>
            <para>
                The <methodname>getNumber</methodname> method of a parameter object
                returns the id of the parameter.  The id of the parameter is
                a unique number that identifies the parameter.  It is als the
                index into the <parameter>rEvent</parameter> array passed to the
                <methodname>operator()</methodname> method of an event processor
                class.
            </para>
        </callout>
        <callout arearefs='apilookup-p2'>
            <para>
               Similarly, the code looks up the parameter id of
               <literal>param2</literal>
            </para>
        </callout>
                    
    </calloutlist>
    <para>
        An alternative to this is to use Tree parameters.  Tree parameters
        are objects that act very much like floating point numbers that are,
        among other things, associated with a parameter.  If you create a tree
        parameter and associate it, it will be associated with the
        parameter it represents in the call to <methodname>operator()</methodname>
        in an event processor.
    </para>
    <para>
        The code below shows another way to handle the previous problem of
        getting access to parameters named <literal>param1</literal> and
        <literal>param2</literal>.  In this case, however assume the
        member variables <varname>m_param1</varname> and <varname>m_param2</varname>
        are defined as <classname>CTreeParameter</classname> objects that are
        members of the event processor.
        The previous example might be written:
    </para>
    <example>
        <title>Using tree parameters to access SpecTcl parameters by name</title>
        <programlisting>
#include &lt;TreeParameter.h&gt;
...
void CMyUnpacker::lookupVariables()
{
    if (!m_initialized) {
        m_param1.Initialize("param1");         <co id='tree_init1' />
        m_param1.Bind();                       <co id='tree_bind1' />
        
        m_param2.Initialize("param2");         <co id='tree_2' />
        m_param2.Bind();
        
    }
}
        </programlisting>
    </example>
    <calloutlist>
        <callout arearefs='tree_init1'>
            <para>
                Initialize the <varname>m_param1</varname> instance variable
                so that it will be bound to <literal>param1</literal>.
                This just associates a parameter name with a tree parameter.
            </para>
        </callout>
        <callout arearefs='tree_bind1'>
            <para>
                This bind operation is what actually associates the tree parameter
                with a parameter.  Once that is done the event processor's
                <methodname>operator()</methodname> method can treat
                <varname>m_param1</varname> like a real value  in the sense that
                using it in a right hand side expression will substitute the
                value of the underlying parameter named <literal>param1</literal>
                in that event and using it as an lvalue will modify the underlying
                <literal>param1</literal>
            </para>
            <para>
                
            </para>
        </callout>
        <callout arearefs='tree_2'>
            <para>
                <literal>param2</literal> is treated the same way.
            </para>
        </callout>
    </calloutlist>
    <formalpara>
        <title>Building your modified ccusbSpecTcl</title>
        <para>
            To build your modified ccusbSpecTcl you just need to modify
            the <filename>Makefile</filename> to add your objects and
            execute the <command>make</command> command.
        </para>
    </formalpara>
    <para>
        In my opinion it would be best to separate your object files from
        those that are standard unpackers and other framework sources.
        This is easily done.  Locate the definition of the
        <literal>OJBECTS</literal> Makefile variable.  Append
        a <literal>$(USEROBJECTS)</literal> to the back end of the standard objects and
        add a definition for <literal>USEROBJECTS</literal> above it.
        For example:
    </para>
    <informalexample>
        <programlisting>
            
USEROBJECTS=MyEventProcessor.o
            
OBJECTS=MySpecTclApp.o ParamMapCommand.o CCUSBUnpacker.o \
        CCCUSBPacket.o CPh7xxUnpacker.o CFixedSizedUnpacker.o \
        CC1205Unpacker.o $(USEROBJECTS)
   
        </programlisting>
    </informalexample>
    
  </chapter>
  
  <part>
    <title>Reference material</title>
      <partintro>
        <para>
            This part contains reference material.  It is also used to produce
            manpages for online reference.
        </para>
      </partintro>
        
    <reference>
      <title>Configuration files</title>
        <!-- Metadata reference -->
      <refentry id="metadata">
        <refmeta>
           <refentrytitle>CCUSBSpecTcl metadata</refentrytitle>
           <manvolnum>5ccusbSpecTcl</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>CCUSBSpecTcl metadata</refname>
           <refpurpose>describe metdata used by CCUSBSpecTcl from the daqconfig file</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
        <synopsis>
set daqconfig <filename>/path/to/daqconfig.tcl</filename>
set parameters(<replaceable>module-name</replaceable>) <replaceable>parameter-list</replaceable>
        </synopsis>
        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            SpecTcl uses metadata 
            to determine how to handle CC-USB event data.  The first chunk
            of metadata, the <varname>daqconfig</varname> global variable
            determines which configuration file is used.  If not defined this
            defaults to <parameter>~/config/daqconfig.tcl</parameter>.
            This file is then read by <filename>spectclconfig.tcl</filename>
            to set up the initial analysis case.
            Naturally the <varname>daqconfig</varname> variable must be assigned
            a value before <filename>spectclconfig.tcl</filename> is
            <command>source</command>d.
           </para>
           <para>
            At this time the processors expect to se a set of
            <command>set</command> commands that define elements of an
            array named <varname>parameters</varname>. Inidices of the array
            are the names of modules defined in  the configuration file. Element
            values are valid Tcl lists.
           </para>
           <para>
            The elements of each list are the names of parameters SpecTcl should
            use for each inpt of the device.  The first element of the list is
            the name of the parameterfor the first channel and so on.
            If channels are not used, you may put a <literal>""</literal> empty
            list element.  If only the first few channels are used,
            you may omit the unused channel from the list  e.g.
            <programlisting>
set parameters(adc) [list p1 p2 p3 p4 "" "" "" ""]
            </programlisting>
            is equivalent to
            <programlisting>
set parameters(adc) [list p1 p2 p3 p4]
            </programlisting>
           </para>
        </refsect1>
        <refsect1>
           <title>
              EXAMPLES:
           </title>
            <para>
                The first example shows a fragment from a <filename>SpecTclRC.tcl</filename>
                which allows you to choose a configuration file.
            </para>
            <example>
                <title>Graphically choosing the configuration file</title>
                <programlisting>
lappend auto_path $SpecTclHome/TclLibs             <co id='auto_path' />

set daqconfig [tk_getOpenFile \
                   -defaultextension .tcl \
                   -filetypes [list       \
                   {{TCL Scripts} {.tcl}   }    \ <co id='fileprompt' />
                   {{Text Files} {.txt}    }    \
                   {{All files} *   }           \
                          ]      \
                   -title {Choose config file}]

package require ccusbconfig                       <co id='pkg_require' />
configureSpecTcl                                  <co id='configure' />
                </programlisting>
            </example>
            <calloutlist>
                <callout arearefs='auto_path'>
                    <para>
                        Ensures that the SpecTcl loadable Tcl packages will
                        be found by the <command>package require</command> command.
                    </para>
                </callout>
                <callout arearefs='fileprompt'>
                    <para>
                        tk_getOpenFile pops up a dialog that lets you choose
                         a file.  The name of the file you choose is then assigned
                         to the <varname>daqconfig</varname> variable.
                    </para>
                </callout>
                <callout arearefs='pkg_require'>
                    <para>
                        The <filename>ccusbconfig</filename> Tcl package defines
                        the procs needed to process configuration files.
                    </para>
                </callout>
                <callout arearefs='configure'>
                    <para>
                        <methodname>configureSpecTcl</methodname> is the proc
                        that will process the configuration file.
                    </para>
                </callout>
            </calloutlist>
            <para>
                The next example illustrates several ways to define
                SpecTcl parameters for daq configuration files.
                For the purposes of this example, assume that there are modules
                named <literal>mod1, mod2, mod3, mod4...</literal>.
            </para>
            <example>
                <title>Setting the parameters array elements</title>
                <programlisting>
                </programlisting>
            </example>
        </refsect1>

      </refentry>
        
    <refentry id="ccusbSpecTcl">
      <refmeta>
         <refentrytitle>ccusbSpecTcl</refentrytitle>
         <manvolnum>1SpecTcl</manvolnum>
      </refmeta>
      <refnamediv>
         <refname>ccusbSpecTcl</refname>
         <refpurpose>Sstarting the CCUSB SpecTcl.</refpurpose>
      </refnamediv>
      
      <refsynopsisdiv>
        <cmdsynopsis>
            <command>
$SpecTclHome/bin/CCUSBSpecTcl
        </command>
        </cmdsynopsis>

      </refsynopsisdiv>
      <refsect1>
         <title>DESCRIPTION</title>
         <para>
            Beginning with SpecTcl 3.3-009, CCUSBSpecTcl is installed with the
            regular SpecTcl distribution.  In the synopsis above,
            <literal>$SpecTclHome</literal> is the top level of the installation
            directory of SpecTcl.  For version 3.3, at the NSCL, this is
            <filename>/usr/opt/spectcl/3.3</filename>.
         </para>
         <para>
            In order to make  CCUSBSpecTcl work you
         </para>
         <itemizedlist>
            <listitem>
                <para> Must require the <filename>ccusbconfig</filename> package
                into your <filename>SpecTclRC.tcl</filename> file.
                </para>
            </listitem>
            <listitem>
                <para>
                    Optionally define the Tcl variable <varname>daqconfig</varname>
                    to be the path to your daq configuration file.  This file
                    must be the same configuration file that was used to
                    define the readout for the case you are analyzing.
                </para>
            </listitem>
            <listitem>
                <para>
                    Invoke the <function>configureSpecTcl</function> proc
                    to process the configuration file and set up the
                    initial analysis
                </para>
            </listitem>
         </itemizedlist>
      </refsect1>
      <refsect1>
         <title>
            EXAMPLES
         </title>
        <para>
            The example below shows how to prompt for the daq configuration
            file in your <filename>SpecTclRC.tcl</filename> and configure
            CCUSBSpecTcl.  It is a fragment of what is most likely a larger
            <filename>SpecTclRC.tcl</filename> script.
        </para>
        <informalexample>
                <programlisting>


set daqconfig [tk_getOpenFile \
                   -defaultextension .tcl \
                   -filetypes [list       \
                   {{TCL Scripts} {.tcl}   }    \ 
                   {{Text Files} {.txt}    }    \
                   {{All files} *   }           \
                          ]      \
                   -title {Choose config file}]

lappend auto_path $SpecTclHome/TclLibs
package require ccusbconfig 
configureSpecTcl            
                </programlisting>
        </informalexample>
      </refsect1>

    </refentry>

      <refentry id="ccusbUnpackers">
        <refmeta>
           <refentrytitle>ccusbUnpackers</refentrytitle>
           <manvolnum>3SpecTcl</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>CCUSB Unpackers</refname>
           <refpurpose>Unpacker special requirements and notes</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
            <synopsis>
c1205 triple range ADC.
            </synopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            This man page describes the special requirements and behavior
            of CCUSB SpecTcl unpackers that are not as simple as described
             in the rest of the CCUSB documentation.
           </para>
        </refsect1>
        <refsect1>
           <title>
              SPECIAL MODULES
           </title>
           <variablelist>
            <varlistentry>
                <term><literal>c1205</literal></term>
                <listitem>
                    <para>
                        This module is a triple range ADC.  That is each input
                        can produce three parameters of data. A high range,
                        a middle range and a low range value.  Lacing these
                        values into a single parameter is non-trivial and
                        we don't attempt it in the code.
                    </para>
                    <para>
                        Instead, the software uses the
                        <varname>parameters</varname> list for this device
                        to establish a base parameter name.  The
                        The software then generates three parameters for each
                        base name. This is done by prefixing the
                        text <literal>.low</literal>, <literal>.mid</literal>
                        and <literal>.high</literal> to the base name.
                    </para>
                    <para>
                        For example, suppose we have a parameter name of
                        <literal>channel1</literal> in the <varname>parameters</varname>
                        array.  This results in the parameters
                        <literal>channel1.low</literal>, <literal>channel1.mid</literal>
                        and <literal>channel1.high</literal>.
                    </para>
                </listitem>
            </varlistentry>
           </variablelist>
        </refsect1>

      </refentry>

    </reference>
  </part>
  
</book>