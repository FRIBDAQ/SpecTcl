#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   dbtcl.test
# @brief  Tests of the Tcl bindings to the SpecTcl database.
# @author Ron Fox <fox@nscl.msu.edu>
#

# @note must be run after installation.

package require tcltest
package require sqlite3

package require SpecTclDB


tcltest::configure -verbose [list start pass error]

##################################################
## Basic dbtcl tests:

tcltest::test info_1 {Check the existence of the command} \
-body {
    info command DBTcl
} -result DBTcl

tcltest::test dbtcl_1 {Command needs a subcommand} \
-body {
    catch {DBTcl}
} -result 1

tcltest::test dbtcl_2 {Subcommand must be legal } \
-body {
    catch {DBTcl junk}
} -result 1

######################################################
# Dbtcl subcommands.

tcltest::test dbtcl_create_1 {Create needs a filename} \
-body {
    catch {DBTcl create} msg
} -result 1

tcltest::test dbtcl_create_2 {Create makes a new file} \
-setup {
    set chan [file tempfile fname]
    close $chan
    file delete $fname;              # should get remade.
} \
-cleanup {
    file delete $fname
} \
-body {
    DBTcl create $fname
    file exists $fname
} -result 1

tcltest::test dbtcl_create_3 {The database file should have a parameter_defs table} \
-setup {
    set chan [file tempfile fname]
    close $chan
    file delete $fname;              # should get remade.
} \
-cleanup {
    file delete $fname
} \
-body {
    DBTcl create $fname
    sqlite3 db $fname
    set found 0
    db eval {SELECT name FROM sqlite_master WHERE type='table' AND
                    name='parameter_defs'} {
        set found 1        
    }
    db close
    set found
} -result 1


    
tcltest::test dbtcl_connect_1 {The connect command needs a filename} \
-body {
    catch {DBTcl connect}
} -result 1


tcltest::test dbtcl_connect2 {The connect command needs a real database} \
-setup {
    set chan [file tempfile fname]
    close $chan
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {DBTcl connect $fname}
} -result 1

tcltest::test dbtcl_connect3 {If a database was made the command works} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {DBTcl connect $fname}
} -result 0

tcltest::test dbtcl_connect4 {If a database was made, I get back a command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    set cmd [DBTcl connect $fname]
    info command $cmd
    string is space $cmd
} -result 0

###########################
# db instance tests.

tcltest::test dbtcl_instance_1 {database instance commands need a subcommand } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    catch $cmd
} -result 1

tcltest::test dbtcl_instance_2 {database illegal instance command } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
} \
-body {
    catch {$cmd junk}
} -result 1

tcltest::test dbtcl_instance_destroy {database instance destroy wipes cmd} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    
} \
-body {
    $cmd destroy
    info command $cmd
} -result ""

tcltest::test dbtcl_instance_crsvset_1 {create saveset needs a name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    $cmd destroy
} \
-body {
    catch $cmd createSaveset
} -result 1

tcltest::test dbtcl_instance_crsvset_2 {create save set returns a command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    file delete $fname
    $cmd destroy
} \
-body {
    set scmd [$cmd createSaveset testing]
    string is space [info command $scmd]
} -result 0

tcltest::test dbtcl_instance_crsvset_3 {create saveset creates a database saveset} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    set scmd [$cmd createSaveset testing]
    sqlite3 db $fname
    db eval {SELECT COUNT(*) c FROM save_sets WHERE name='testing'} {
        set count $c
    }
    db close 
    set count
} -result 1



tcltest::test dbtcl_instance_get_1 {Get saveset needs a saveset param} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch {cmd getSaveset}
} -result 1

tcltest::test dbtcl_instance_get_2 {Get saveset saveset must exist} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch  {cmd getSaveset test}
} -result 1

tcltest::test dbtcl_instance_get_3 {Get saveset with existing makes a cmd} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    $cmd createSaveset test
    set svcmd [$cmd getSaveset test]
    
    string is space [info command $svcmd]
} -result 0


tcltest::test dbtcl_instance_list_1 {listSavesets can't have more params} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$cmd listSavesets junk}
} -result 1

tcltest::test dbtcl_instance_list_2 {empty list if no savesets} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    set l [$cmd listSavesets]
    llength $l
} -result 0

tcltest::test dbtcl_instance_list_3 {single save set lists} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    $cmd createSaveset test
    set l [$cmd listSavesets]
    set n [llength $l]
    lappend n $l
    set n
} -result [list 1 test]

tcltest::test dbtcl_instance_list_4 {several savesets} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
} \
-cleanup {
    $cmd destroy
    file delete $fname
} \
-body {
    for {set i 0} {$i < 10} {incr i} {
        $cmd createSaveset test_$i
    }
    set l [$cmd listSavesets];  #in definition order.
        
} -result [list test_0 test_1 test_2 test_3 test_4 test_5 test_6 \
           test_7 test_8 test_9]



#########################
# Save set tests

tcltest::test saveset_1 {saveset instance commands need a subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch $svcmd
} -result 1

tcltest::test saveset_2 {saveset instance command illegal subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch {$svcmd junk}
} -result 1

tcltest::test saveset_2 {saveset instance destroy works} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    #$svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    $svcmd destroy
    info command $svcmd
} -result ""

tcltest::test saveset_info_1 {info does not take arguments} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    catch {$svcmd info bad}
    
} -result 1


tcltest::test saveset_info_2 {info value is correct} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset test]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
    
} \
-body {
    set result [$svcmd info]
    set id [dict get $result id]
    set name [dict get $result name]
    
    list $id $name
} -result [list 1 test]

## parameter api

tcltest::test dbtcl_crparam_1 {Create parameter requires more than the subcommand} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd createParameter}
} -result 1

tcltest::test dbtcl_crparam_2 {Create simple parameter} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd createParameter param.1 1
    sqlite3 db $fname
    db eval {SELECT id, number, low, high, bins, units FROM parameter_defs
             WHERE name = 'param.1'} {
        set result [list $id $number $low $high $bins $units]            
    }
    db close
    set result
} -result [list 1 1 "" ""  "" "" ]

tcltest::test dbtcl_crparam_3 {need at lease 7 params if treeparam} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd createParameter param-bad 2 0 100}
} -result 1

tcltest::test dbtcl_crparam4 {tree parameter with no units} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    unset result
    $svcmd createParameter param-tree 12 -10.0 10.0 100
    sqlite3 db $fname
    db eval {SELECT id, number, low, high, bins, units FROM parameter_defs
             WHERE name = 'param-tree'} {
        set result [list $id $number $low $high $bins $units]            
    }
    db close
    set result
} -result [list 1 12 -10.0 10.0 100 ""]

tcltest::test dbtcl_listparams_1 {list empty initially} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    unset result
    set result [$svcmd listParameters]
    
    llength $result
} -result 0

tcltest::test dbtcl_listparams_2 {list a few primitive params} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
    set result [$svcmd listParameters]
    lappend result [llength $result]
    set result
} -result [list                                              \
           [dict create id 1 name param.0 number 1]           \
           [dict create id 2 name param.1 number 2]           \
           [dict create id 3 name param.2 number 3]           \
           [dict create id 4 name param.3 number 4]           \
           [dict create id 5 name param.4 number 5]           \
           [dict create id 6 name param.5 number 6]           \
           [dict create id 7 name param.6 number 7]           \
           [dict create id 8 name param.7 number 8]           \
           [dict create id 9 name param.8 number 9]           \
           [dict create id 10 name param.9 number 10]           \
           10                                                 \
        ]    

tcltest::test dbtcl_listparams_3 {list some params with metadat} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    for {set i 0} {$i < 3} {incr i} {
        set low [expr $i*100]
        $svcmd createParameter name.$i [expr $i+1]  \
            $low [expr {$low+100}] 200 furlongs
    }
    set result [$svcmd listParameters]
} -result [list                                              \
[dict create id 1 name name.0 number 1 low 0.0 high 100.0 bins 200 units furlongs]  \
[dict create id 2 name name.1 number 2 low 100.0 high 200.0 bins 200 units furlongs]  \
[dict create id 3 name name.2 number 3 low 200.0 high 300.0 bins 200 units furlongs]  \
]
  
tcltest::test dbtcl_listparams_3       {Extra command params not allowed} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd listParameters junk}
} -result 1
    
tcltest::test dbtcl_findparam_1  {Find a simple parameter} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1
    $svcmd findParameter testing
} -result [dict create id 1 name testing number 1]

tcltest::test dbtcl_findparam_2 {Find parameter with metadata} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    $svcmd findParameter testing
} -result \
[dict create id 1 name testing number 1 low 100.0 high 200.0 bins 200 units some-units]

tcltest::test dbtcl_findparam_3 {no such parameter is exception} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    catch {$svcmd findParameter testing}
} -result 1

tcltest::test dbtcl_findparam_4  {need a parameter name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    catch {$svcmd findParameter}
} -result 1

tcltest::test dbtcl_findparam_5 {too many cmd line params with lisparams} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createParameter testing 1 100 200 200 some-units
    catch {$svcmd findParameter testing bad}
} -result 1

tcltest::test dbtcl_createspec_1 {Create spectrum 1-d} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 1 [list param.0] [list [list -100 100 200]]
    
    # Should be an entry for it in spectrum_defs.
        
    sqlite3 db $fname
    db eval {SELECT COUNT(*) count FROM  spectrum_defs WHERE name='spec'} {
        set n $count
    }
    
    db close
    set n
} -result 1

tcltest::test dbtcl_createspec_2 {Create 2d spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 2 [list param.0 param.5] [list [list 0 50 100] [list -100 100 200]]
    
    # Should be an entry for it in spectrum_defs.
        
    sqlite3 db $fname
    db eval {SELECT COUNT(*) count FROM  spectrum_defs WHERE name='spec'} {
        set n $count
    }
    
    db close
    set n
} -result 1

tcltest::test dbtcl_createspec_3 {Bad parameter is problem} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
        
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        $svcmd createSpectrum spec 2 [list param.0 param.12] \
            [list [list 0 50 100] [list -100 100 200]]
    }
} -result 1

tcltest::test  dbtcl_createspec_4 {Specify data type} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createSpectrum spec 2 [list param.0 param.5] [list [list 0 50 100] [list -100 100 200]] word
    
    # Data type should propagate into database.
        
    sqlite3 db $fname
    db eval {SELECT datatype  FROM  spectrum_defs WHERE name='spec'} {
        set dtype $datatype
    }
    
    db close
    set datatype
} -result word

tcltest::test dbtcl_createspec_5 {too few parameters throws } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        createSpectrum spec 2 [list param.0 param.5]
    }
} -result 1

tcltest::test dbtcl_createspec_6 {Too many parameters throws} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {
        $svcmd createSpectrum spec 2 [list param.0 param.5] \
            [list [list 0 50 100] [list -100 100 200]] word junk
    }
} -result 1

tcltest::test dbtcl_specexists_1 {Needs a parameter} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 4095 4096]]
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd spectrumExists}
} -result 1

tcltest::test dbtcl_specexists_2 {too many command parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 4095 4096]]
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd spectrumExists raw.$1 junk}
} -result 1
 
tcltest::test dbtcl_specexists_3 {existing spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 4095 4096]]
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd spectrumExists raw.5
} -result 1

tcltest::test dbtcl_specexists_4 {nonexistent spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 4095 4096]]
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd spectrumExists raw.55
} -result 0

tcltest::test  dbtcl_findspec_1 {Find a 1d spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findSpectrum raw.1
} -result [dict create \
    id 1 name raw.1 type 1 parameters [list param.0] \
    xparameters [list param.0] yparameters [list]\
    axes [list [dict create low 0.0 high 4095.0 bins 4096]] datatype long \
]

tcltest::test dbtcl_findspec_2 {find 2-d spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findSpectrum raw.2
} -result [dict create \
    id 2 name raw.2 type 2 parameters [list param.1 param.2] \
    xparameters [list param.1] yparameters [list param.2] \
    axes [list [dict create low 0.0 high 1024.0 bins 512] \
          [dict create low -10.0 high 10.0 bins 100]]  datatype long     \
]

tcltest::test dbtcl_findspec_3 {no such spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findSpectrum raw.3}
} -result 1

tcltest::test dbtcl_findspec_4 {need a spectrum name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch $svcmd 
} -result 1

tcltest::test dbtcl_findspec_5 {too many parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findSpectrum junk}
} -result 1
 
 tcltest::test dbtcl_listspec_1  {Initially empty} \
 -setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listSpectra
} -result [list]

tcltest::test dbtcl_listspec_2 {list a couple spectra} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listSpectra
} -result [list                                    \
 [dict create \
id 1 name raw.1 type 1 parameters [list param.0] \
    xparameters [list param.0] yparameters [list] \
         axes [list [dict create low 0.0 high 4095.0 bins 4096]] datatype long \
] \
 [dict create \
    id 2 name raw.2 type 2 parameters [list param.1 param.2] \
    xparameters [list param.1] yparameters [list param.2] \
    axes [list [dict create low 0.0 high 1024.0 bins 512] \
          [dict create low -10.0 high 10.0 bins 100]]  datatype long]     \
]

tcltest::test dbtcl_listspec_3 {No extra parameters allowed} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd createSpectrum raw.1 1 param.0 [list [list 0 4095 4096]]
    $svcmd createSpectrum raw.2 2 [list param.1 param.2]  \
        [list [list 0 1024 512] [list -10 10 100]]
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd listSpectra raw.1}
} -result 1


### gate tests:

tcltest::test dbtcl_cr1dgate_1 {Create a 1d gate successfully} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    $svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 20
    
    sqlite3 db $fname
    db eval {
        SELECT id, type FROM gate_defs WHERE name = 'agate'
    } {
        set result [list $id $type]
    }
    
    db close
    set result
} -result [list 1 gs]

tcltest::test dbtcl_cr1dgate_2 {Insufficient gate parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    catch {$svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 }
} -result 1

tcltest::test dbtcl_cr1dgate_3 {Too many gate parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    catch {$svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 20 5}
} -result 1

tcltest::test dbtcl_cr2dgate_3 {make a 2d gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    set points [list {10 10} {100 10} {100 100} {10 100}]
    $svcmd create2dGate agate gc [list param.0 param.1 param.2] $points
    
    sqlite3 db $fname
    db eval {
        SELECT id, type FROM gate_defs WHERE name = 'agate'
    } {
        set result [list $id $type]
    }
    
    db close
    set result
} -result [list 1 gc]

tcltest::test cr2dgate_2 {too many command parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    set points [list {10 10} {100 10} {100 100} {10 100}]
    catch {$svcmd create2dGate agate gc [list param.0 param.1 param.2] $points junk}
} -result 1

tcltest::test cr2dgate_3 {Too vew command parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    
    set points [list {10 10} {100 10} {100 100} {10 100}]
    catch {$svcmd create2dGate agate gc [list param.0 param.1 param.2] }
} -result 1
    
tcltest::test crcompgate_1  {Create a compound gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 20
    set points [list {10 10} {100 10} {100 100} {10 100}]
    $svcmd create2dGate bgate gc [list param.0 param.1 param.2] $points
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createCompoundGate and * [list agate bgate]
    
    sqlite3 db $fname
    db eval {
        SELECT id, type FROM gate_defs WHERE name = 'and'
    } {
        set result [list $id $type]
    }
    db close
    
    set result
} -result [list 3 *]
    
tcltest::test crcompgate_2 {Too few parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 20
    set points [list {10 10} {100 10} {100 100} {10 100}]
    $svcmd create2dGate bgate gc [list param.0 param.1 param.2] $points
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {createCompoundGate and *}
} -result 1
tcltest::test crcompcgate_3 {too many parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    $svcmd create1dGate agate gs [list param.0 param.1 param.2] 10 20
    set points [list {10 10} {100 10} {100 100} {10 100}]
    $svcmd create2dGate bgate gc [list param.0 param.1 param.2] $points
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd createCompoundGate and * [list agate bgate] junk}
} -result 1

tcltest::test crmaskgate_1 {Create a valid mask gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createMaskGate agate em param.8 0x55555555
    
    sqlite3 db $fname
    db eval {
        select id, type FROM gate_defs WHERE name ='agate'
    } {
        set result [list $id $type]
    }
    db close
    set result
} -result [list 1 em]

tcltest::test crmaskgate_2 {too few parameters for  command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd createMaskGate agate em param.8}
    
} -result 1
    
tcltest::test crmaskgate_3 {too few parameters for command} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd createMaskGate agate em param.8 0x12345678 hello}
    
} -result 1
    
tcltest::test gateexists_1 {gate does exist} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createMaskGate agate em param.8 0x12345678
    $svcmd gateExists agate
} -result 1

tcltest::test gateexists_2 {Gate does not exist} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createMaskGate agate em param.8 0x12345678
    $svcmd gateExists agates
} -result 0

tcltest::test gateexists_3 {gateExists needs a gate-name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createMaskGate agate em param.8 0x12345678
    catch {$svcmd gateExists }
} -result 1

tcltest::test gateexists_4 {gateExists only needs a gate-name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createMaskGate agate em param.8 0x12345678
    catch {$svcmd gateExists agate b }
} -result 1

tcltest::test findgate_1 {Find a point gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findGate oned
} -result [dict create                                      \
   id 1 name oned type s classification point parameters param.0 points          \
    [list [dict create x 100.0 y 0.0] [dict create x 200.0 y 0.0 ] ] \
]
    
tcltest::test findgate_2 {Find a 2 d gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findGate twod
} -result [dict create      id 2                                \
    name twod  type c classification point parameters [list param.1 param.2] \
    points [list                                                       \
    [dict create x 100.0 y 100.0] [dict create x 200.0 y 100.0]         \
    [dict create x 200.0 y 200.0] [dict create x 100.0 y 200.0]         \
    ] \
]

tcltest::test findgate_3  {Find a compound gate} \
 -setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findGate and
} -result [dict create  id 3 name and type * classification compound \
           gates [list oned twod]                                    \
]

tcltest::test findgate_4 {Find a mask gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findGate mask
} -result [dict create  id 4 name mask type em classification mask \
           parameters param.3 mask 12345                           \
]

tcltest::test findgate_5 {No such gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findGate twonky}
} -result 1

tcltest::test findgate_6 {need a gate name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findGate}
} -result 1

tcltest::test findgate_7 {need only a gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findGate mask extra}
} -result 1

tcltest::test listgates_1 {list when there are no gates} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listGates
} -result [list]

tcltest::test listgates_2 {list when there are gates} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listGates
} -result [list                                                      \
[dict create                                      \
   id 1 name oned type s classification point parameters param.0 points          \
    [list [dict create x 100.0 y 0.0] [dict create x 200.0 y 0.0 ] ]] \
[dict create      id 2                                \
    name twod  type c classification point parameters [list param.1 param.2] \
    points [list                                                       \
    [dict create x 100.0 y 100.0] [dict create x 200.0 y 100.0]         \
    [dict create x 200.0 y 200.0] [dict create x 100.0 y 200.0]         \
    ] ] \
[dict create  id 3 name and type * classification compound \
           gates [list oned twod] ] \
[dict create  id 4 name mask type em classification mask \
           parameters param.3 mask 12345] \
]

tcltest::test listgate_3 {No extra parameters are allowed} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd listGates oned}
} -result 1


tcltest::test applygate_1  {Successful appliction of a gate to a spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
    # Make some spectra:
    
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    } 
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd applyGate oned raw.2
    sqlite3 db $fname
    db eval {SELECT * FROM gate_applications} {
        set result [list $id $spectrum_id $gate_id]
    }
    db close $fname
    set result
} -result [list 1 3 1]

tcltest::test applygate_2 {No such gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd applyGate junk raw.0}
} -result 1

tcltest::test applygate_3 {no such spectrum} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345
    
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }    
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd applyGate twod spectrum}
} -result 1

tcltest::test applygate_4 {too few parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd applyGate and}
} -result 1

tcltest::test applygate_5 {too many paramrs} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd applyGate mask raw.7 junk}
} -result 1


tcltest::test find_application_1 {Find an applied gate} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd applyGate and raw.2
    $svcmd findApplication and raw.2
} -result [dict create id 1 gate and spectrum raw.2]

tcltest::test  find_application_2 {no such application} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
        $svcmd applyGate and raw.2
        catch {$svcmd findApplication and spec.2}
} -result 1

tcltest::test find_application_3 {Too few parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd applyGate mask raw.5
    catch {$svcmd findApplication em}
} -result 1

tcltest::test find_application_4 {Too  many parameters } \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd applyGate mask raw.5
    catch {$svcmd findApplication em raw.5 junk}
} -result 1

tcltest::test listapp_1 {Empty list if no applications made} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listApplications
} -result [list]

tcltest::test listapp_2 {applications get listed correctly} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd applyGate twod raw.0
    $svcmd applyGate oned raw.1
    $svcmd listApplications
} -result [list                          \
    [dict create id 1 gate twod spectrum raw.0] \
    [dict create id 2 gate oned spectrum raw.1] \
]

tcltest::test listapp_3 {No extra parameters allowd} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }
    # Make some gates:
    
    $svcmd create1dGate oned s param.0 100 200
    set points [list {100 100 } {200 100} {200 200} {100 200}]
    $svcmd create2dGate twod c [list param.1 param.2] $points
    $svcmd createCompoundGate and * [list oned twod]
    $svcmd createMaskGate mask em param.3 12345

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd listApplications oned} 
}  -result 1

tcltest::test crvariable_1  {Create unitless variable} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createVariable pi 3.1416
    
    sqlite3 db $fname
    db eval {
        SELECT id, save_id, value, units FROM treevariables
           WHERE name = 'pi'
    } {
        set result [list $id $save_id $value $units]
    }
    db close
    set result
    
} -result [list 1 1 3.1416 ""]


tcltest::test crvariable_2  {Create variable with units} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd createVariable pi 3.1416 radians
    sqlite3 db $fname
    db eval {
        SELECT id, save_id, value, units FROM treevariables
           WHERE name = 'pi'
    } {
        set result [list $id $save_id $value $units]
    }
    db close
    set result        
} -result [list 1 1 3.1416 radians]

tcltest::test crvariable_3 {Too few parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd createVariable pi}
} -result 1

tcltest::test crvariable_4 {too many parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd createVariable pi 3.1416 radians and-stuff}
} -result 1
    
tcltest::test varexist_1  {nonexistent returns false} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd variableExists e
} -result 0
tcltest::test varexist_2  {existing returnst true} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd variableExists pi
} -result 1

tcltest::test varexist_3 {Needs a varname} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd variableExists}
} -result 1

tcltest::test varexist_4 {needs only a varname} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd variableExists pi e}
} -result 1

tcltest::test findvar_1    {No such variable error} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findVariable e}
} -result 1

tcltest::test findvar_2    {Variable with no units} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findVariable pi
} -result [dict create id 1 name pi value 3.1416 units ""]

tcltest::test findvar_3    {Variable with units} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd findVariable pi
} -result [dict create id 1 name pi value 3.1416 units radians]

tcltest::test findvar_4    {need a varname} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findVariable}
} -result 1


tcltest::test findvar_5    {too many parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd findVariable pi junk}
} -result 1

tcltest::test listvars_1  {Empty list if no vars} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]

} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listVariables
} -result [list]

tcltest::test listvars_2  {Can correctly list both unitless and united vars} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians;   #units
    $svcmd createVariable sqrt2 1.4142;        # no units.
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    $svcmd listVariables
} -result [list \
   [dict create id 1 name pi value 3.1416 units radians]    \
   [dict create id 2 name sqrt2 value 1.4142 units ""]      \
]
tcltest::test listvars_3  {too many command parameters} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    $svcmd createVariable pi 3.1416 radians
} -cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    if {[info exists result]} { unset result}
    catch {$svcmd listVariables pi}
} -result 1


tcltest::test hascontents_1 {Spectrum doesn't initially have conents} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd hasChannels raw.0
} -result 0

tcltest::test hascontents_2 {Spectrum with stored channels} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    sqlite3 db $fname
    db eval {
        INSERT INTO spectrum_contents (spectrum_id,xbin,ybin,value)
        VALUES(1, 0, 0,0)
    }
    db close
    $svcmd hasChannels raw.0
} -result 1

tcltest::test storechannels_1 {Needs channel data} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd storeChannels raw.0}
} -result 1

tcltest::test storechannels_2 {needs only channel data} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd storeChannels raw.0 [list] more}
} -result 1

tcltest::test storechannels_3 {empty data list is ok} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd storeChannels raw.0 [list]
    $svcmd hasChannels raw.0
} -result 1

tcltest::test storechannels_4 {empty list still stores a 0,0,0} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd storeChannels raw.0 [list]
    set result [list]
    sqlite3 db $fname
    db eval {
        SELECT xbin,ybin,value FROM spectrum_contents
            WHERE spectrum_id = 1 ORDER BY id ASC
    } {
        lappend result [list $xbin $ybin $value]
    }
    db close
    set result
} -result [list [list 0 0 0]]

tcltest::test storechannels_5 {store some channels good data} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd storeChannels raw.0 \
        [list [list 1 2 3] [list 1 1 1] [list 3 2 1]]
    
    set result [list]
    sqlite db $fname
     db eval {
        SELECT xbin,ybin,value FROM spectrum_contents
            WHERE spectrum_id = 1 ORDER BY id ASC
    } {
        lappend result [list $xbin $ybin $value]
    }
    db close
    set result
} -result [list [list 1 2 3] [list 1 1 1] [list 3 2 1]]

tcltest::test storechannels_6 {Store channels but 1d data} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd storeChannels raw.0 \
        [list [list 1  3] [list 1  1] [list 3  1]]
    
    set result [list]
    sqlite db $fname
     db eval {
        SELECT xbin,ybin,value FROM spectrum_contents
            WHERE spectrum_id = 1 ORDER BY id ASC
    } {
        lappend result [list $xbin $ybin $value]
    }
    db close
    set result
} -result [list [list 1 0 3] [list 1 0 1] [list 3 0 1]]

tcltest::test storechannels_7 {bad data in channels} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd storeChannels raw.0 \
        [list [list 1  3] [list 1  1] [list 3  1 6 5]]}
} -result 1

tcltest::test getchannels_1 {needs a spectrum name} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd getChannels}
} -result 1

tcltest::test getchannels_2 {needs only a spectrum nam} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd getChannels raw.0 junk}
} -result 1

tcltest::test getchannels_3 {must have stored channels} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    catch {$svcmd getChannels raw.0}
} -result 1

tcltest::test getchannels_4 {correctly restores saved channels} \
-setup {
    set chan [file tempfile fname]
    close $chan
    DBTcl create $fname
    set cmd [DBTcl connect $fname]
    set svcmd [$cmd createSaveset testing]
    for {set i 0} {$i < 10} {incr i} {
        $svcmd createParameter param.$i [expr {$i+1}]
        
    }

    for {set i 0} {$i < 10} {incr i} {
        $svcmd createSpectrum raw.$i 1 param.$i [list [list 0 1023 1024]]
    }     
} \
-cleanup {
    $svcmd destroy
    $cmd destroy
    file delete $fname
} \
-body {
    $svcmd storeChannels raw.0 \
        [list [list 1 2 3] [list 1 1 1] [list 3 2 1]]
    
    $svcmd getChannels raw.0
} -result [list [list 1 2 3] [list 1 1 1] [list 3 2 1]]
#############################################################################
#  End of tests - set the exit code to bad if there are failed tests and
#  report the test results to output:

proc tcltest::cleanupTestsHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTests

exit $::exitCode
