'\" t
.\"     Title: TclPlus
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 11/23/2015
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
.\"  Language: English
.\"
.TH "TCLPLUS" "3" "11/23/2015" "[FIXME: source]" "[FIXME: manual]"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
TclPlus \- C++ object encapsulation of the Tcl/Tk Api\&.
.SH "SYNOPSIS"
.sp
.nf
        g++ \-o \fIyourprogram yoursources\fR \-L${SPECTCLHOME}/lib \-ltclPlus \-lException
    
.fi
.PP
Where
\fISPECTCLHOME\fR
is an environment variable that refers to the top level of the installation directory hierarhcy for SpecTcl\&. Note this library, and the exceptions library are also provided with nscldaq, in which case
\fISPECTCLHOME\fR
can refer to the top level of the installation directory hierarchy for nscldaq
.SH "DESCRIPTION"
.PP
This library provides an object oriented encaspulation of the Tcl/Tk API, or rather of large segments of it\&. It can be used to create entire applications that extend the Tcl/Tk interpreter\&. It is also the library used within SpecTcl to access the Tcl/Tk command\&. Therefore people extending SpecTcl can use it to provide their own extensions to SpecTcl\&. The paragraphs below will provide brief descriptions of some of the key classes\&. See the manpages for those classes for more information\&.
.PP

CTCLApplication
.PP
This is a base class for complete applications that extend the Tcl/Tk interpreter\&. By appropriately subclassing it you can build your own standalong extended Tcl/Tk interpreters\&.
.PP

CTCLException
.PP
The Tcl/Tk API use return codes to indicate error conditions\&. This is error prone\&. The tclPlus library converts these return codes in to thrown exceptions of the type
CTCLException\&. To handle these exceptions properly requires use of C++ try/catch blocks\&. A code fragment example of this is provided in the
CTCLException(3) manpage\&.
.PP

CTCLInterpreter
.PP
The
CTCLInterpreter
object is at the core of the library\&. It is a wrapping of a
\fBTcl_Interp*\fR
along with member functions that access many functions that logically operate on a Tcl interpreter\&.
.PP

CTCLInterpreterObject
.PP
The
CTCLInterpreterObject
wraps objects that require an interpreter to function correctly\&. It is a base class for many of the classes in the library\&. It provides common services for those objects\&.
.PP

CTCLList
.PP
In Tcl scripting, lists play a key role in providing a structured data type\&. The
CTCLList
object can be created on a string believed to be a list, and used to split a list into its elements or merge a set of words into a list\&.
.PP

CTCLObject
.PP
Tcl has the philosophy that everything can be treated as if it were a string\&. In older versions of the interpreter, everything
\fIwas\fR
a string\&. This led to a great deal of inefficiency converting other data types to and from strings\&. The
\fBTcl_Obj\fR
type was created to reduce this inefficiency and to reduce the amount of string copying that was necessary to invoke commands\&.
.PP
A
\fBTcl_Obj\fR
is an object that stores the string representation and another representation type for a Tcl interpreter entity\&.
\fBTcl_Obj\fR
also provides for object sharing with copy on modify semantics\&. This reduces much of the string copying overhead that was previously associated with executing Tcl interpreter commands\&.
.PP
The
CTCLObject
is a wrappig of a
\fBTcl_Obj\fR
along with functions that operate on the underlying object\&.
.PP

CTCLObjectProcessor
.PP
Key to the concept of the Tcl interpreter as an application scripting language is the ability to add new commands to the interpreter that are application specific\&. The
CTCLObjectProcessor
class is an abstract base class that, when subclassed and instantiated adds new commands to the interpreter\&.
.PP

CTCLVariable
.PP
The
CTCLVariable
class provides access to Tcl script variables\&.
.SH "SEE ALSO"
.PP
CTCLApplication(3), CTCLChannel(3), CTCLCommandPackage(3), CTCLCompatibilityProcessor(3), CTCLException(3), CTCLFileHandler(3), CTCLHashTable(3), CTCLHashTableItem(3), CTCLHashTableIterator(3), CTCLIdleProcess(3), CTCLInterpreter(3), CTCLInterpreterObject(3), CTCLList(3), CTCLObject(3), CTCLObjectProcessor(3), CTCLPackagedCommand(3), CTCLProcessor(3), CTCLResult(3), CTCLString(3), CTCLTimer(3), CTCLVariable(3)
