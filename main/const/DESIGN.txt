This directory supports a plugin that defines compiled psuedo parameters.
The pseudo parameter have a constant value if a specific set of parameters
is present in an event.  This is useful for strip chart histograms of rates.

Command Added:

const [-and]  outputParam outValue [list inputParamNames]

-and requires all parameters to be present, the default is that any parameter
of the list can be present.  outParam is the name of the new pseudo parameter
(must not yet exist), outValue is a value to assign to the psuedo this can be
any value that decodes as a float e.g. 1, 3.14159 1e6 etc.

const -delete outParam 



Removes an existing param outParam from the list of parameters created.

This is all handled within a single event processor.  CConstProcessor
which is a self registering singleton. Each time a new const parameter
is created, the event processor is removed and reregistered at the end
of the list of processors.  This
 - minimizes the set of event processors needed to run this (only 1).
 - ensures the singleton event processor is far enough down the chain of 
   that no needed parameter will be set after the const processor runs.

The file CConstCommand.cpp is responsible for executing the commands above.
CConstData provides the data used to drive this.  It is also a singleton.
I envision the following in CConstData:


struct ParameterDefinition {
    int           s_outParameterId
    double        s_outValue
    vector<int>   s_inParameters
}
vector<ParameterDefinition> andParameters
vector<ParameterDefinition> orParameters

typedef vector<ParameterDefinition>::iterator ParameterIterator

map<string, ParameterIterator> parameterDictionary


Methods:

addAndParameter(string name, double value, vector<string> parameters)
addOrParameter(string name, double value, vector<string> parameters)
removeParameter(name)
getInstance()
orBegin()
orEnd()
andBegin()
andEnd()



These throw strings on error (output parameter exists, input parameter
output parameter is not defined as a const).


The event processor will getInstance() the CConstData and iterate through the
two lists processing the parameters.

CConstPackage - registers the package and the command which does the rest.





    

