<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"
>
<book>
   <bookinfo>
      <title>const parameter plugin</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>August 27, 2009</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
      </revhistory>
   </bookinfo>


<chapter>
    <title>Introduction and installation.</title>
    <para>
        The <application>const</application> plugin allows you to create a new
        SpecTcl parameter that has a constant value if either one of a set of
        parameters is defined or all of a set of parameters is defined in an event.
        The plugin adds the <command>const</command> command to SpecTcl, as well
        as an event processor that computes the parameters created by the
        <command>const</command> command.
    </para>
    <para>
        The const plugin facilitates the production of rate/stripchart spectra.
        Suppose you already have a parameter that represents time.  You want to
        know the rate at which you are getting at least one hit in a set of detectors.
        You can create a const parameter based on some parameter that indicates one
        of those detectors is hit (such as a timing parameter), and plot that const
        parameter against your time in a stripchart spectrum.
    </para>
    <para>
        The remainder of this chapter describges:
    </para>
    <orderedlist>
        <listitem>
            <para>
                How to obtain the <application>const</application> parameter
                plugin.
            </para>
        </listitem>
        <listitem>
            <para>
                How to install the plugin
            </para>
        </listitem>
    </orderedlist>
    <para>
        The second chapter <link linkend='chap.usage'>Using the const plugin</link>
        describes how to use the plugin and provides a reference page for the
        <command>const</command> command.
        </para>
    <section>
        <title>Obtaining the plugin.</title>
        <para>
            The plugin can be obtained from the SourceForge NSCL SpecTcl project
            site (<ulink url='http://www.sourceforge.net/projects/nsclspectcl'>http://www.sourceforge.net/projects/nsclspectcl</ulink>).
            As Sourceforge has been changing the appearance of the site precise
            click by click instructions are not possible.  What can be said is that
            the downloads are organized by package.  Each package has a set of
            releases, and each release has a set of files.  All plugins are
            in the plugins package.  Go to the latest release and download the
            file with a name that begins <filename>constparam</filename>.
            The filename will be of the form <filename>constparam</filename><replaceable>-a.b-nnn</replaceable><filename>.tar.gz</filename>.
            Where <replaceable>a.b-nnn</replaceable> will be the plug in version number.
        </para>
    </section>
    <section>
        <title>Installing the plugin</title>
        <para>
            We will assume that you have downloaded a tarball named
            <filename>constparam-1.0-001.tar.gz</filename> in the sample commands
            below.  Substitute the actual name of the tarball where appropriate
            in the example commands.
        </para>
        <para>
            Unwrap the tarball into a new directory:
        </para>
        <informalexample>
            <programlisting>
tar xzf constparam-1.0-001.tar.gz
            </programlisting>
        </informalexample>
        <para>
            This should create a new directory tree under your current working
            director named <filename>constparam-1.0-001</filename>.
            enter that directory
        </para>
        <informalexample>
            <programlisting>
cd constparam-1.0-001
            </programlisting>
        </informalexample>
        <para>
            Plugin installation follows the 'usual' GNU software approach of
            running a configuration script and then using the Unix
            <command>make</command> command to build and install the
            software.
        </para>
        <para>
            The plugin configuration will need to know several things.  These
            can be provided via a set of command line switches to the
            <command>configure</command> script, defaulted or, in some cases
            searched for by the script:
        </para>
        <variablelist>
            <varlistentry>
                <term><option>--prefix</option>=<replaceable>path</replaceable></term>
                <listitem>
                    <para>
                        Describes the top level directory in which the plugin
                        should be installed.   The actual plugin files will be
                        installed in the <filename>TclLibs</filename> directory
                        within that <parameter>path</parameter>.
                    </para>
                    <para>
                        Normally plugins are installed in the installation
                        directory tree of a specific SpecTcl installation.
                        For example at the NSCL, for SpecTcl 3.3,
                        <parameter>path</parameter> is
                        <filename>/usr/opt/spectcl/3.3</filename>.
                        see the <option>--with-spectcl-home</option>
                        switch below, however.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--with-spectcl-home</option>=<replaceable>path</replaceable></term>
                <listitem>
                    <para>
                        Provides the top leve of the SpecTcl installation directory.
                        This must be where a specific version of SpecTcl is installed.
                        If not provided, this defaults to the value of the
                        <option>--prefix</option> option.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--with-tcl-header-dir</option>=<replaceable>path</replaceable></term>
                <listitem>
                    <para>
                        In most cases, the configuration script is able to locate
                        the Tcl C API headers.  If, however this search fails,
                        you can explicitly point the configuration at the
                        directory that contains <filename>tcl.h</filename> by
                        using the <option>--with-tcl-header-dir</option>
                        switch.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            The <command>configure</command> script provides quite a few additional.
            switches and listens to several environment variables.  To get a
            listing of these invoke the script with the <option>--help</option>
            switch.
        </para>
        <para>
            The sample line below configures the plugin to be installed in the
            <filename>TclLibs</filename> directory tree of SpecTcl-3.2 at the
            NSCL:
        </para>
        <informalexample>
            <programlisting>
./configure --prefix=/usr/opt/spectcl/3.2
            </programlisting>
        </informalexample>
        <para>
            Once configured, you use <command>make</command> to build and
            install the software:
        </para>
        <informalexample>
            <programlisting>
make install
            </programlisting>
        </informalexample>
        <para>
            The example below pulls all of this together to show a
            typical installation command set.
        </para>
        <example>
            <title>Installation example</title>
            <programlisting>
tar xzf constparam-1.0-001.tar.gz
cd constparam
./configure --prefix=/usr/opt/spectcl/3.2
make install
            </programlisting>
        </example>
    </section>
</chapter>
<chapter id='chap.usage'>
    <title>Using the const plugin</title>
    <para>
        This chapter describes how to use the const plugin within your tailored
        SpecTcl.  We will assume that you've installed the plugin in the
        SpecTcl installation directory tree, however it should be clear how
        to modify these instructions if you've installed the plugin elsewhere.
    </para>
    <para>
        This chapter specifically contains:
    </para>
    <orderedlist>
        <listitem>
            <para>Instructions for loading the plugin into a running SpecTcl</para>
        </listitem>
        <listitem>
            <para>Instructions for createing and deleting const parameters.
            </para>
        </listitem>
        <listitem>
            <para>Reference information for the <command>const</command> command
            created by the plugin.
            </para>
        </listitem>
    </orderedlist>
    <section>
        <title>Loading the plugin</title>
        <para>
            SpecTcl plugins look like Tcl loadable packages to SpecTcl.
            To load a plugin you therefore must ensure that the
            directory tree containing the plugin is part of the Tcl
            <varname>auto_path</varname> search list global variable.
        </para>
        <para>
            Again, assuming you are using SpecTcl 3.2, as installed at
            the NSCL, you can do this by adding the following line to your
            <filename>SpecTclRC.tcl</filename> intialization file:
        </para>
        <informalexample>
            <programlisting>
lappend auto_path /usr/opt/spectcl/3.2/TclLibs
            </programlisting>
        </informalexample>
        <para>
            The Tcl <command>package</command> command can then be used to
            load the plugin by name.  Once more the command below can be
             added to your <filename>SpecTclRC.tcl</filename> initialization
             script:
        </para>
        <informalexample>
            <programlisting>
package require constparam
            </programlisting>
        </informalexample>
        <para>
            You can verify interactively that the package loaded successfully
            by asking Tcl if it knows about the const command.
        </para>
        <informalexample>
            <programlisting>
info commands const
            </programlisting>
        </informalexample>
        <para>
            If the package loaded successfully, you Tcl will echo back
            <literal>const</literal>.  If not, Tcl will echo back an empty
            result.  If the load has failed, try loading the package interactively
            and see if the error messages issued help you figure out what went
            wrong.
        </para>
    </section>
    <section>
        <title>Using the plugin</title>
        <para>
            The plugin add the <command>const</command> command to SpecTcl.
            You can use this command to create and delete parameters managed
            by the plugin.  Parameters created by the <command>const</command>
            command are just like any other SpecTcl parameter, gates can depend
            on them, Spectra can be made from them, psuedo parameters can
            bge defined that depend on them and so on.
        </para>
        <para>
            However, in order to ensure that all parameters required by a
            const parameter have been defined or not when the const parameters
            are computed, each time you define a const parameter, the event
            processor responsible for computing all const parameters is shifted
            to the end of the event processor pipeline.
        </para>
        <para>
            Const parameters depend on a list of existing parameters.
            There are two types of const parameters.  The default type
            is an <literal>or</literal> parameter.  It is defined if
            any of the parameters it depends on has been given a value in
            that event.  You can also define an <literal>and</literal> parameter
            which is only defined if <emphasis>all</emphasis> of the parameters
            it depends on have been given a value.
            </para>
        <para>
            The commands below define first an or and then an and parameter:
        </para>
        <informalexample>
            <programlisting>
const anorparameter 1 [list p1 p2 p3 p4]
const -and anandparameter 1 [list p5 p6 p7]
            </programlisting>
        </informalexample>
        <para>
            As you can see, the only difference between the form of the two
            commands is the presence of the <option>-and</option> option
            on the second, and parameter definition.
        </para>
        <para>
            The command line parameters are:
            <orderedlist>
                <listitem>
                    <para>The name of the parameter to be created</para>
                </listitem>
                <listitem>
                    <para>
                        The value to be assigned the new parameter if it should
                        be defined.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The list of parameters the new parameter depends on.
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <para>
            While the SpecTcl <command>parameter -delete</command> command
            can be used to delete the definition of a const parameter,
            the event processor that computes these parameters will not be aware
            of that fact.  You should therefore always delete (if necessary)
            const parameters via the <command>const</command> command.
        </para>
        <para>
            The sample below deletes the and parameter we created:
        </para>
        <informalexample>
            <programlisting>
const -delete anandparameter
            </programlisting>
        </informalexample>
        
    </section>
    <section>
        <title>The <command>const</command> command reference</title>
<refentry id="manpage.const">
  <refmeta>
     <refentrytitle>const</refentrytitle>
     <manvolnum>1spectcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>const</refname>
     <refpurpose>Create/Delete const parameters</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
const ?-and? outparam outvalue list-of-input-parameters    
    </command>
    </cmdsynopsis>
<cmdsynopsis>
    <command>
const -delete outparam
    </command>
</cmdsynopsis>

  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
    The <command>const</command> command is added to the set of SpecTcl commands
    by loading the const plugin.  It allows you to create or delete constant
    parameters.  A constant parameter is one that is conditionally assigned
    a constant value depending on the presence or absence of previously define
    SpecTcl parameters.
     </para>
     <para>
        Two types of constant paramters can be defined.  <literal>Or</literal>
        parameters are defined if at least one of the parameters they depend
        on were given values.  <literal>And</literal> parameters are only defined
        if all of the parameters they depend on have been assigned values.
     </para>
     <para>
        The first form of the command in the SYNOPSIS section creates a new
        parameter.  If the <option>-and</option> option is present, an
        <literal>And</literal> parameter is created as described in the
        previous paragraph.  The new parameter will be named
        <parameter>outparam</parameter>.  When defined it will be given the
        value <parameter>outvalue</parameter> which must evaluate to a
        floating point constant. <parameter>list-of-input-parameters</parameter>
        is a properly formatted Tcl list of existing SpecTcl parameter names
        that provide the parameters required to define the
        <parameter>outparam</parameter> for each event.  You can use the
        Tcl <command>list</command> command to generate this list.
     </para>
     <para>
        The second form of the parameter deletes the constant parameter
        named <parameter>outparam</parameter>.  No action will be taken, and an
        error will be emitted if <parameter>outparam</parameter> is not
        a constant parameter (created by <parameter>const</parameter>).
     </para>
  </refsect1>
  <refsect1>
     <title>
    OPTIONS
     </title>
     <variablelist>
    <varlistentry>
        <term><option>-and</option> </term>
        <listitem>
        <para>
            Used when creating a new constant parameter to require that all
            the parameters in the <parameter>list-of-input-parameters</parameter>
            must be given a value in order to give a value to the output
            parameter.
        </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term><option>-delete</option></term>
        <listitem>
            <para>
                Used after the <command>const</command> command to indicate the
                command is deleting the <parameter>outparam</parameter>
            </para>
        </listitem>
    </varlistentry>
     </variablelist>
  </refsect1>
  <refsect1>
     <title>EXAMPLES</title>
     <example>
        <title>Creating or and and parameters</title>
        <programlisting>
const anorparameter 1 [list p1 p2 p3 p4]
const -and anandparameter 1 [list p5 p6 p7]        </programlisting>
     </example>
     <example>
        <title>Deleting an existing const parameter</title>
        <programlisting>
const -delete anorparameter
        </programlisting>
        </example>

  </refsect1>

</refentry>
      
    </section>
</chapter>
</book>
