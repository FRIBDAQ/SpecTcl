<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"
>
<book>
   <bookinfo>
      <title>The MapValues plugin</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>October 3, 2008</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
      </revhistory>
   </bookinfo>
   
   <!-- Introductory material (chapter 1).  -->
   
   <chapter>
      <title>Introduction</title>
        <para>
            This document describes the <application>MapValues</application>
            SpecTcl plugin.  The plugin allows you to create mappings from one
            set of parameter values to another that are executed at compiled
            speed.
        </para>
        <para>
            One sample use case might be a strip detector.  Suppose that you
            want to create a position parameter.  This could be generated
            from the strip number of the strip with the highest conversion
            value.  On looking at the manual for the cable, you discover, however
            that the cable pins don't provide the strips in order, and that
            you'll have to unscramble them to get a strip number, which can
            then be converted into a position.
        </para>
        <para>
            You could code this as a table lookup from strip position to
            final geometric position, or you could just generate the position
            parameter fromthe cable pin number using the MapValues plugin.
        </para>
        <para>
            The remainder of this document is organized as follows:
        </para>
        <itemizedlist>
            <listitem>
               <para>
                  The next chapter describes how to get and install the plugin.
               </para>
            </listitem>
            <listitem>
               <para>
                  Chapter 3 describes how to load and use the plugin.
               </para>
            </listitem>
            <listitem>
               <para>
                  Chapter 4 provides a command reference for the plugin.
               </para>
            </listitem>
        </itemizedlist>
         <para>
            In the sample dialogs with the computer, computer output
            is shown in <computeroutput>this font</computeroutput> while
            user input <userinput>looks like this</userinput>.
         </para>
   </chapter>
    <chapter>
        <title>Obtaining and installing the plugin</title>
        <para>
         The plugin is available from
         <ulink url="http://www.sourceforge.net/projects/nsclspectcl">http://www.sourceforge.net/projects/nsclspectcl</ulink>
         To download click "Download" at the top of the page.  Selecdt the mapvalues tarball and
         download it.
        </para>
        <para>
         Once downloaded, the tarball must be unpacked and the software built.
         To unpack the software for version 1.0 e.g.:
        </para>
        <screen>
<computeroutput>$</computeroutput> <userinput>tar xzf mapvalues-1.0.tar.gz</userinput>
        </screen>
        <para>
           The tarball will create a new subdirectory that is the name of the tarball,
           without the .tar.gz.
        </para>
         <para>
            To build the software, cd to that directory, configure and make the software.
            The sample below assumes that you are installing the software to
            <filename>/usr/opt/spectcl/3.3</filename>
            to supply plugins for SpecTcl 3.3.   The actual software
            will be installed inthe <filename>TclLibs/mapvalues</filename>
            subdirectory of the specified installation direcotory.  This
            is done to allow more than one plugin to be sintalled in the same
            configured destination.
         </para>
         <screen>
<computeroutput>$</computeroutput> <userinput>cd mapvalues-1.0</userinput>
<computeroutput>$</computeroutput> <userinput>./configure --pefix=/usr/opt/spectcl/3.3</userinput>
<computeroutput> ...</computeroutput>
<computeroutput>$</computeroutput> <userinput>make install</userinput>
<computeroutput>$</computeroutput>  <userinput>make mapvalues.pdf</userinput>  #docs
         </screen>
         <para>
            If you are not installing the plugin in the same directory tree
            SpecTcl is installed in, you must specify where the SpecTcl
            location is by using the <literal>--with-spectcl-home</literal>
            option on the <command>configure</command>
            command line.
         </para>
         <para>
            The <literal>--help</literal> switch makes <command>configure</command>
            print a list of options and parameters it supports.
         </para>
         
    </chapter>
    <chapter id="using">
        <title>Loading and using the plugin</title>
        <para>
            The plugin is a compiled loadable Tcl package.  If it is installed
            in the SpecTcl package search path, it can be loaded via the
            <command>package require</command> command directly.
            If not, you should add the <filename>TclLibs</filename> subdirectory
            of the installation directory either to the environment variable
            <varname>TCLLIBPATH</varname> or to the Tcl list <varname>auto_path</varname>.
        </para>
        <para>
            Once the installation is in the path, you can load the plugin via
            the command:
        </para>
        <screen>
<computeroutput>% </computeroutput> <userinput>package require MapValues</userinput>
<computeroutput>1.0
% </computeroutput>
        </screen>
         <para>
            Once the plugin has been installed, it can be used to create new
            parameters from old parameters.  See
            <link linkend="mapvalue">Value  map plugin command reference</link>
            for a complete description of the command added by the plugin.
         </para>
         <para>
            In this chapter we'll content ourselves with presenting some examples.
            
         </para>
         <para>
            The first example shows how to reverse the strips of a 32 strip silicon strip detector.
            and create a spectrum from that new parameter.
            For the sake of this example, the raw strip number will be the parameter
            named
            <literal>dsssd1.stripnumber</literal>.  The resulting parameter will be
            named <literal>dsssd1.position</literal>.
         </para>
         <example>
            <title>
               Reversing strip numbers for 32 strips.
            </title>
            <programlisting>
package require MapValues
# Produce the mapping list

for {set i 0} {$i &lt; 32} {incr i} {
   set mappedValue [expr 31-$i]
   lappend mapping [list $i $mappedValue]
}
# Create the new parameter and spectrum from it:

mapvalue dsssd1.stripnumber dsssd1.position $mapping
spectrum dsssd1.position 1 dsssd1.position {{0 31 32}}

            </programlisting>
         </example>
         <para>
            The second (and last) example is an extension of the first.  It assumes
            the detector strips are 2mm wide and produces an actual position parameter.
            Note that in this case the parameter was defined in advance so that
            units could be associated with it.
         </para>
         <example>
            <title>Mapping strip numbers to positions.</title>
            <programlisting>
package require MapValues

set stripSpacing 2.0;      # mm between strips.
for {set i 0} {$i &lt; 32} {incr i} {
   set mappedValue [expr (31-$i)*$stripSpacing]
   lappend mapping [list $i $mappedValue]
}
# Create the new parameter and spectrum from it:

set low 0.0
set high [expr 31.0*$stripSpacing]
treeparameter create dsssd1.position $low $high mm
mapvalue dsssd1.stripnumber dsssd1.position $mapping
spectrum dsssd1.position 1 dsssd1.position "{[list $low $high 32]}"

            </programlisting>
         </example>
    </chapter>
    <chapter>
        <title>Value map plugin command reference</title>
 <refentry id="mapvalue">
   <refmeta>
      <refentrytitle>mapvalue</refentrytitle>
      <manvolnum>1SpecTcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>mapvalue</refname>
      <refpurpose>Create new parameters via simple maps of existing parameters</refpurpose>
   </refnamediv>
   
   <refsynopsisdiv>
     <cmdsynopsis>
 	<command>
package require MapValues 	
 	</command>
     </cmdsynopsis>
     <cmdsynopsis>
    <command>
mapvalue inParam outParam mappingList
    </command>
</cmdsynopsis>

   </refsynopsisdiv>
   <refsect1>
      <title>DESCRIPTION</title>
      <para>
 	This command creates and installs an event processor that computes
        <parameter>outParam</parameter> from <parameter>inParam</parameter>
         on an event by event basis by applying a simple table driven transformation.
         <parameter>mappingList</parameter> specifies this transformation.
         Once this new parameter is defined, it can be treated just like any
         other SpecTcl parameter (histogrammed, have gates set on it etc.).
      </para>
      <para>
         The new parameter <parameter>inParam</parameter> is created if
         not yet defined to SpecTcl, by assigning an unused parameter slot.
         If the parameter already exists, it will be used as defined.
         Later plugins can locate this parameter via the SpecTcl API.
         (This implies that a mapping of a parameter defined by a
         <command>mapvalue</command> command can in turn also be the input
         parameter of a new <command>mapvalue</command> command.
      </para>
      <para>
         The mapping is a discrete, lookup-based mapping defined by
         the <parameter>mappingList</parameter> parameter.
         As the name implies, this is a Tcl list.  Each list element is
         a two element sublist.  The first sublist element is a value of
         the input parameter.  The second sublist element, is the resulting
         value of the output parameter.  The input value must be an integer.
         The output value is interpreted as a floating point value.
      </para>
   </refsect1>
   <refsect1>
      <title>EXAMPLES</title>
      <para>
         Examples are given in the chapter
         <link linkend="using">Loading and Using the Plugin</link>.
      </para>
   </refsect1>

 </refentry>
    </chapter>
   </book>
   
   
