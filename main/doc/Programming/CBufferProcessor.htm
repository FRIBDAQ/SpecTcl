Content-type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of Buffer analysis framework library</TITLE>
</HEAD><BODY>
<H1>Buffer analysis framework library</H1>
Section: NSCL Data Analysis packages (3)<BR>Updated: 0.1<BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>

<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

CBufferProcessor - A callback based buffer processor for ad-hoc data analysis.
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>


<DL COMPACT><DT><DD>
<PRE>

        /* Include.. */

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferProcessor.h">CBufferProcessor.h</A>&gt;

        /* To get: */

class CBufferProcessor
{

public:
  CBufferProcessor();
  virtual ~CBufferProcessor();
 

  bool          scalersSeen() const;
  unsigned int  scalerCount() const;
  unsigned long lastIncrement(unsigned int channel) const;
  float         Total(unsigned int channel) const;
  unsigned long lastIntervalStart() const;
  unsigned long lastIntervalEnd() const;
  std::string   Title() const;
  int           runNumber() const;
  std::string   runStartTime() const;
  std::string   runEndTime() const;

  void addCallback(unsigned int nBufferType, CBufferCallback&amp; callback);
  void removeCallback(unsigned int nBufferType, CBufferCallback&amp; callback);

  virtual void operator()(const void* pBuffer);

  static BufferTranslator*
                 getTranslatingPointer(const void* pBuffer);

};

        /* Somewhere in your code you need: */

void* gpTCLApplication;

        /* Link something like: */

  c++ -o yourprogram yourprogram.c -I$SpecTclHome/include  -L$SpecTclHome/lib \
        -lAnalysis -ltclPlus -lException -lBufferAnalysis



</PRE>

</DL>

<P>

<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<P>

<BR>&nbsp;This&nbsp;class&nbsp;provides&nbsp;a&nbsp;callback&nbsp;based&nbsp;framework&nbsp;for&nbsp;analyzing&nbsp;files&nbsp;containing
NSCL formatted event data.  The idea is that the user will create and register
zero or more callback objects (See <B><A HREF="/cgi-bin/man/man2html?3+CBufferCallback">CBufferCallback</A>(3)</B>).  The data buffers
in the event file will then be pushed throug the buffer processor's function
call operator.  For each buffer, the processor will decode the buffer type and
dispatch to the function call operators of the set of buffer callbacks that
were registered for that type.
<P>

The processor registers a set of standard callbacks.  These standard callbacks,
invoked prior to any user defined callbacks, process state transition buffers
and scaler buffers to support the other member functions in the buffer
processing class.
<P>

If you are more comfortable programming in C than C++, see the
<B><A HREF="/cgi-bin/man/man2html?3+BufferAnalysis">BufferAnalysis</A>(3)</B> man page for a C interface to the framework.
<A NAME="lbAE">&nbsp;</A>
<H2>PUBLIC INTERFACE</H2>

<DL COMPACT>
<DT><B>bool scalersSeen() const</B><DD>
This member function will return <I>true</I> if the run has already processed at
least one scaler buffer.
<DT><B>unsigned int  scalerCount() const</B><DD>
This member function will return the number of scalers that are being read out
in the current run.  If <B>scalersSeen()</B> would not return <I>true</I>, a
string exception will be thrown: ``No scaler buffers seen so I don't know how
many scalers there are''.
<DT><B>unsigned long lastIncrement(unsigned int </B><I>channel</I><B>) const</B><DD>
Returns the most recent scaler increments read from channel number
<I>channel</I>.  If <B>scalersSeen()</B> is <I>false</I>, this will throw the same
string exception as <B>scalerCount()</B>.  If the channel number does not select
a valid scaler channel, the string exception will be: ``Channel number out of
range''.
<DT><B>float Total(unsigned int </B><I>channel</I><B>) const</B><DD>
Returns the current totals for the selected <I>channel</I>.  If no scalers have
been seen, the same string exception as is thrown by <B>scalerCount()</B> will
be thrown.  If the channel selected is not valid, a string exception ``Invalid
channel to fetch totals'' will be thrown.
<DT><B>unsigned long lastIntervalStart() const</B><DD>
Returns the number of seconds of elapsed active running until the start of the
most recent scaler readout interval.  If scalers have not yet been processed
for this run, the string exception ``Scalers have not yet been seen, scaler
start interval invalid'' is thrown.
<DT><B>unsigned long lastIntervalEnd() const</B><DD>
Same as <B>lastIntervalStat()</B>, however the elapsed times returned are those
until the end of the most recent scaler read interval.
<DT><B> std::string   Title() const</B><DD>
Retrurns a string that contains the title of the current run.  If no buffers
with titles have been seen (note the start of run has a title), this will be an
empty string.  
<DT><B>int           runNumber() const</B><DD>
returns the number of the run currently being processed.  This will be -1 if no
run has ever been processed.
<DT><B>std::string   runStartTime() const</B><DD>
Returns the time at which this run started.  This will be a string of the form:
``Month day,year, hh:mm:ss'', for example ``February 18, 2005, 13:11:15''.
<DT><B> std::string   runEndTime() const</B><DD>
Once the run has been completely processed, this will return the time the run
ended as a timestamp string.  The form of the timestamp will be identical to
that returned by <B>runStartTime()</B>.   Prior to the end of run, this will
return an empty string.
<DT><B>void addCallback(unsigned int nBufferType, CBufferCallback&amp; callback)</B><DD>
Adds a callback to the processor.  <I>nBufferType</I> is the type of buffer for
which the callback's function call operator should be invoked. <I>callback</I>
is a reference to an object that is derived from the class
<B>CBufferCallback</B> (see <B><A HREF="/cgi-bin/man/man2html?3+CBufferCallback">CBufferCallback</A>(3)</B>).  Callbacks form an
ordered list for each buffer type.  A callback object can be registered on more
than one buffer type, however a callback object should be registered at most
once for a specific buffer type.
<DT><B> void removeCallback(unsigned int nBufferType, CBufferCallback&amp; callback)</B><DD>
Removes a previously registerd callback from the buffer
processor. <I>nBufferType</I> is the type of buffer on which this callback was
registered. <I>callback</I> is a reference to the callback object that was
registered.    This member can throw string exceptions: If the buffer type does
not yet have any callback list created, the string exception will read:
``Buffer type has no callback lists''.  If the buffer type has a callback
list, but the specified object is not registered in it, the exception will
contain: ``No such callback in list''.
<DT><B>virtual void operator()(const void* </B><I>pBuffer</I><B>)</B><DD>
Call this member to process a data buffer.   The buffer processor will decode
the buffer type and dispatch to any registered callbacks for that buffer type.
Callbacks will be called in the order in which they were registered.
<DT><B> static BufferTranslator* getTranslatingPointer(const void* pBuffer)</B><DD>
This static member function can be called to create a buffer translator object
appropriate to this buffer.  Buffer translators are used to instantiate
TranslatorBufferPointer objects, which provide a pointer like interface to
storage that does transparent byte swapping as required.  <B>NOTE</B>  the
pointer returned is dynamically allocated wth <B>new</B> and must be freed by
the caller via <B>delete</B>.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>EXAMPLE</H2>

<P>

Much of the error handling require for production software is omitted for this
example for the sake of brevity.
<P>

The example registers a callback object on all buffer types from 0 through
MAXBUFTYPE.  It counts the number of buffers of each type and, and the end of
the data file, prints out the histogram of buffer types with zeroes supressed.

<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferCallback.h">CBufferCallback.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferProcessor.h">CBufferProcessor.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/buftypes.h">buftypes.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/sys/types.h">sys/types.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/sys/stat.h">sys/stat.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/fcntl.h">fcntl.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/string.h">string.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/iostream">iostream</A>&gt;

#ifdef HAVE_STD_NAMESPACE
using namespace std;
#endif

class HistogramCallback : public CBufferCallback
{
private:
  int histogram[MAXBUFTYPE];
public:
  void clear() {
    memset(histogram, 0, sizeof(histogram));
  }
  void dump(ostream&amp; output) {
    for(int i=0; i &lt; MAXBUFTYPE; i++) {
      if(histogram[i] != 0) {
        output &lt;&lt; histogram[i] &lt;&lt; &quot; instances of buffer type: &quot; &lt;&lt; i &lt;&lt; endl;
      }
    }
  }
  virtual void operator()(unsigned int ntype, const void* pBuffer) {
    histogram[ntype]++;
  }
};

int main(int argc, char** argv)
{
  unsigned short buffer[4096];
  int fd = open(argv[1], O_RDONLY);
  int nread;
  CBufferProcessor processor;
  HistogramCallback callback;

  for(int i=0; i &lt; MAXBUFTYPE; i++) {
    processor.addCallback(i, callback);
  }

  callback.clear();
  
  while((nread = read(fd, buffer, sizeof(buffer))) &gt; 0) {
    processor(buffer);
  }
  
  cout &lt;&lt; &quot;File : &quot; &lt;&lt; argv[1] &lt;&lt; &quot; run &quot; &lt;&lt; processor.runNumber()
       &lt;&lt; &quot; &quot; &lt;&lt; processor.Title() &lt;&lt; endl;
  cout &lt;&lt; &quot;Run started: &quot; &lt;&lt; processor.runStartTime();
  cout &lt;&lt; &quot; Run ended: &quot; &lt;&lt; processor.runEndTime() &lt;&lt; endl;
  cout &lt;&lt; &quot;Buffer type distribution: ;

  callback.dump(cout);
}

void* gpTCLApplication;


</PRE>

</DL>

<P>

<A NAME="lbAG">&nbsp;</A>
<H2>SEE ALSO</H2>

<A HREF="/cgi-bin/man/man2html?3+BufferAnalysis">BufferAnalysis</A>(3), <A HREF="/cgi-bin/man/man2html?3+CBufferCallback">CBufferCallback</A>(3)

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">PUBLIC INTERFACE</A><DD>
<DT><A HREF="#lbAF">EXAMPLE</A><DD>
<DT><A HREF="#lbAG">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 18:37:14 GMT, February 18, 2005
</BODY>
</HTML>
