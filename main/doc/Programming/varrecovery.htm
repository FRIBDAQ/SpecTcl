<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Accessing run tate and run variable data from NSCL buffers in SpecTcl</title>
  </head>

  <body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img
        src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>Recovering run state and run variable data</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>
<p>This page describes how to recover run state and run variable data produced
      by the production readout software.  Run state and run variables are TCL
      variables.  Within production readout, run state variables are write
      locked while a run is in progress.  Run variables, by contrast may
      change.
<p>The software described on this page analyzes the NSCL data buffers created
      by the production readout software, recreating the run state and run
      variables.
<p>The remainder of this document:
<UL>
      <li> Describes how to 
	<a href="#how">enable runstate and runvariable processing</a></li>
      <li> <a href="#services">Describes the programmatic services that make runstate and
      runvariable data available to C/C++ user written software you have
      integrated with SpecTcl</a>.  Note that user written TCL Scripts can just
      directly reference run state and run variables, as they are converted to
      ordinary TCL variables.</li>
</UL>
<H2><a name="how">Enabling Run State and run variable processing</a></H2>
<P>The run state and run variable processing is implemented as  callbacks
      within the NSCL buffer processing framework used by the scaler buffer
      processing software.  The simplest way to enable run statne and run
      variable processing is to:
<OL>
      <LI><A HREF="scalerinfo.htm">Enable scaler buffer processing</A></LI>
      <LI>Add to that run state and run variable processing</LI>
</OL>
<P>
To add runstate and run variable processing to scaler buffer processing you
      must make modifications to your  MySpecTclApp.cpp file that:
<OL>
      <LI>Include header files that define the Documentation callback</LI>
      <LI>Register this callback to be invoked when the analysis framework
	  encounters runvariable and run state buffers </LI>
</OL>
<H3>Including header files that define the documentation callback</H3>
<P>
The code fragment below shows additional header files that must be included
in your MySpecTclApp.cpp file:
<PRE>
#include &lt;buftypes.h&gt;
#include &lt;Globals.h&gt;
#include &lt;DocumentationCallback.h&gt;
</PRE>
<P>
<EM>Globals.h</EM> enables you to locate the TCL interpreter used by SpecTcl.
    <EM>DocumentationCallback.h</EM> defines the callbackthat decodes the
    documentation buffers containing runstate and run variables.
<H3>Adding documentation callbacks</H3>
<P>The code fragment below taken from CMySpecTclApp::CreateAnalysisPipline
    shows how to add the documentation buffer processing callback to the scaler
    analysis framework.
<PRE>
    CDocumentationCallback* pDocCallback = new CDocumentationCallback(gpInterpreter);
    CBufferProcessor* pProcessor = ScalerStage.getProcessor();
    pProcessor->addCallback(STATEVARBF, *pDocCallback);
    pProcessor->addCallback(RUNVARBF, *pDocCallback);

    RegisterEventProcessor(ScalerStage);    // Pre-existing for scaler analysis.
</PRE>
<P>  The first line creates a documentation callback object. This object will
      actually analyze the buffers.  Next the scaler event processor is asked
      to give its Buffer processing object (see <A
      href="CBufferProcessor.htm">the buffer processor man page</a> for more
      information about this).  Finally,the documentation callback is
      registered to process both STATEVARBF (run state variable), and RUNVARBF
      (run variable) buffers before the scaler event processor is registered on
      the analysis pipeline.
</p>
<a href="#top">Top</a>
<H2><a name="services">Services offered to C/C++ software</a></H2>
<P> If you maintain a pointer to the CDocumentationCallback object you created,
      you can access the services of this object from within your own C++
      application specific code.  The member functions below are available for
      your use:
<PRE>
class CDocumentationCallback {
public:
  std::string getValue(std::string name) const;
  std::string getElementValue(std::string name, std::string element) const;
  void addChangeHandler(std::string name, CVariableTraceCallback& callback);
  void removeChangeHandler(std::string name, CVariableTraceCallback& callback);

};
</PRE>
<P>
<UL>
    <LI><em>getValue</em> Returns as a string the value of a TCL variable.  If you want
      to return an array element, use TCL array element access syntax,
      (e.g. myarray(element)).   If the variable does not exist, this call will
      throw a CDocumentationException.  This exception is a subclass of
      CException and so a catch of CException& will catch this.</LI>
    <LI><em>getElementValue</em>Is similar to <em>getValue</em>, however it is
      buit to make retrieving array element values simpler.  The <em>name</em>
      parametsr is the name of an array, and <em>element</em> is the name of
      the element from within the array whose value you want to retrieve.  The
      function also throws a CDocumentationException in the event the array
      element is not defined.</LI>
    <LI><em>addChangeHandler</em>Allows you to add a variable traceback object
      (see <a href="CVariableTraceCallback">the CVariableTraceCallback</a>
      manpage for more information) to the specified variable. <em>name</em> is
      the name of the variable to trace.  If you want to trace an entire array,
      provide the name of the array.  To trace an element of an array, provide
      the full element name (e.g. myarray(element)).  The trace callback will
      only be called when the variable is modified.
    <LI><em>removeChangeHandler</em>Allows you to remove a previously
      established change handler from the variable, array or array element
      specified by <em>name</em>.  If the specified callback has note been
      registered on <em>name</em> then a CDocumentationException is thrown.

</P>
<a href="#top">Top</a>
    <hr>
<p>Last modified: Fri Feb 25, 2005 by Ron Fox:
<a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a><br>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>
  </body>
</html>
