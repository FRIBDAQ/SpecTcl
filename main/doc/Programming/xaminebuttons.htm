<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>SpecTcl's interface to Xamine Client Buttons.</title>
</head>

<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>SpecTcl's interface to Xamine Client Buttons.</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>

<p>
  This page provides information about Xamine client buttons. In particular:
</p>
  <ul>
    <li><a href="#what">What Xamine Client buttons are</a>
        and how they work.
    </li>
    <li>
       <a href="#api">The Xamine Client Button API</a>
    </li>
    <li>
       <a href="#processing">Procesing Xamine Button events in SpecTcl</a>
    </li>
    <li>
       <a href="#example">Example Code fragments</a>
    </li>
  </ul>
<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<a name="what" />
  
<h2>What Xamine Client buttons are</h2>

<p>
  This section describes what Xamine Client buttons are, why you might want to
  use them and how they work at a high level.  The intent is to give you the
  needed background to decide if you should create Xamine client buttons and,
  if so what it means to do so.
</p>
<p>
  Before discussing Xamine Client buttons it is important to understand what is
  meant by Xamine.  SpecTcl itself has no display component.  SpecTcl merely
  creates histograms and makes them available to a separate program, called
  Xamine, that creates histogram displays.
</p>
<p>
  Xamine and SpecTcl communicate in several ways:
  <ul>
    <li>
       SpecTcl creates spectrum definitions and spectra in a shared memory region
       so that Xamine can quickly produce updates, list spectra and so on.
    </li>
    <li>
       When a user accepts a gate, Xamine uses a messages passing interface to
       to communicate information about the new gate to SpecTcl.  SpecTcl
       processes these events and creates or modifies the gate in accordance
       with the message Xamine passed.
    </li>
    <li>
      When SpecTcl creates a new gate, it is passed to Xamine for display using
      a message passing interface.
    </li>
  </ul>
</p>
<p>
  While this division of labor allows Xamine to be a re-usable display program,
  it does have disadvantages.  In particular, SpecTcl has no way of knowing
  exactly what Xamine is displaying and no direct way to prompt the user to
  click points into a spectrum and then get those points.
</p>
<p>
  Xamine Client buttons allow you to circumvent some of these restrictions.
  Xamine Client buttons are a box of GUI buttons that are defined and displayed
  by Xamine's client (SpecTcl). The buttons are defined using the same
  message passing interface used to pass gates from SpecTcl to Xamine. When a
  button has been clicked in a valid way (we will discuss valid button clicks
  when we describe the <a href="#api">Xamine Client Button API</a>), Xamine
  uses the messages passing interface it normally uses to communicate gates
  to SpecTcl to instead communicate information about the button click.
</p>

<p>
  To understand how to use Xamine client buttons from SpecTcl you must
  therefore understand how to use the
  <a href="#api">Xamine Client Button API</a> to create the client button
  box and to install the appropriate set of buttons in the box.  You must also
  understand how to interface with SpecTcl's Xamine event processing subsystem
  to gain control when your buttons are clicked, so that you take the actions
  the buttons should initiate.
</p>
<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<a name="api" />
<h2>The Xamine Client Button API</h2>
<p>
  This section describes the Xamine Client Button API. This is the
  set of functions the Xamine interface library provides for creating
  a client button box, stocking it with buttons and manipulating those buttons.
  Since SpecTcl has an event processing subsystem for handling messages
  from Xamine (including button click messages), we will not describe the
  Xamine interfaces for waiting for, checking for, or reading these events.
  The <a href="#processing">next section</a> of this page will describe
  how to hook into SpecTcl's event processing framework so that you can
  process your button clicks.
</p>
<p>
  The functions described in this section require that your code
<pre>
#include &lt;Xamine.h&gt;
</pre>

</p>
<p>
  Xamine client buttons are a rectangular array of buttons in a top level
  button box.  Create this button box by invoking:

<pre>
int Xamine_DefineButtonBox(int ncol,int nrow);
</pre>
</p>
<p>
Where:
<table>
  <tr>
    <td valign="top">ncol</td>
    <td valign="top">Is the number of columns of buttons supported by the
      box.</td>
  </tr>
  <tr>
    <td valign="top">nrow</td>
    <td valign="top">Is the number of rows of buttons supported by the button
      box.
      </td>
  </tr>
</table>
The function returns 0 if successful or some negative integer on failure.
The failure reasons are defined in clientops.h in the SpecTcl include
directory.
</p>

<p>
  The button box defines a button coordinate system.
The coordintes are invariably given as a <em>row</em> and a
<em>column</em>.  Rows number from the top and from zero. Columns number from
the left and from zero.
</p>

<p>
  Once you have created the button box you can define new buttons and modify
existing buttons.  This is done via the two functions:

<pre>
int Xamine_DefineButton(int nrow, int ncol, void *button);
int Xamine_ModifyButton(int nrow, int ncol, void *button);
</pre>

Where:
</p>
<table>
  <tr>
    <td valign="top">nrow and ncol</td>
    <td> Are the button box coordinates to be affected by the operation.
         For Xamine_DefineButton, a new button will be created at these
         coordinates. For Xamine_ModifyButton, the button already existing at
      those coordinates will be modified.
    </td>
  </tr>
  <tr>
    <td valign="top">button</td>
    <td>Points to a button discription structure.  We will describe this
        structure and its contents in a bit.  The button created/modified is
        created/modified to match this description.
    </td>
  </tr>  
</table>

<p>
    The button parameter in the functions described above is actually a pointer
    to a ButtonDescription.  ButtonDescription is a struct hat describes a button to
    the button box.   Buttons can also have a <em>prompter</em>. A prompter is a
    dialog that pops up to gather more information when the button is clicked.  For example,
    a prompter may request the user to click some points off the spectrum, or confirm the choice.
    The prompter desired is also described in the ButtonDescription data type.
</p>
<p>
    The ButtonDescription data type is defined in clientops.h which is included by Xamine.h
    The definition looks like:

</p>
<pre>
typedef struct {                /* Describe a button. */

             int         button_code; /* Code to return on activation. */
             ButtonTitle label;       /* Text written in button        */
             ButtonType  type;        /* Type of button.               */
             Logical     state;       /* Initial toggle state          */
             Logical     sensitive;   /* Initial sensitivity state     */

                            /* Fields needed for prompters: */

             ButtonPromptType prompter; /* Additional data prompter type */
             ButtonSensitivity whenavailable; /* When button works      */
             ButtonDialogPrompt promptstr; /* Prompt string for dialog  */
             ButtonDialogSpectrumType
                               spectype; /* Type of spectra prompting for */
             Cardinal   minpts, maxpts; /* Number of desired points.   */
             } ButtonDescription;

</pre>
<p>

    While the comments in the definition above give you a good starting point to understand
    the meaning of each of these fields, each field is described in detail below as well.
</p>
<a name="ButtonDescription" />
<table border="1">
  <tr>
    <th align="center">Field</td>
    <th align="center">Data Type</td>
    <th aligne="center">Description</td>
  </tr>
  <tr>
    <td valign="top">button_code</td>
    <td valign="top">integer</td>
    <td>This is a unique code that will identify the button in the event
      received from Xamine when the button has been used. The field is intended
      to allow user button event handlers to know which button a button event
      has come from.
    </td>
  </tr>
  <tr>
    <td valign="top">label</td>
    <td valign="top">C string</td>
    <td>This null terminated string will be used to label the button.  For
      pushbuttons, the string will appear on the face of the button, for
      checkbuttons, the label will appear near the checkbutton.
    </td>
  </tr>
  <tr>
    <td valign="top">type</td>
    <td valign="top">ButtonType</td>
    <td>This is an enumerated type the describes the type of button to
      display.  Legal values for this field are:
      <ul>
	<li>Push - A push button will be created. </li>
	<li>Toggle - A toggle (or check box) button will be created </li>
      </ul>
    </td>
  </tr>
  <tr>
    <td valign="top">state</td>
    <td valign="top">Logical</td>
    <td>This field is only used for toggle button descriptions.  If
      <em>TRUE</em> the toggle button is initially shown with the
      indicator lit (on).  If <em>FALSE</em> the toggle button indicator
      is inially unlit (off).
    </td>
  </tr>
  <tr>
    <td valign="top">sensitive</td>
    <td valign="top">Logical</td>
    <td>If <em>TRUE</em> the button is initially usable. That is a user
      can click get the button to send SpecTcl a button event by clicking it
      and, if necessary, responding appropriately to the prompter associated
      with the button.  If <em>FALSE</em> the button is disabled and will not
      produce button events.  The only way to switch the state of this is to
      use Xamine_ModifyButton on a previously existing button.
    </td>
  </tr>
  <tr>
    <td valign="top">prompter</td>
    <td valign="top">ButtonPromptType</td>
    <td>Allows you to associate a prompter with the button. When the button is
      sensitive, if it is clicked and has a prompter, the associated dialog is
      displayed and the user must respond appropriately to it to cause a button
      event to be sent to SpecTcl.  Prompters allow data be associated with the
      button event.  Valid values for the <em>prompter</em> field are:
      <ul>
	<li>NoPrompt - No prompter is associated with the button</li>
	<li>Confirmation - A confirmation (yes cancel) dialog is displayed. If
	                   the user confirms, a button event is sent, otherwise
	                   no button event is sent.
	</li>
	<li>Text - The user is prompted for a text string which is passed to
	   SpecTcl with the button event.
	</li>
	<li>Points - The user is prompted for points from the current selected
	    Spectrum.  The point coordinates in spectrum coordinates are
	    returned to SpecTcl with the button event.
	</li>
	<li>Spectrum - The user is prompted for a spectrum via a spectrum
	chooser dialog.  The Xamine id of the spectrum chosen is returned to
	the caller.  The CHistogrammer::DisplayBinding() function can be used
	to obtain the Spectrum object associated with that ID note, however
	that the SpectTcl display binding id is one less than the
	Xamine Id.
	</li>
	<li>Filename - A file chooser dialog will be displayed.  The file
	selected or typed in will be passed to SpecTcl as part of the Button
	event.
	</li>
      </ul>
    </tr>
    <tr>
      <td valign="top">whenavailable</td>
      <td valign="top">ButtonSensitivity</td>
      <td>Allows Xamine to determine the button sensitivity (whether or not
	it can be clicked) depending on the current selected pane.  This can
	be one of the following values:
	<ul>
	  <li>Anytime - The button will always be sensitive</li>
	  <li>InSpectrum - The button will only be sensitive if the active pane
	  contains a spectrum</li>
	  <li>In1dSpectrum - The button will only be sensitive if the active
	  pane contains a 1d Spectrum.  Note that Xamine does not know anything
	  about the finer distinctions of 1-d spectrum types provided by
	  SpecTcl, thus this allows sensitivity for 1d, 1d gamma, stripchart
	  and all other spectra displayed with a 1-d rendition.
	  </li>
	  <li>In2dSpectrum - The button will only be sensitive if the active
	  pane contains a 2d spectrum.  Once again, Xamine knows nothing about
	  the various types of 2-d spectra SpecTcl supports.</li>
	</ul>
	If the <em>sensitive</em> field of the description is false, this field
	is ignored.  If the <em>sensitive</em> field of the description is
	true, it is modified by the value of <em>wheavailable</em>
      </td>
    </tr>
    <tr>
      <td valign="top">promptstr</td>
      <td valign="top">ButtonDialogPrompt</td>
      <td>Provides a C null terminated string that will be placed in any
	prompter dialog that can be used to help the user know what is being
	asked for and why.
      </td>
    </tr>
    <tr>
      <td valign="top">spectype</td>
      <td valign="top"ButtonDialogSpectrumType</td>
      <td>This is used for spectrum prompters to potentially restrict the set
	of legal spectrum choices.  It can be one of the following values:
	<ul>
	  <li>Any - Any type of spectrum can be selected.</li>
	  <li>Oned - Only 1-d spectra can be selected.</li>
	  <li>Twod - Only 2-d spectra can be selected.</li>
	</ul>
      </td>
    </tr>
    <tr>
      <td valign="top">minpts,<br /> maxpts</td>
      <td valign="top">Cardinal</td>
      <td>This pair of fields is only used by a points prompter and specifies
	the minimum and maximum number of points that can be accepted.
	Currently, at most 50 points can be accepted by a points prompter.
      </td>
    </tr>
</table>
<p>
 The following are a set of additional Xamine client button API functions.
</p>
<pre>
int Xamine_EnableButton(int r, int c);
int Xamine_DisableButton(int r, int c);
int Xamine_DeleteButton(int r, int c);
int Xamine_DeleteButtonBox();
int Xamine_InquireButton(int r, int c,
			 void  *ack);
</pre>
<p>
The functions <em>Xamine_EnableButton</em> and <em>Xamine_DisableButton</em>
are shortcuts for modifying the button by setting or clearing the
<em>sensitive</em> field of the descriptor. <em>r</em> and <em>c</em>
are the row and column coordinates of the button to modify.
</p>
<p>
Xamine_DeleteButton deletes a button at the button box row and column
coordinates <em>r</em> and <em>c</em>.
</p>

<p>
Xamine_DeleteButtonBox destorys the button box and all buttons it contains.
The client buttons will no longer be visible on the display.
</p>

<p>
Finally, Xamine_InquireButton requests information about the button at
button box coordinates <em>r</em> and <em>c</em>.  The <em>ack</em> parameters
must be a pointer to storage that is at least <tt>sizeof(struct
msg_InquireButtonAck)</tt>.  The data returned in this buffer will have the
form of that structure which  is:
</p>
<pre>
struct msg_InquireButtonAck {	/* Button information... */
  ButtonCoordinate  size;	/* Size of the button grid... */
  Logical           valid;	/* Indicates if button queried was valid. */
  ButtonDescription button;	/* Info about the requested button */
};
</pre>
<p>Where:</p>
<table border="1">
  <tr>
    <th align="center">Field</th>
    <th align="center">Type</th>
    <th aligne="center">Meaning</th>
  </tr>
  <tr>
    <td valign="top">size</td>
    <td valign="top">ButtonCoordinate</td>
    <td>Is a struct with the fields <em>column</em> and <em>row</em> which, in
      this case provide the number of columns and rows in the button box.
    </td>
  </tr>
  <tr>
    <td valign="top">valid</td>
    <td valign="top">Boolean</td>
    <td>Is a boolean that,when <em>TRUE</em> indicates that there is in fact a
      button a the coordinates <em>r</em> and <em>c</em>.
    </td>
  </tr>
  <tr>
    <td valign="top">button</td>
    <td valign="top">ButtonDescription</td>
    <td>Describes the button.  This field only has meaningful data if
      <em>valid</em> is true.  For information about the ButtonDescription
      type, see the discussion in the documentation of
      <a href="ButtonDescription">Xamine_DefineButton</a> function e.g.
    </td>
  </tr>
</table>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<a name="processing"><h2>Processing Xamine Button Events in SpecTcl</h2>
<p>
This section describes how to process Xamine events.  This discussion will
include
<ul>
  <li>Background information about SpecTcl's Xamine event processing</li>
  <li>A description of the SpecTcl API for hooking into button event
  processing</li>
  <li>A description of what you need to do to write code that hooks into the
  SpecTcl button event processing</li>
</ul>
</p>
<h3>Background on SpecTcl's Xamine Event processing</h3>
<p>
SpecTcl works with the Tcl event loop to ensure that the user interface remains
lively at all times, that event analysis gets scheduled, and that external
inputs get mapped to Tcl events.  In this case, Xamine's gate and messages are
external inputs that get mapped to a Tcl Event that, in turn is dispatched to
a <em>CXamineEventHandler</em> object that is held in the base class of the
class you define in <tt>MySpecTclApp.cpp</tt>.
<p>
The <em>CXamineEventHandler</em> class is described in the header
<tt>XamineEventHandler.h</tt>.  The key points I want to point out are:
<ul>
  <li>The member <tt>m_buttonHandlers</tt> which contains a list of objects derived
  from <em>CXamineEventHandler::CButtonHandler</em></li>
  <li>
    The member function <em>addButtonHandler</em> which adds a handler object
    to that list.
  </li>
</ul>
</p>
<p>
When a button event is detected, control eventually passes to the
<tt>OnButton</tt> function of the <em>CXamineEventHandler</em> object. During
the processing of a button event, the button handlers in the
<tt>m_buttonHandlers</tt> are invoked in the order in which they were
registered. Each button handler is given a chance to process the button
event. If a button handler returns <em>true</em> <tt>OnButton</tt> calls no
more button handlers.
</p>
<p>
This scheme is analagous to the event processing pipeline but, instead
is intended to allow you to set up button handlers that cooperate to handle all
possible button events.
</p>
<h3>The SpecTcl API for hooking into button events</h3>
<p>
We have already seen that the <em>CXamineEventHandler</em> object maintains
a list of button handlers which are called in response to button events.
A button handler is an object of a class that is derived from
<em>CXamineEventHandler::CButtonHandler</em>.
<em>CXamineEventHandler::CButtonHandler</em>
is an abstract base class whose definition is nested inside the definition of
<em>CXamineEventHandler</em> as follows:
<pre>
  class CButtonHandler {
  public:
    virtual Bool_t operator()(CButtonEvent& event) = 0;
  };
</pre>
</p>

<p>
The <em>event</em> parameter is a reference to the massaged button event
that is being processed.  It's header <tt>ButtonEvent.h</tt>
shows that it exports the following key member functions:
<pre>
class CButtonEvent      
{
  
public:

  Int_t getId() const;              // Get button id.
  Int_t getCurrentSpectrum() const; // Get Xamine id of selected spectrum.
  Bool_t getToggleState() const;    // Get state of toggle if toggle button.
  Int_t getPromptedSpectrum() const; // Get Xamine id of spectrum selected by user
  std::string getm_sPromptedString() const; // Get String user typed in prompter.
  const PointArray&amp; getPoints() const; // Get points picked by user

  PointIterator begin ();           // Iterator to first user picked point.
  PointIterator end ();             // Iterator for end of user picked points.
  UInt_t size () const;             // # of user picked points.
  const CPoint&amp; operator[] (UInt_t nI)  const; // Index into user picked points.
 
};

</pre>
</p>

<p>
Button handlers are registered by invoking:
<pre>
void CXamineEventHandler::addButtonHandler(CButtonHandler& handler);
</pre>

This function is not a static function and therefore requires that you are able
to obtain a pointer or reference to the <em>CXamineEventHandler</em> object.
</p>
<p>
Recall that in <tt>MySpecTclApp.cpp</tt> you define a class that is derived
from <em>CTclGrammerApp</em> adding code to member functions as needed to set
up your analysis.  The displayer is setup in the <em>SelectDisplayer</em>
member function.  Normally this looks like:
<pre>
void 
CMySpecTclApp::SelectDisplayer(UInt_t nDisplaySize, CHistogrammer& rHistogrammer)  
{ 
  CTclGrammerApp::SelectDisplayer(nDisplaySize, rHistogrammer);
}
</pre>
Where the call to the base class <em>SelectDisplayer</em> sets up both Xamine
and the Xamine event handler.  The event handler object is saved as private
member data in the base class and can be retrieved by calling the base class
function <em>getXamineEvents</em>
</p>
<p>
For Example:
</p>
<pre>
CMySpecTclApp::SelectDisplayer(UInt_t nDisplaySize, CHistogrammer& rHistogrammer)  
{ 
  CTclGrammerApp::SelectDisplayer(nDisplaySize, rHistogrammer);


  CXamineEventHandler* pEventHandler = getXamineEvents();

   // do pEventHandler->addButtonHandler calls for each handler object you want
   // to register.
   &hellip;
}

</pre>
<a name="example" />
<h3>How to tie it all together</h3>
<p>
This section ties this all together by presenting code fragments that implement
a button that accepts a pair of points on a 1-d spectrum and then performs a
gaussian fit to the data between these points using the SpecTcl <tt>fit</tt>
command.
</p>
<p>
We will start by creating a class <em>CFitButton</em> defined as follows:
<pre>
class CFitButton : public CXamineEventHandler::CButtonHandler
{
private:
  int   m_FitButtonId;		// Ids assigned to buttons.

public:
  CFitButton(CXamineEventHandler* pHandler);
  virtual ~CFitButton();
private:
  virtual Bool_t operator()(CButtonEvent&amp; event);

  std::string spectrumName(CButtonEvent&amp; event);
  void        invokeScript(std::string script);

};
</pre>
</p>
<p>
In this example, we are just going to show the implementations of the constructor
and the function call operator (<tt>operator()</tt>). The other two member functions:
<ul>
  <li>spectrumName - returns the name of the spectrum in the button event.
      It does this by interacting with the event and the Histogrammer.</li>
  <li>invokeScript - Invokes a Tcl script.</li>
</ul>

<p>
In the constructor, we must add the button to a button box that we assume
already exists, and add ourself as an event handler using the pointer
to the event handler that was passed in:

<pre>
CFitButton::CFitButton(CXamineEventHandler* pEventHandler) 
{
  // Generic Gauss fit button.


  m_FitButtonId          = 1;

  ButtonDescription myButton;
  myButton.button_code   = m_FitButtonId;
  strcpy(myButton.label, "Gauss Fit");
  myButton.type          = Push;
  myButton.sensitive     = T;
  myButton.prompter      = Points;
  myButton.whenavailable = In1dSpectrum;
  strcpy(myButton.promptstr, "Fit limits"); 
  myButton.spectype      = Oned;            // I think this is ignored for this prompter
  myButton.minpts        = 2;
  myButton.maxpts        = 2;               // need exactly 2 pts.

  Xamine_DefineButton(0,0, &myButton);

  pEventHandler->addButtonHandler(*this);
  

}
</pre>
As you can see the bulk of this code fills in the <em>ButtonDescription</em>
struct <tt>myButton</tt>.  Once filled in, the button is made at position
0,0 in the button box via the call to <tt>Xamine_DefineButton</tt>, and
finally the object itself is registered as a button handler with the
<em>CXamineEventHandler</em> object.
</p>


<p>
When a button event is triggered, we execute the following code:
<pre>
Bool_t 
CFitButton::operator()(CButtonEvent&amp; event)
{

  int buttonId = event.getId();


  if (buttonId == m_FitButtonId) {

    PointArray     pts           = event.getPoints();
    string spectrum              = spectrumName(event);

    string fitName;
    fitName       = event.getm_sPromptedString();

    // Now we can create the fit:

    char x1String[100];
    char x2String[100];

    string command = "fit ";
    command += fitName;
    command += ' ';
    command += spectrum;
    command += " ";
    
    sprintf(x1String, "%d", pts[0].X());
    sprintf(x2String, "%d", pts[1].X());

    command += x1String;
    command += ' ';
    command += x2String;
    command += " gaussian";

    invokeScript(command); 
  }
  else {
    return kfFALSE;
  }
  return kfTRUE;
}
</pre>
</p>
<p>
The main point of this code is to get the information from the
button event and build an appropriate SpecTcl <tt>fit</tt> command
which is then executed to create the fit.
</p>
<p>
The only thing that remains is to create the button box,
and create an <em>CFitButton</em> object
in <tt>MySpecTclApp.cpp</tt> once the event handler has been set up.
To do this we make <tt>SelectDisplayer</tt> look like this:
<pre>
void 
CMySpecTclApp::SelectDisplayer(UInt_t nDisplaySize, CHistogrammer& rHistogrammer)  
{ 
  CTclGrammerApp::SelectDisplayer(nDisplaySize, rHistogrammer);

  CXamineEventHandler* pEventHandler = getXamineEvents();
  Xamine_DefineButtonBox(2,2);
  new CFitButton(pEventHandler);

}
</pre>
</p>
<p>
There are a few subjects we have not touched on in this example. There's no
error detection/processing in  order to make this code as brief as
possible. Even more seriously, if Xamine exists the button box and its buttons
will not be re-established.  If you are making production button boxes, it is
important to know how to catch Xamine exits and re-create your button
boxes. See <a href="xaminerestart.htm">Writing Xamine Restart Handlers</a>
for a description of how to do this.
</p>
<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>
<hr>
<address><a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a></address>
<!-- hhmts start -->Last modified: Thu Apr  5 17:28:33 EDT 2007 <!-- hhmts end -->
</body> </html>
