xaminerunner Rough design documents.
=====================================

Purpose:
   When SpecTcl is run headless, in the local or a remote system, a user may
   wish to attach a displayer to it in order to visualize spectra.  This
   program will assume the development of a shared memory remote cloner.  That is
   the a server component which will take the local shared SpecTcl display memory
   and create a duplicate image of that shared memory.  What this program will do
   is:
     *  If the shared memory is local, map directly to the local Xamine shared
        memory. If not, set up a shared memory hoister and map to that.
     *  Receive all Xamine IPC message queue messages and translate these
        to REST requests in the remote/local SpecTcl.
     *  Establish interest in traces and use gate traces to maintain the
        set of gates the local Xamine knows about with some acceptable
        latency.
        
Command line parameters:
   --host - host SpecTcl is running in defaults to localhost.
   --port - Port the SpecTcl REST service is running in.  This can be either
            a numeric port or, if DAQTCLLIBS is a defined environment variable,
            can be the name of a service that's advertised in the host's
            port manager.

Program composition:
   Since the REST client interface to SpecTcl is well developed in Tcl, this
   program will be a mix of Tcl and C++.  It will accomplish this by
   providing several commands and variables in the Xamine namespace:
   
   getHost - get Xamine Host.
   getPort - get Xamine Port.
   initRest - Initialize the REST client interface.
   isLocal - Determines if a host is local or remote.
   getLocalMemory - Get name of local memory
   getClonedMemory - Get name of cloned memory (starting cloner if needed).
   genXamineEnv - generate the Xamine environment variables.
   start   - Start Xamine.
   stop    - Stop Xamine.
   addGate - Add a new gate to a spectrum.
   removeGate - Remove a spectrum gate.
   pollGate   - Poll for a gate.
   setGateHandler - Establish a handler script for a new gate.
   startClonerIfNeeded - if the cloner is not running, start it.
  
    Note that starting Xamine starts a thread that polls for gates and, if a
    gate has been received will invoke and optional gate handler script (if
    there's none defined, the gate is ignored).
    Stopping Xamine queues a stop for the thread and joins on its exit.
    
C++ Dependencies:
   - Xamine client libraries.
   - TCL++
   - libtcl
Tcl dependencies:
    RestClient
    portAllocator (NSCLDAQ).
   
   