<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.5/docbookx.dtd
"
>
<book>
    <bookinfo>
      <title>SpecTcl REST client packages (New in 5.5)</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
             <revnumber>1.0</revnumber>
             <date>August 18, 2021</date>
             <authorinitials>RF</authorinitials>
             <revremark>Original Release</revremark>
          </revision>
      </revhistory>
    </bookinfo>
    <chapter>
       <title>Introduction</title>
       <para>
        Beginning with SpecTcl 5.5, SpecTcl almost fully encapsulates all of its
        commands with a REST interface.  This allows applications external
        to SpecTcl to fully control it.  The intent is to allow SpecTcl to
        run headless in the background, persistenty under the NSCLDAQ
        experiment manager.    This supports a persistent analysis engine
        indpenedeent of the users logged in to run the experiment.
       </para>
        <para>
            The SpecTcl REST support packages are divided into four
            packages:
        </para>
        <itemizedlist>
            <listitem>
               <para>
                   <literal>SpecTclRESTClient</literal> is a low level
                   client package that provides TCL script access to all REST
                   interfaces.
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>SpecTclRESTCommands</literal> simulates SpecTcl commands
                  for REST clients.  This package aids in porting existing SpecTcl
                  user interface scripts to run as REST clients.
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>SpecTclRESTLookup</literal>  can only be used in the
                  context of a running experiment.  It assumes SpecTcl is running
                  under the NSCLDAQ Manager as a service advertised with the
                  NSCLDAQ port manager and, if possible, provides a client
                  object (as defined in <literal>SpecTclRESTClient</literal>).
               </para>
            </listitem>
            <listitem>
               <para>
                  <literal>SpecTclRESTService</literal> can be used in
                  <filename>SpecTclInit.tcl</filename>
                  for SpecTcl run under the NSCLDAQ manager
                  to register a servicename for the REST server and communicate
                  the allocated port to the REST server startup.
               </para>
            </listitem>
        </itemizedlist>
        <para>
            The remainder of this document both describes and provides reference
            information for these packages.
        </para>
    </chapter>
    <chapter>
       <title>SpecTclRESTClient package</title>
       <para>
        This package provides a simple REST client for SpecTcl once it's service
        port is known.
       </para>
       <para>
        To use it:
       </para>
       <orderedlist>
        <listitem>
           <para>
              Include the package in your program using <command>package require</command>,
              note that you may need to extend the package search path
              to include the package library for the version of SpecTcl
              you are using.
           </para>
        </listitem>
        <listitem>
           <para>
              Instantiate a <classname>SpecTclRestClient</classname> object.
              To do this you must know the host in which SpecTcl is running
              and the port on which its REST server is listening for connections.
           </para>
        </listitem>
        <listitem>
           <para>
              Call methods in the instantiated
              <classname>SpecTclRestClient</classname> object to perform
              REST operations. Note that each method will connect to
              the server, make a request, obtain the results and close the
              connection.   Peristent sockets are not used.
           </para>
        </listitem>
       </orderedlist>
       <para>
        The program below shows how to obtain and output a list of all of the
        spectrum names for spectra defined in the server SpecTcl.
       </para>
       <example>
        <title>Sample SpecTcl REST client using SpecTclRESTClient</title>
        <programlisting>
package require SpecTclRESTClient             <co id='ex.client.package' />
                                              
set port 8080                                 <co id='ex.client.serverinfo' />
set host genesis.nscl.msu.edu

SpecTclRestClient c -host $host -port $port   <co id='ex.client.construct' />
set spectraInfo [c spectrumList]              <co id='ex.client.fetch' />
foreach spectrum $spectraInfo {
    puts [dict get $spectrum name]            <co id='ex.client.output' />
}
c destroy                                     <co id='ex.client.destroy' />


        </programlisting>
       </example>
       <calloutlist>
        <callout arearefs='ex.client.package' >
            <para>
                This includes the code for the <literal>SpecTclRESTClient</literal>
                library package in the script.  It may be necessary to extend the
                TCL Library search path to include the <filename>TclLibs</filename>
                directory within the SpecTcl installation you are using.
            </para>
            <para>
                This can be done within the script by using
                <command>lappend</command> to add that directory to the
                <varname>auto_path</varname> gloal variable or
                by defining the <varname>TCLLIBPATH</varname> environment
                variable to be a space separated list of library directories
                to add to the search path. 
            </para>
            <para>
                Note that the environment variable method can be done on the
                command line e.g.
                <command>TCLLIBPATH=/usr/opt/spectcl/5.5-000 tclsh</command>
                defines the environment variable only for that run of the
                <command>tclsh</command> command.
            </para>
        </callout>
        <callout arearefs='ex.client.serverinfo' >
            <para>
                For the purposes of this simple test program, we define the
                host in which the SpecTcl we want to talk to is in and
                the port on which its REST server is listening as
                hard coded variable values.
            </para>
        </callout>
        <callout arearefs='ex.client.construct' >
            <para>
                This constructs a new instance of a
                <classname>SpecTclRestClient</classname> object.  The first
                parameter is the object name or the special string
                <literal>%AUTO%</literal> to get a unique name installed.
                The command returns the name of the new command ensemble in any
                event.
            </para>
            <para>
                The <option>-host</option> option allows you to provide a
                host on which the server (SpecTcl) is running and
                <option>-port</option> provides the port to which the
                connection will be made.  This must be the port on which
                SpecTcl is listening.
            </para>
        </callout>
        <callout arearefs='ex.client.fetch' >
            <para>
                The object constructed above becomes a new command ensemble.
                Methods are invoked via subcommands.  This line uses the
                <methodname>spectrumList</methodname> method to ask the
                client object to interact with SpecTcl on the
                configured <option>-host</option> and <option>-port</option>
                to get a list of all spectra and their properties.  Essentially,
                this does a remote execution of <command>spectrum -list</command>
                in SpecTcl and returns information from that command.
            </para>
            <para>
                The information returned by this method is a list of dicts,
                one for each spectrum.  Each dict has the following keys:
            </para>
            <variablelist>
                <varlistentry>
                   <term><literal>name</literal></term>
                   <listitem>
                       <para>
                        Name of the spectrum.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>type</literal></term>
                   <listitem>
                       <para>
                        SpecTcl Spectrum type code.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>parameter</literal></term>
                   <listitem>
                       <para>
                        List of parameter needed by the spectrum.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>axes</literal></term>
                   <listitem>
                       <para>
                        List of axis definitions (this is a list of dicts
                        with the keys <literal>low</literal>,
                        <literal>high</literal> and <literal>bins</literal>).
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>chantype</literal></term>
                   <listitem>
                       <para>
                        Data type for each channel.  This can be one of
                        <literal>long</literal>, <literal>word</literal>
                        or <literal>byte</literal>.
                       </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </callout>
        <callout arearefs='ex.client.output' >
            <para>
                This <command>foreach</command> loop iterates over the
                list of dicts, fetches the <literal>name</literal>
                from each and outputs it to stdout.
            </para>
        </callout>
        <callout arearefs='ex.client.destroy' >
            <para>
                Destroys the client object we created.   This releases any
                resources consumed by that object.  In a simple program like this,
                when the next action is to exit the script, it's not actually
                necessary to destroy the object. In  a more complex
                script, it's always a good idea to dispose of resources
                you no longer need.
            </para>
        </callout>
    </calloutlist>
        <section>
            <title>SpecTclRESTClient reference page</title>
            <refentry>
               <refmeta>
                  <refentrytitle>SpecTclRESTClient</refentrytitle>
                  <manvolnum>3spectcl</manvolnum>
               </refmeta>
               <refnamediv>
                  <refname>SpecTclRESTCient</refname>
                  <refpurpose>SpecTcl REST client package</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <programlisting>
    package require SpecTclRESTClient
    
    set client [SpecTclRestClient client-spec ?options...?]
    $client configure option value ?...?
    set value [$client cget option]
    
    $client applyGate gatename spectra
    $client applyList ?pattern?
    
    $client attachSource source-type source-spec ?size ?format??
    $client attachList
    
    $client sbindAll
    $client sbind spectra
    $client sbindList ?pattern?
    
    $client fitCreate name spectrum low high fit-type
    $client fitUpdate ?pattern?
    $client fitDelete fit-name
    $client fitList ?pattern?
    
    $cilent foldApply gate spectra
    $client foldList ?pattern?
    $client foldRemove spectrum
    
    $client channelGet spectrum xchannel ?ychannel?
    $client channelSet spectrum value xchannel ?ychannel?
    
    $client spectrumClear
    $client spectrumClearAll
    $client spectrumProject existing new direction snapshot ?contour?
    $client spectrumStatistics ?pattern?
    
    $client treeparameterCreate name low high bins ?units?
    $client treeparameterList ?pattern?
    $client treeparameterListNew
    $client treeparameterSet name bins low high ?units?
    $client treeparameterSetInc name newinc
    $client treeparameterSetBins name newbins
    $client treeparameterSetUnits name units
    $client treeparameterSetLimits name low high
    $client treeparameterCheck name
    $client treeparameterUncheck name
    
    $client treeparameterVersion
    $client treevariableList
    $client treevariableSet name value units
    $client treevariableCheck name
    $client treevariableSetChanged name
    $client treevariableFireTraces ?pattern?
    
    $client filterCreate name gate parameters
    $client filterDelete name
    $client filterEnable name
    $client filterDisable name
    $client filterRegate name gate
    $client filterFile name path
    $client filterList ?pattern?
    $client filterFormat name format
    
    $client gateList ?pattern?
    $client gateDelete name
    $client gateCreateSimple1D name type parameters low high
    $client gateCreateSimple2D name type xparameterse yparameters xcoords ycoords
    $client gateCreateMask name type parameter mask
    $client gateCreateCompound name type gates
    
    $client integrate name roi
    $client parameterNew name number metadata
    $client parameterDelete name ?id?
    $client parameterList pattern ?id?
    
    $client pseudoCreate name parameters body
    $client pseudoList ?pattern?
    $client pseudoDelete name
    
    $client sread filename options
    
    $client ringformat major ?minor?
    
    $client scontents name
    
    $client shmemkey
    $client shmemsize
    
    $client spectrumList ?pattern?
    $client spectrumCreate name type parameters axes ?options?
    
    $client unbindByName names
    $client unbindById ids
    $client unbindAll
    
    $client version
    
    $client swrite filename spectra ?format?
    
    $client start
    $client stop
    
    $client rootTreeCreate name parameterPatterns ?gate?
    $client rootTreeDelete name
    $client rootTreeList ?pattern?
    
    $client pmanCreate name
    $client pmanList ?pattern?
    $client pmanCurrent
    $client pmanListAll ?pattern?
    $client pmanListEventProcessors ?pattern?
    $client pmanUse name
    $client pmanAdd pipeline-name processor-name
    $client pmanRemovfe pipeline-name processor-name
    $client pmanClear name
    $client pmanClone existing-name new-name
    
    $client evbCreate name frequency basename
    $client evbadd    name source pipe-name
    $client evbList   ?pattern?
    
    $client command arbitrary-tcl-command
    
    $client getVars
    
    $client traceEstablish retention
    $client traceDone $token
    $client traceFetch $token
    
                    </programlisting>
                </refsynopsisdiv>
                <refsect1>
                         <title>DESCRIPTION</title>
                      <para>
                        This package provides low level client access to the SpecTcl REST
                        server available in SpecTcl 5.5 and later.
                        Instantiating an object creates a new command ensemble.
                        Subcommands perform specific REST transactions.
                      </para>
                      
                </refsect1>
                <refsect1>
                    <title>OPTIONS</title>
                    <para>
                        The following two options are used to configure the
                        connections the instantiated client objects use.
                        Since connections are made for every transaction, by
                        nature, these options are dynamic.
                    </para>
                    <variablelist>
                        <varlistentry>
                           <term><option>-host</option></term>
                           <listitem>
                               <para>
                                The DNS hostname or IP address of the system
                                that will be connected to for REST transactions
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>-port</literal></term>
                           <listitem>
                               <para>
                                The port number that will be conneted to for REST
                                transactions.  A SpecTcl REST server must be
                                listening for connections on that port in the
                                system specified by <option>-host</option>.
                               </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </refsect1>
                <refsect1>
                    <title>METHODS</title>
                    <para>
                        Instantiated objects are command ensembles.  Each subcommand
                        of the ensemble can be thought of as an object method.
                        Two standard methods: <methodname>configure</methodname>
                        and <methodname>cget</methodname> allow users of
                        the object to configure the connection parameters of
                        the object.  Since each method that performs a REST
                        operation connects with the server each operation, the
                        configuration is fully dynamic.
                    </para>
                    <para>
                        The methods supported by the client objects are divided
                        into categories which will be described in different
                        subsections.
                    </para>
                    <refsect2>
                        <title>Conditions and gates</title>
                        <para>
                            These methods create and manipulate gates and their
                            application as conditions on spectra.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>applyGate</methodname>
                                   <methodparam>
                                       <type></type><parameter>gatename</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>spectra</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Applies a single gate, specified by
                                    <parameter>gatename</parameter> to all of the
                                    spectra named in the Tcl list of
                                    spectrum names in <parameter>spectra</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>applyList</methodname>
                                   <methodparam>
                                       <type></type><parameter>pattern</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Produces a list of gate applications.
                                    If <parameter>pattern</parameter> is
                                    provided, it is a pattern against which spectrum
                                    names are matched.  The pattern can include
                                    glob (filesystem type) wildcard characters such as
                                    <literal>*</literal> and <literal>?</literal>.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts.
                                    Each dict has the keys
                                    <literal>spectrum</literal>, the name of a
                                    spectrumand <literal>gate</literal>, the
                                    name of the gate applied to that spectrum.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>ungate</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes all gates from the spectra named in the
                                    list <parameter>spectra</parameter>,
                                    replacing the applied gates with a
                                    <literal>T</literal> gate.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Data Source and Analysis Control</title>
                        <para>
                            These methods control the data source that SpecTcl
                            analyzes data from as well as when analysis occurs.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>attachSource</methodname>
                                   <methodparam>
                                       <type></type><parameter>sourceType</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>sourceSpec</parameter>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>size</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                   <methodparam>
                                       <type></type><parameter>format</parameter>
                                       <modifier>(optional)</modifier>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Attaches a new data source to SpecTcl.
                                    If an existing source is attached, any analysis
                                    underway from it is stopped and the data source
                                    is detached.
                                   </para>
                                   <para>
                                    The <parameter>sourceType</parameter> determines
                                    the type of data source and the meaning of the
                                    <parameter>sourceSpec</parameter> parameter.
                                    Legal values are either
                                    <literal>pipe</literal> or <literal>file</literal>.
                                   </para>
                                   <para>
                                    For <literal>pipe</literal> data sources,
                                    <parameter>sourceSpec</parameter> is a
                                    command string that provides data to its
                                    stdout, which is on the other end of a pipe
                                    SpecTcl reads.  For <literal>file</literal>
                                    the data source is a file and the
                                    <parameter>sourceSpec</parameter> is the name
                                    of the event file.  Note the filename path
                                    is interpreted inthe context of SpecTcl's
                                    Tcl interpreter.
                                   </para>
                                   <para>
                                    If supplied, the <parameter>size</parameter>
                                    parameter supplies the size of the reads that
                                    SpecTcl will perform from the data source.
                                    <parameter>format</parameter> supplies a format
                                    parameter.   Unless you are analyzing very old
                                    data, the default <literal>ring</literal>
                                    format is correct.  Other legal values are
                                    <literal>nscl</literal> for the old 8k
                                    NSCLDAQ (pre 10.0) buffer format.  Or
                                    <literal>jumbo</literal> for big buffered
                                    NSCLDAQ 8.0 or earlier data.  In either
                                    case, the <parameter>size</parameter>
                                    must be the same as the size of the buffer.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>attachList</methodname>
                                   <void />
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Returns a string that describes what
                                    SpecTcl is attached to as a data source.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>ringformat</methodname>
                                  <methodparam>
                                      <type></type><parameter>major</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>minor</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    When attaching a data source in ring buffer
                                    format, it's necessary to specify a format version.
                                    This is because the payload format of the
                                    ringbuffers has evolved with time.
                                    Once you have attached a ring data source, you can
                                    use this method to specify the format of the
                                    ring buffers.  The <parameter>major</parameter>
                                    parameter is the major version number and
                                    currently can be <literal>10</literal> for
                                    NSCLDAQ10 and <literal>11</literal> currently
                                    for NSCLDAQ11 and higher.
                                   </para>
                                   <para>
                                    The optional <parameter>minor</parameter>
                                    parameter allows you to specify a minor verson.
                                    If not specified, this defaults to
                                    <literal>0</literal> which is normally
                                    acceptable because data formats are not
                                    allowed to change within a major version as
                                    a rule.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>start</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Starts analyzing data from the current data
                                    source.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>stop</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Stops analyzing data from the current
                                    data source.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Display Memory Control</title>
                        <para>
                            SpecTcl maintains an arbitrary set of spectra.  Of these,
                            some or all may be stored in  a shared memory segment
                            that provides high performance, low latency access
                            to spectrum data by display programs.  These
                            methods control which spectra are in display memory and
                            which are local to SpecTcl.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindAll</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Attempts to bind all defined spectra into the
                                    shared display memory.  If this fails (due
                                    to a shared memory too small to hold them all
                                    and their descriptions), an error is raised.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindSpectra</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Attempts to bind several spectra to the
                                    display shared memory.  The <parameter>spectra</parameter>
                                    parameter is a Tcl list of spectrumnames.
                                    If the bind fails, an error is raised.
                                    Typically the bind fails because the
                                    shared memory region is not large enough
                                    to hold all of the additional spectra.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sbindList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list that describes which spectra
                                    are bound to the display memory.  If
                                    <parameter>pattern</parameter> is supplied,
                                    it must match the bound spectrum name to be
                                    included inthe output list.  If not supplied,
                                    the <parameter>pattern</parameter> defaults to
                                    <literal>*</literal> which matches all bindings.
                                   </para>
                                   <para>
                                    The return value is a list of dicts. Each dict
                                    describes a binding of a spectrum to shared
                                    memory. Each dict has the keys:
                                    <literal>spectrum</literal> which is the
                                    name of a spectrum and <literal>binding</literal>
                                    which is the Xamine  binding id.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindByName</methodname>
                                  <methodparam>
                                      <type></type><parameter>names</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds the spectra listed by name
                                    in <parameter>names</parameter>
                                    (a list) from display memory. Note that
                                    this does not impact the contents of the
                                    spectra.  The spectrum contents are copied
                                    into private SpecTcl memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindById</methodname>
                                  <methodparam>
                                      <type></type><parameter>ids</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds a list of spectra by spectrum
                                    id from display memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>unbindAll</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Unbinds all spectra from display memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Fitting</title>
                        <para>
                            SpecTcl boasts an extensible fitting subsystem with
                            two built in fits (linear and gaussian sitting
                            on a linear background).  The methods in this section
                            provide access to that subsystem.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>fitname</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectrumname</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>lowChannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>highChannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>fitType</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new fit object named
                                    <parameter>fitname</parameter> that fits
                                    the data in the spectrum
                                    <parameter>spectrumname</parameter>
                                    between the <parameter>lowChannel</parameter>
                                    and <parameter>highChannel</parameter>
                                    parameter limits.
                                   </para>
                                   <para>
                                    The fit type is specified by <parameter>fitType</parameter>
                                    The built in fits types are 
                                    <literal>linear</literal> and
                                    <literal>gaussian</literal>.  Other fit types
                                    may be implemented and registered by the
                                    specific SpecTcl that's running the REST server.
                                    Since the <parameter>fitType</parameter>
                                    parameter is interpreted in that SpecTcl,
                                    these fit types become automatically available
                                    to REST clients.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitUpdate</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Since spectrum data are not, in general, static,
                                    they evolve as more data area analyzed, it's
                                    reasonable to assume that fit parameters will
                                    not be static either.  This
                                    method recomputes the fit parameters for each
                                    fit whose name matches
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not supplied,
                                    it defaults to <literal>*</literal>, which
                                    matches all fits.
                                   </para>
                                   <para>
                                    See <methodname>fitList</methodname> to
                                    get the current set of fit parameters.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>fitname</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the fit named
                                    <parameter>fitname</parameter> releasing
                                    all resources associated with that object.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>fitList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Produces a list of fit information.
                                    The elements of the list must have fit names
                                    that match the <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not provided
                                    it defaults to <literal>*</literal> which
                                    matches all fit names.
                                   </para>
                                   <para>
                                    The result is a list of dicts where each
                                    element of the list describes one fit object
                                    and has the followiung keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>spectrum</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the spectrum being fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal></term>
                                       <listitem>
                                           <para>
                                            Type of fit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Low channel limit over which the fit
                                            is computed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            High channel limit over which the
                                            fit is computed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal></term>
                                       <listitem>
                                           <para>
                                            A dict of fit parameter names and
                                            their values.  The actual parameter
                                            names will vary depending on the
                                            fit type.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Fold methods</title>
                        <para>
                            Folds are a technique used in gamma spectroscopy to remove
                            an existing peak from a spectrum as well as uncorrelated
                            peaks.  The idea in SpecTcl is to set a gate as a fold
                            on a gamma spectrum.  Such spectra increment parameter
                            sets that don't make that gate.  Applying the same gate
                            as a condition on the spectrum requires, further,
                            that only parameters that coincide with those in the
                            fold, other than those that satisfy the fold,
                            increment the spectrum.
                        </para>
                        <para>
                            The following methods provide access to SpecTcl's
                            folding implementation.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldApply</methodname>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Applies the gate <parameter>gate</parameter>
                                    as a fold to the spectra named by the list
                                    <parameter>spectra.</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about the folds on spectra
                                    that match the <parameter>pattern</parameter>.
                                    If no <parameter>pattern</parameter> is
                                    supplied, it defaults to <literal>* </literal>
                                    which matches all spectra.
                                   </para>
                                   <para>
                                    The result is a list of dicts. Each dict describes
                                    a spectrum with an applied fold and has the keys:
                                    <literal>spectrum</literal> - name of the spectrum
                                    and <literal>gate</literal> name of the
                                    gate that's applied as a fold to that spectrum.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>foldRemove</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes any fold that might be applied to the
                                    <parameter>specrum</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Accessing spectrum contents</title>
                        <para>
                            Several SpecTcl commands allow script to acces
                            spectrum contents.  These are documented in this
                            section.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>channelGet</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xchannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ychannel</parameter>
                                      <modifier>(Only for 2d spectra).</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the value of a channel in the spectrum
                                    <parameter>spectrum.</parameter>
                                    <parameter>xchannel</parameter> always must be
                                    supplied and is either the 1d channel number
                                    to be accessed or the x coordinate of the channel
                                    if a 2d spectrum.  2d Spectra require an additional
                                    <parameter>ychannel</parameter> to specify the
                                    y coordinate of th channel to be fetched.
                                   </para>
                                   <para>
                                    On success, the result is an integer value that
                                    is the current value of the requested spetrum
                                    channel.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>channelSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>value</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xchannel</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ychannel</parameter>
                                      <modifier>(Only for 2d spectra).</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the value of the specified channel
                                    in <parameter>spectrum</parameter> to
                                    <parameter>value</parameter>.  The
                                    <parameter>xchannel</parameter> and
                                    <parameter>ychannel</parameter> parameters
                                    have the same meaning and requirements as in
                                    <methodname>channelGet</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumClear</methodname>
                                  <methodparam>
                                      <type></type><parameter>spectrum</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Clears the spectrum named <parameter>spectrum</parameter>.
                                    By clear we mean that all channels in that
                                    spectrum are set to <literal>0</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumClearAll</methodname>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                      Zeroes all channels in all spectra.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumStatistics</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    In addition to channel values, Spectra, maintain
                                    over and undeflow counters, indicating when
                                    an event would have caused an increment off
                                    either end of that spectrum.
                                   </para>
                                   <para>
                                    This method returns the statistics of spectra
                                    whose name match <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not provided
                                    it defaults to <literal>*</literal> which
                                    matches all spectrum names.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. The
                                    dicts contain the keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the spectrum whose statistics
                                            are in this dict.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>underflows</literal></term>
                                       <listitem>
                                           <para>
                                            For 1d spectra, this is a single value
                                            that represents the number of times an
                                            increment would have occured past the
                                            left edge of the specturm.  
                                           </para>
                                           <para>
                                            For 2d spectra this is a two element list
                                            where the first element is as above
                                            and the second element is the number
                                            of times an event would have incremented
                                            below the bottom edge of the spectrum.
                                            Clearly there can be events that incremenbt
                                            bothof these counters.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>overflows</literal></term>
                                       <listitem>
                                           <para>
                                            Similarly to <literal>undeflows</literal>
                                            but for events that would increment
                                            to the right of the spectrum limits and,
                                            for 2d spectra above the top of the
                                            spectrum.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>scontents</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the complete contents of the
                                    spectrum <parameter>name</parameter>.
                                    The spectrum contents are returned as
                                    a dict with the keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>xoverflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of X axis (or 1d) overflows
                                            since the last time the spectrum
                                            was cleared.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>yoverflow</literal></term>
                                       <listitem>
                                           <para>
                                            Only present for 2d spectra, the number
                                            of overflows on the y axis.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>xunderflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of X axis (or 1d) undeflows
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>yunderflow</literal></term>
                                       <listitem>
                                           <para>
                                            The number of Y axis (only  present for
                                            2d spectra) underflows.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>channels</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum channel data. This is a list
                                            of dicts, one for each nonzero channel
                                            that contain:
                                            <literal>x</literal>, the X channel or
                                            1d channel, <literal>Y</literal> the
                                            Y channel for 2d spectra only and
                                            <literal>v</literal> the value at the
                                            specified channel.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Spectrum  Management</title>
                        <para>
                            Spectra in SpecTcl are dynamic entities.  They can be
                            created at any time, deleted at any time.  They can
                            have gates applied to them at any time.
                        </para>
                        <para>
                            The methods described in this section provide access
                            to SpecTcl commands that manipulate the set of SpecTcl
                            spectra.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumProject</methodname>
                                  <methodparam>
                                      <type></type><parameter>oldName</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newName</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>direction</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>snapshot</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new spectrum from an existing 2-d
                                    spectrum.  The initial contents of the
                                    new spectrum (named <parameter>newName</parameter>)
                                    are created by summing channels either vertically
                                    or horizontally  from the existing spectrum
                                    named <parameter>oldName</parameter>.
                                   </para>
                                   <para>
                                    <parameter>direction</parameter>
                                    determines the axis onto which the projection is
                                    performed.  If <literal>x</literal> y channels
                                    are summed to produce a single  channel.
                                    If <literal>y</literal>, X channels are summed
                                    to produce a single channel.
                                   </para>
                                   <para>
                                    If <parameter>snapshot</parameter>, a flag,
                                    is zero, once <parameter>newName</parameter>
                                    is created it is hooked into the histogramming
                                    system so that new events can increment
                                    that spectrum. If non-zero, this is not done,
                                    creating a snapshot projection that never updates.
                                   </para>
                                   <para>
                                    If <parameter>contour</parameter> is provided it
                                    must be the name of a contour gate that,
                                    if <parameter>snapshot</parameter> is
                                    <literal>0</literal> will be applied to the
                                    <parameter>newName</parameter> spectrum.
                                    Furthermore, only the channels in
                                    <parameter>oldName</parameter> that are inside
                                    that contour are used to populate the initial
                                    values of <parameter>newName</parameter>.
                                   </para>
                                   <para>
                                    The spectrum is entered into SpecTcl spectrum
                                    name dictionary, regardless and can, therefore
                                    be used wherever a spetrum name can be used
                                    both in this API and in SpecTcl's commands.
                                    Note that initially, the spectrum is not
                                    bound into the display memory but that can
                                    be accomplished via <methodname>sbindSpectra</methodname>
                                    if desired or locally via the
                                    <command>sbind</command> command.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about spectrum definitions
                                    for spectra with names that match
                                    <parameter>pattern</parameter>.  If the
                                    optional <parameter>pattern</parameter>
                                    parameter is not supplied it defaults to
                                    <literal>*</literal> which matches all
                                    spectrum names.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. Each
                                    dict describes one spectrum and contains the
                                    following keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum name 
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal></term>
                                       <listitem>
                                           <para>
                                            Spectrum type code. See
                                            the SpecTcl command reference
                                            <command>spectrum</command> for
                                            legal spectrum types.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameter</literal></term>
                                       <listitem>
                                           <para>
                                            List of parameter names the spectrum
                                            needs.  The spectrum type tells how to
                                            interpret these.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>axes</literal></term>
                                       <listitem>
                                           <para>
                                            A list of one or two axis definitions.
                                            Each axis definition is a dict with the
                                            keys <literal>low</literal>,
                                            <literal>high</literal> and
                                            <literal>bins</literal> with obvious
                                            meanings.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>chantype</literal></term>
                                       <listitem>
                                           <para>
                                            Channel data type this is currently one
                                            of  <literal>long</literal>.
                                            <literal>word</literal> or
                                            <literal>byte</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gate</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the gate applied to the spectrum.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes a spectrum named <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>spectrumCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>type</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>axes</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>options</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new spectrum <parameter>name</parameter>
                                    with the type <parameter>type</parameter>.
                                    The spectrum uses <parameter>parameters</parameter>
                                    in a manner that is type dependent.
                                    The <parameter>axes</parameter> parameter is a list
                                    of one (1-d) or 2 (2-d) axis definitions.
                                    Each axis is a three element low, high,
                                    bins list.
                                   </para>
                                   <para>
                                    <parameter>options</parameter> is a dict
                                    (that can be empty). which provides additional
                                    spectrum options and the ability of some
                                    spectra to be unusual.
                                   </para>
                                   <para>
                                    The keys the method uses are:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>chantype</literal></term>
                                       <listitem>
                                           <para>
                                            Channel type.  One of
                                            <literal>long</literal>,
                                            <literal>short</literal> or
                                            <literal>byte</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>direction</literal></term>
                                       <listitem>
                                           <para>
                                            Only used if the type is
                                            <literal>2dproj</literal>,
                                            this specifies the direction of the
                                            projection.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>roigate</literal></term>
                                       <listitem>
                                           <para>
                                            Only used for <literal>2dproj</literal>,
                                            This is the gate that specifies the
                                            region projected.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Parameter access.</title>
                        <para>
                            SpecTcl has two levels of parameter definition.  Raw
                            parameters make a correspondence between a slot in
                            the <classname>CEvent</classname> object that
                            the event processing pipeline fills in and a parameter
                            name.  This is the oldest and most primitive type of SpecTcl
                            parameter.
                        </para>
                        <para>
                            The second level of parameter definition was originally
                            developed by Daniel Bazin and provides additional
                            metadata about the tree parameter that can be used
                            to suggest how to build spectra using those parameters.
                            Furthermore, treeparameter creation automatically creates
                            an underlying primitive parameter allocatin an
                            unused slot.  Finally the <classname>CTreeParameter</classname>
                            and <classname>CTreeParameterArray</classname>
                            classes available to event processors allows event
                            processors to be written without referencing specific
                            slots in the <classname>CEvent</classname> object.
                        </para>
                        <para>
                            This set of client methods provide support for
                            manipulating both tree parameters and low level
                            primitive parameters.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>bins</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new tree parameter bound to the
                                    primitive parameter <parameter>name</parameter>.
                                    The parameter is assumed to run between
                                    <parameter>low</parameter> and
                                    <parameter>high</parameter> (double precision
                                    floating point parameters) and has sufficient
                                    resolution to allow for a histogram axis to have
                                    <parameter>bins</parameter> bins.
                                    The optional <parameter>units</parameter>
                                    parameter provides units of measure.
                                   </para>
                                   <para>
                                    Use cases for creating tree parameters at script
                                    level include wanting to wrap an existing
                                    primitive parameter (used in the event processors
                                    as a primitive parameter) in the metadata
                                    that tree parameters have.  Furthermore,
                                    a treeparameter may be created at script level
                                    to allow it to be computed at script level
                                    as a <command>psuedo</command> parameter.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of dicts that describe
                                    the tree parameters
                                    with names that match the
                                    <parameter>pattern</parameter>.
                                    <parameter>pattern</parameter> can include glob
                                    wild card characters and is optional.  If
                                    not supplied, it defaults to <literal>*</literal>
                                    which matches all tree parameters.
                                   </para>
                                   <para>
                                    The dicts in the list contain the following
                                    keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The parameter name.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>bins</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis binning
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis low limit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            Suggested axis high limit.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure.  THis will be an
                                            empty string if none have been
                                            specified for the tree parameter.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterNew</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of the tree parameter names
                                    that have been programmtically created.
                                    Note this includes those created by the
                                    <methodname>treeparameterCreate</methodname>
                                    method or other client software, as well
                                    as those  created locally via SpecTcl's
                                    <command>treeparameter-create</command>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>bins</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                                  
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                      <modifier>optional</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets new values for all of the metadata
                                    associated with the tree parameter
                                    <parameter>name</parameter>.  See
                                    <methodname>treeparameterCreate</methodname>
                                    for a description of the parameters.
                                   </para>
                                   <para>
                                    Note that this only affects the metadata
                                    associated with the tree parameter. Spectra
                                    using the parameter are no modified in
                                    any way.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetInc</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newInc</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Provides a new channel width for the tree
                                    parameter <parameter>name</parameter>.  This recomputes the
                                    bins metadata given the width, low and high
                                    limits in the existing metadata so that each
                                    bin has the width <parameter>newInc</parameter>
                                   </para>
                                   <para>
                                    Note again, this only affects the metadata
                                    in the tree parameter.  No spectra that depend
                                    on the tree parameter are modified.
                                   </para>
                                   <para>
                                    See <methodname>treeparameterSeteBins</methodname>
                                    below for a more direct way to change the binning,
                                    though sometimes you really want control over
                                    the channel width...e.g. if the units are
                                    <literal>cm</literal> you might want sufficient
                                    bins so that each channel is 1mm wide.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treeparameterSetBins</methodname>
                                   <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newBins</parameter>
                                  </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Sets the number of recommended bins for
                                    the tree parameter <parameter>name</parameter>
                                    to be <parameter>newBins</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetUnits</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newUnits</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the treeparameter <parameter>name</parameter>
                                    units of measure to <parameter>newUnits</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterSetLimits</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newLow</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>newHign</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets new low (<parameter>newLow</parameter>)
                                    and new high (<parameter>newHigh</parameter>)
                                    limits for the metadata
                                    associated with <parameter>name</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tree parameters know if their definitions
                                    have been modified.  This method checks
                                    <parameter>name</parameter> and returns a boolean
                                    true value if <parameter>name</parameter>'s
                                    was modified
                                   </para>
                                   <para>
                                    The use case for this method is to reduce
                                    the information a program has to write to
                                    a saved settings file.  Since in general,
                                    tree parameters are created programmatically
                                    in the C++ code, the only tree parameters that
                                    need to be written are those with the change
                                    flag set and those created at script  level.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treeparameterUnCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Clears the flag that's returned by
                                    <methodname>treeparameterCheck</methodname>.
                                    A suitable smart user interface could do this
                                    if, e.g. the tree parameter's metadata, having
                                    been modified, is reset to its original
                                    condition.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treeparameterVersion</methodname>
                                    <void />
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Returns the version string for the tree
                                    parameters subsystem.  The intent of this
                                    is to allow the tree parameter system to
                                    have additional capabilities with time.
                                    Knowing the version at which a capability
                                    was added would allow the application developer
                                    to use this interface to determine if specific
                                    capabilities are available.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>parameterNew</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>number</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>metadata</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new primitive
                                    parameter; <parameter>name</parameter>
                                    bound to slot <parameter>number</parameter>
                                    in the <classname>CEvent</classname>
                                    object filled out by the data analysis pipeline.
                                   </para>
                                   <para>
                                    <parameter>metadata</parameter> is a dict
                                    that's used to pass a varying set of optional
                                    metadata about the parameter.  It can be
                                    an empty dict, in which case, the parameter
                                    has no metadata
                                   </para>
                                   <para>
                                    Keys used by this method are:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>resolution</literal></term>
                                       <listitem>
                                           <para>
                                            Optional number of bits of resolution
                                            the parameter covers.  This
                                            provides a range of parameters most
                                            suited for a value that comes from
                                            some device like a digitizer.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal></term>
                                       <listitem>
                                           <para>
                                            Low limit value of the parameter.  Requires
                                            <literal>high</literal> and
                                            <literal>units</literal> also be present.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>high</literal></term>
                                       <listitem>
                                           <para>
                                            High limit on the parameter. Requires
                                            that <literal>low</literal> and
                                            <literal>units</literal> also be present.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure string. No other
                                            keys are required.  Note that units of
                                            measure can be an empty string if
                                            needed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>parameterDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>id</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the primitive parameter
                                    <parameter>name</parameter>.  If the
                                    <parameter>name</parameter> is an empty
                                    string the <parameter>id</parameter>
                                    parameter is then required and specifies
                                    the number of the parameter to delete.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type>parameterList</type>
                                  <methodname></methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>id</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a list of the definitions whose
                                    parameter names match the
                                    <parameter>pattern</parameter>. If
                                    <parameter>pattern</parameter> is not
                                    supplied it defaults to <literal>*</literal>
                                    matching all parameters.
                                   </para>
                                   <para>
                                    If <parameter>pattern</parameter>is an empty
                                    string <parameter>id</parameter> is required
                                    and is the parameter number of the parameter
                                    to list.
                                   </para>
                                   <para>
                                    The result is a list of dicts that contain
                                    the following keys.  Note that metadata
                                    that has not been specified will be returned
                                    as empty strings.
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The parameter name
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>id</literal></term>
                                       <listitem>
                                           <para>
                                            Th parameter number (id).
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>resolution</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter resolution in bits if
                                            supplied.
                                           </para>
                                           
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low, high</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter value limits if supplied.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Parameter units of measure, if supplied.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Tree variable methods</title>
                        <para>
                            Parallel to the <literal>treeparameter</literal>
                            subsystem is a <literal>treevariable</literal>
                            subsystem.  These are jackets for Tcl variables in
                            SpecTcl that contain floating point values and are both easy to access from C++
                            code  via the <classname>CTreeVariable</classname>
                            and have additional metadata.
                        </para>
                        <para>
                            This section of the manpage describes the
                            methods that manipulate tree variables over the
                            REST interface.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableList</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists all tree variables and their metadata.
                                    This returns a list of dicts.   Each dict describes
                                     a tree variable and contains the following
                                     keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            Name of the tree variable.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>value</literal></term>
                                       <listitem>
                                           <para>
                                            Current tree variable value.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>units</literal></term>
                                       <listitem>
                                           <para>
                                            Units of measure metadata that's
                                            associated with the tree variable.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableSet</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>value</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>units</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Modifies a tree variable and its metadata.
                                    <parameter>name</parameter> specifies the
                                    treevariable to modify while <parameter>value</parameter>
                                    is the new value assigned to that variable
                                    and <parameter>units</parameter> a new
                                    units of measure metadata.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableCheck</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Check the changed flag of the tree variable
                                    <parameter>name</parameter>.
                                    This flag is set automatically if a tree variable
                                    value/metadata are modified.  In addition,
                                    <methodname>treevariableSetChanged</methodname>
                                    can set this flag.
                                   </para>
                                   <para>
                                    As with the check flag for tree parameters,
                                    the intent is to allow user interface authors
                                    to reduce the amount of data written to saved
                                    settings file.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>treevariableSetChanged</methodname>
                                   <methodparam>
                                       <type></type><parameter>name</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Sets the tree variable changed flag for
                                    <parameter>name</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>treevariableFireTraces</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tcl supports tracing variable chagnes.  If
                                    a variable is modified at script level, traces
                                    automatically fire, if, however variables bound
                                    to memory are modified by modifying that
                                    memory, traces need to be manually fired.
                                   </para>
                                   <para>
                                    This is needed if a <classname>CTreevariable</classname>
                                    instance if assigned a value by C++ code.
                                   </para>
                                   <para>
                                    This method programmatically fires any needed
                                    variable traces for tree variables
                                    that match the optional <parameter>pattern</parameter>
                                    argument.  If <parameter>pattern</parameter>
                                    is not provided, it default to
                                    <literal>*</literal> which matches all tree
                                    variables.
                                   </para>
                                </listitem>
                            </varlistentry>
                            
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Filter manipulation methods</title>
                        <para>
                            Filter are SpecTcl entities that live on the
                            histogramming pipeline.  They can write a subset of
                            events with a subset of parameters to output files.
                            Usually filter files are written such that
                            reading data from filter files is much faster
                            than reading data from event files with a similar
                            number of events.
                        </para>
                        <para>
                            Filter file formats are extensible.  See the
                            SpecTcl programming reference.  The client methods
                            for manipulating filters are:
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new filter object. <parameter>name</parameter>
                                    is the name that's associated with that object.
                                    <parameter>gate</parameter> specifies the
                                    filter's gate.  Only events that satisfy that
                                    gate will be written to the filter output
                                    file.  Note that you can use a <literal>T</literal>
                                    gate to write all events.
                                   </para>
                                   <para>
                                    <parameter>parameters</parameter> specifies
                                    the list of parameter names that determines
                                    which parameters are written to the output file
                                    for each event that satisfies the filter's
                                    gate.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the filter object
                                    <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterEnable</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Enables the filter  <parameter>name</parameter>
                                    to write data.  Note that the filter must first
                                    be given an output file.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterDisable</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Disables the filter <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterRegate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Changes the gate that determines which
                                    events are written from filter
                                    <parameter>name</parameter> to
                                    <parameter>gate</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterFile</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>path</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the file for filter <parameter>name</parameter>
                                    to <parameter>path</parameter>.  This determines
                                    where the filter, when enabled, will write
                                    data.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of dicts describing filters
                                    whose names match <parameter>pattern</parameter>.
                                    If the optional <parameter>pattern</parameter>
                                    command is not provided it defaults to
                                    <literal>*</literal> which matches all
                                    filter names.
                                   </para>
                                   <para>
                                    Each dict in the list describes a filter and
                                    contains the following keys:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal></term>
                                       <listitem>
                                           <para>
                                            The name of the filter described
                                            by this dict.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gate</literal></term>
                                       <listitem>
                                           <para>
                                            The gate that filters events for
                                            this filter.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>file</literal></term>
                                       <listitem>
                                           <para>
                                            The output file to which this
                                            filter writes data.  This is an
                                            empty string if not yet set.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal></term>
                                       <listitem>
                                           <para>
                                            List of parameter nams of the parameters
                                            that will be written to the filter
                                            file for each event that satisfies
                                            the filter's gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>format</literal></term>
                                       <listitem>
                                           <para>
                                            Format of the filter file. SpecTcl
                                            comes with a built-in format
                                            <literal>xdr</literal> but this
                                            can be extended programmatically
                                            in the specific tailored SpecTcl
                                            that's being run.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>filterFormat</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>format</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Sets the filter format for <parameter>name</parameter>
                                    to be <parameter>format</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Gate manipulation methods</title>
                        <para>
                            One of SpecTcl's strengths is its ability to conditionalize
                            the increment of spectra on events that satisfy
                            a condition.  SpecTcl refers to these conditions
                            as gates.  Gates are applied to spectra to perform
                            this conditionalization.
                        </para>
                        <para>
                            SpecTcl provides a rich set of gates that will
                            not all be described here. See the
                            SpecTcl command reference.  This section
                            describes the methods that can create and manipulate
                            gates.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Produces a list that contains descriptions
                                    of the gates whose names match the
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not
                                    provided, it defaults to <literal>*</literal>
                                    which matches all names.
                                   </para>
                                   <para>
                                    The contents of the list are dicts. Some dict
                                    keys are always present while the presence of
                                    others depends on the gate type.
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>name</literal> (always)</term>
                                       <listitem>
                                           <para>
                                            Name of the gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>type</literal> (always)</term>
                                       <listitem>
                                           <para>
                                            The SpecTcl gate type code. See
                                            the SpecTcl Command Reference
                                            discussion of the <command>gate</command>
                                            command.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>gates</literal>
                                       (+,*,- gates only)
                                       </term>
                                       <listitem>
                                           <para>
                                            List of gates the gate depends on.
                                            Note that for a <literal>-</literal>
                                            gate there will only ever be a single
                                            dependent gate.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>parameters</literal>
                                       (s,c,b,c2vband,gs,gb,gc,em,am,nm gates only)</term>
                                       <listitem>
                                           <para>
                                            List of the parameters the gate
                                            depends on.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>points</literal>
                                       (c,b,c2band,gb,gc only)</term>
                                       <listitem>
                                           <para>
                                            A list of points that define a
                                            2d gate.  The points are a list
                                            of 2 element sublists where the first
                                            element of each sublist is an x
                                            coordinate and the second the y.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>low</literal>, <literal>high
                                       (s,gs only)</literal></term>
                                       <listitem>
                                           <para>
                                            Low and High limits of 1-d gates.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>value</literal>
                                       (em,am,nm only)</term>
                                       <listitem>
                                           <para>
                                            Mask value for the mask gates.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the gate <parameter>name</parameter>.
                                    Note that SpecTcl never actually deletes gates
                                    as that produces ill defined results for gate
                                    dependencies.  Instead deleted gates
                                    are turned into False gates (type <literal>F</literal>).
                                    This has well defined effects on gate dependencies.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateSimple1D</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>low</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>high</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a simple 1-d gate.  The gate will
                                    be called <parameter>name</parameter> and
                                    has a type <parameter>gatetype</parameter>.
                                    <parameter>parameters</parameter> is a list of
                                    the parameter names the gate depends on.
                                    <parameter>low</parameter> and
                                    <parameter>high</parameter> are the limits of the
                                    gate.
                                   </para>
                                   <para>
                                    THe only valid gate types are
                                    <literal>s</literal> and <literal>gs</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateSimple2D</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xparameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>yparameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>xcoords</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>ycoords</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a simple 2d gate <parameter>name</parameter>.
                                    The gate type is <parameter>gatetype</parameter>
                                    and must be one of
                                    <literal>b,c,gb,gc</literal>.
                                    <parameter>xparameters</parameter> and
                                    <parameter>yparameters</parameter> specify
                                    the list of parameter names on the X and Y axis
                                    of the gate.  Note that for gamma 2-d gates,
                                    it does not matter which parameters are in
                                    which list and, in fact, all parameters could
                                    just be in one of the two lists.
                                   </para>
                                    <para>
                                        The coordinates of the gate figure
                                        are corresponding elements of the
                                        <parameter>xcoords</parameter> and
                                        <parameter>ycoords</parameter> parameters.
                                        For example, the first point is
                                        ([lindex $xcoords 0], [lindex $ycoords 0]).
                                        etc.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                   <methodsynopsis>
                                       <type></type>
                                       <methodname>gateCreateMask</methodname>
                                       <methodparam>
                                           <type></type><parameter>name</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>gatetype</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>parameter</parameter>
                                       </methodparam>
                                       <methodparam>
                                           <type></type><parameter>mask</parameter>
                                       </methodparam>
                                    </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Creates a mask gate <parameter>name</parameter>.
                                    The gate type (<parameter>gatetype</parameter>),
                                    must be one of <literal>am, em, nm</literal>.
                                    The gate is checked on the parameter
                                    <parameter>parameter</parameter> using the
                                    mask <parameter>mask</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>gateCreateCompound</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gatetype</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gates</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a compound gate.  These are gates
                                    that depend on other gates.
                                    <parameter>name</parameter> will be the name
                                    of the new gate which will have the
                                    gate type <parameter>gatetype</parameter>.
                                    The <parameter>gatetype</parameter> msut
                                    be one of <literal>+,*,c2band,-</literal>.
                                   </para>
                                   <para>
                                    <parameter>gates</parameter> is a list of
                                    the names of the gate this gate depends on.
                                    <literal>c2band</literal> gate must only have
                                    two dependent gates and they must be type
                                    <literal>b</literal>.  Similarly
                                    <literal>-</literal> gates must only have
                                    one gate although it can be of any type.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Dynamic Pipeline Management</title>
                        <para>
                            Prior to SpecTcl 5.0, the data anlaysis pipeline that
                            transforms raw data into unpacked parameters was
                            defined at the C++ level and there was little native
                            support for dynamically modifying the pipeline.
                        </para>
                        <para>
                            In SpecTcl 5.0, the <command>pman</command>
                            command allows users to compose pipelines from
                            event processors that have been registered and
                            to select which of the pipelines is active at any
                            given time.
                        </para>
                        <para>
                            This section describes methods that provide
                            client access to this capability through the
                            SpecTcl REST server.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new empty analysis pipeline.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the names of the pipelines that
                                    have been defined and match the
                                    optional <parameter>pattern</parameter>.
                                    If <parameter>pattern</parameter> is not
                                    supplied, then it defaults to
                                    <literal>*</literal> matching all names.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanCurrent</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a dict that describes the current
                                    pipeline. Keys are
                                    <literal>name</literal>, the pipeline name,
                                    and <literal>processors</literal>, the
                                    oredered list of event processors in the
                                    pipeline.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanListAll</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns information about piplines with names
                                    that match the <parameter>pattern</parameter>.
                                    This defaults to <literal>*</literal> if
                                    not provided.
                                   </para>
                                   <para>
                                    The return value is a list of dicts.  Each
                                    dict describes a pipeline who's name
                                    matches the pattern. Each dict has the same
                                    format as the dict returned from
                                    <methodname>pmanCurrent</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanListEventProcessors</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list names
                                    of the registered event processors.
                                    Registered event processors are the processors
                                    that can be strung together in event processing
                                    pipelines.  If <parameter>pattern</parameter>
                                    is provided only the event processors with
                                    names matching <parameter>pattern</parameter>
                                    (with glob wild-card characters) are listed.
                                    If not supplied <parameter>pattern</parameter>
                                    defaults to <literal>*</literal> which
                                    matches all processor names.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanUse</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Tells SpecTcl to use the named
                                    <parameter>pipeline</parameter> as the current
                                    event processing pipeline.  Starting with the
                                    next event received, SpecTcl will use the name
                                    <parameter>pipeline</parameter> to extract
                                    parameters from the raw event data.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanAdd</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>processor</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Adds <parameter>processor</parameter>, an
                                    event processor registered with the pipeline
                                    manager to the end of the event processing
                                    pipeline named <parameter>pipeline</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanRemove</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>processor</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes the event processor named
                                    <parameter>processor</parameter> from the
                                    event processing pipeline named
                                    <parameter>pipeline</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanClear</methodname>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Removes all event processors fromt he processing
                                    pipeline named <parameter>pipeline</parameter>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pmanClone</methodname>
                                  <methodparam>
                                      <type></type><parameter>source</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>new</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a  new processing pipeline named
                                    <parameter>new</parameter> that is
                                    a copy of the pipeline named <parameter>source</parameter>.
                                    Once created, the processors in the two pipelines
                                    can diverge by using the pipeline editing
                                    facilities either documented above or in
                                    direct SpecTcl command execution.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Event Built Data</title>
                        <para>
                            Increasingly complex experiments are built out of
                            quasi-independent detector subsystems that are
                            coordinated by a common time base.  The NSCLDAQ
                            event builder assembles events that are coincident
                            within some time window and ships them downstream
                            in the experiment's data flow.
                        </para>
                        <para>
                            This set of functions supports building an
                            event processor that associates an event processing
                            pipeline (see previous section) with data from
                            each expected source in the built events.  This
                            allows the initial raw event unpacking stage
                            of event processing to be built from the standard
                            software that is used by the developers/maintainers
                            of each
                            detector subsystem.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>frequency</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>basename</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a new event processnar <parameter>name</parameter>
                                    that can be configured to analyze event built
                                    data.  The new event processor will automatically
                                    build several diagnostic parameters whose
                                    base names will be <parameter>basename</parameter>.
                                    These diagnistic parameter support the creation
                                    of typical event builder diagnostic spectra
                                    that can be used to monitor the synchronization
                                    of the various data sources.
                                   </para>
                                   <para>
                                    One of the diagnostic parameters is the timestamp
                                    calibrated to double precision floating point
                                    seconds.  This supports diagnostic spectra
                                    that show time evolution (e.g. the time difference
                                    between fragments from data source pairs as
                                    it evolves int time should be unchanging).
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbAdd</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>source</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>pipeline</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Associates an event processing pipeline
                                    <parameter>pipe</parameter>
                                    (see the previous subsection) with an
                                    event source id <parameter>source</parameter> in an event builder event
                                    processor <parameter>name</parameter>.
                                    If the event processor is given an event built
                                    event to analyze, the pipeline will be activated
                                    to analyze data from that source id if it is
                                    encounted in that event.
                                   </para>
                                   <para>
                                    The idea is that several calls to this method
                                    build up an event processor capable of analyzing
                                    data from all expected data sources
                                    using the event processing pipline that is normally
                                    used for each event source were it run by itself.
                                   </para>
                                </listitem>
                            </varlistentry>
                             <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>evbList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the event processor names that have been
                                    created.  Only names that match the
                                    optional <parameter>pattern</parameter>
                                    argument are listed.  If <parameter>pattern</parameter>
                                    is not supplied, it defaults to <literal>*</literal>.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>

                    </refsect2>
                    <refsect2>
                        <title>Tracing</title>
                        <para>
                            SpecTcl supports establishing traces on changes
                            tot he parameter, gate and spectrum dictionaries.
                            Traces for a REST client/server environment are
                            problematic  because the REST protocol does not have
                            a mechanism for the server to request an action by the
                            on its own.
                        </para>
                        <para>
                            The methods below allow the server to buffer traces
                            on  behalf of an interested client which can the fetch
                            accumulated traces.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>traceEstablish</methodname>
                                  <methodparam>
                                      <type></type><parameter>retention</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Establishes client interest in traces.
                                    The <parameter>retention</parameter>
                                    parameter specifies the minimum amount of time
                                     trace information will be retained for this
                                     client in seconds.  If traces are fetched
                                     periodically, this should be some small multiple
                                     of the time between fetches.
                                   </para>
                                   <para>
                                    The return value from this method is an integer
                                    token value that represents this client in the
                                    server's trace buffering subsystem.
                                    It should be used in calls to
                                    <methodname>traceDone</methodname>
                                    and <methodname>traceFetch</methodname>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>traceDone</methodname>
                                  <methodparam>
                                      <type></type><parameter>token</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    This method indicates the client no longer
                                    needs the server to buffer traces on its
                                    behalf.
                                    The <parameter>token</parameter> parameter
                                    to this method should be the token returned
                                    from <methodname>traceEstablish</methodname>.
                                   </para>
                                   <para>
                                    Once successfully completed, the
                                    <parameter>token</parameter> is no longer
                                    valid.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term>
                                <methodsynopsis>
                                   <type></type>
                                   <methodname>traceFetch</methodname>
                                   <methodparam>
                                       <type></type><parameter>token</parameter>
                                   </methodparam>
                                </methodsynopsis>
                               </term>
                               <listitem>
                                   <para>
                                    Fetches the traces buffered since the last
                                    call to <methodname>traceFetch</methodname>.
                                    The traces are returned as a dict with
                                    three attributes.  The contents of each
                                    attributs are a list in which each list element
                                    describes a trace.
                                   </para>
                                   <para>
                                    The <literal>parameter</literal>
                                    attribute contains the parameter traces.
                                    The first element of each list is the text
                                    <literal>add</literal> or
                                    <literal>delete</literal> indicating the
                                    what happened.  THe second element is the
                                    name of the parameter that was either
                                    added or deleted.
                                   </para>
                                   <para>
                                    The
                                    <literal>gate</literal> attribute contains the
                                    gate traces.  The first element of each list
                                    is the text <literal>add</literal>,
                                    <literal>delete</literal> or
                                    <literal>changed</literal> indicating
                                    why the trace fired.  The second element of
                                    the list is the name of the affected gate.
                                   </para>
                                   <para>
                                    The <literal>spectrum</literal> attribute
                                    contains spectrum traces.  The first element
                                    of each list is the text
                                    <literal>add</literal> or <literal>delete</literal>
                                    indicating the operation that fired the trace.
                                    The second element of each list is the name
                                    of the parameter that was affected.
                                   </para>
				   <para>
				     Finally the <literal>bindings</literal>
				     attribute provides sbind and unbind trace
				     information.  The first element of each
				     list is the type of trace
				     <literal>add</literal> or
				     <literal>remove</literal>  The second
				     element the name of the affected spectrum
				     and the last, the binding id (spectrum
				     slot) affected/allocated.
				   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>
                    <refsect2>
                        <title>Miscelaneous Methods</title>
                        <para>
                            The methods described in this section don't fit into
                            any nice categories.
                        </para>
                        <variablelist>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>integrate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>roi</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Performs an integration in a spectrum,
                                    <parameter>name</parameter>, within
                                    some region of interest, <parameter>roi</parameter>.
                                   </para>
                                   <para>
                                    The Region of Interest <parameter>roi</parameter>
                                    can have several forms.  It can be the
                                    name of a gate within which the integration
                                    will take place, or, if the spectrum is
                                    one dimensional, a pair of numbers that are the
                                    low and high limits of integration or,
                                    if the spectrum is two dimensional,
                                    a list of x/y pairs that describe contour.
                                   </para>
                                   <para>
                                    Regions of interest that are not gates
                                    must be expressed in parameter coordinates,
                                    not spectrum channels and the integration
                                    takes place in that coordinate system.
                                    </para>
                                    <para>
                                        The integration returns a dict.
                                        The <literal>centriod</literal> key
                                        provides the centroid of the integration
                                        as either a single value or a list of
                                        two values, depending on spectrum
                                        dimensionality.  The
                                        <literal>fwhm</literal> key provides the
                                        full width at half maximum under the assumption
                                        the integration is over a gaussian shaped
                                        peak.  It too is either a single
                                        value or two values, depending on
                                        spectrum dimensionality.
                                        The <literal>counts</literal> key
                                        provides the number of counts in the
                                        region of integration.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameters</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>body</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Creates a puedo parameter.
                                    <parameter>name</parameter> is the name of
                                    an as yet unused parameter.
                                    <parameter>parameters</parameter> are the
                                    names of the parameters needed to compute
                                    the pseudo and  <parameter>body</parameter>
                                    is the script body  used to compute the
                                    parameter.  For more information, see the SpecTcl
                                    command reference guide for the
                                    <command>pseudo</command> command.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns a list of descriptions of pseudo
                                    parameters whose names match
                                    <parameter>pattern</parameter>.  If
                                    <parameter>pattern</parameter> is not supplied,
                                    it defaults to <literal>*</literal>
                                    which matches everything.
                                   </para>
                                   <para>
                                    The result is a list of dicts with the keys:
                                    <literal>name</literal> containing the name
                                    of the pseudo parameter, <literal>parameters</literal>
                                    containing a list of the parameter names
                                    needed to compute the pseudo and
                                    <literal>body</literal>, the script body
                                    needed to compute the pseudo value for each
                                    event.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>pseudoDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the computation that produces
                                    the value for the pseudo parameter
                                    <parameter>name</parameter>.  The
                                    parameter is still defind and a new
                                    <methodname>pseudoCreate</methodname>
                                    method call can specify it.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>sread</methodname>
                                  <methodparam>
                                      <type></type><parameter>filename</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>options</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Reads one spectrum from the file
                                    <parameter>filename</parameter>.  What is done
                                    with that spectrum depeds on the
                                    (potentially empty) dict
                                    <parameter>options</parameter>.
                                    Note that in SpecTcl normally a file descriptor
                                    can be used as the source of the file, this cannot
                                    be acommplished in the client.  See, however,
                                    <methodname>command</methodname>.
                                   </para>
                                   <para>
                                    THe <parameter>options</parameter> dict
                                    can have the following keys; all of which
                                    have reasonable defaults:
                                   </para>
                                   <variablelist>
                                    <varlistentry>
                                       <term><literal>format</literal></term>
                                       <listitem>
                                           <para>
                                            Format of the data file.  Defaults to
                                            <literal>ascii</literal>.  The set
                                            of formats is extensible, however
                                            the built in formats are
                                            <literal>ascii</literal> and
                                            <literal>binary</literal>.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>snapshot</literal></term>
                                       <listitem>
                                           <para>
                                            Boolean that, if 1, (the default)
                                            does not attempt to hook the histogram
                                            read in to the histogrammer but, instead,
                                            creates a snapshot (frozen) spectrum.
                                            If 0, the spectrum will, if possible,
                                            be hooked to the histogrammer and increment
                                            as additional data are processed.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>replace</literal></term>
                                       <listitem>
                                           <para>
                                            If nonzero, and a spectrum with the
                                            name specified in the file exists, the
                                            existing spectrum is replaced.  If
                                            zero, the default, a new spectrum name will
                                            be derived.
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                    <varlistentry>
                                       <term><literal>bind</literal></term>
                                       <listitem>
                                           <para>
                                            If nonzero (the default), the
                                            spectrum will be bound into display
                                            memory.  If zero, it will not
                                            (it can be later bound of course).
                                           </para>
                                        </listitem>
                                    </varlistentry>
                                   </variablelist>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>swrite</methodname>
                                  <methodparam>
                                      <type></type><parameter>filename</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>spectra</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>format</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Write the spectra named in
                                    <parameter>spectra</parameter> to file
                                    named by <parameter>filename</parameter>.
                                    The <parameter>format</parameter> parameter
                                    specifies the file format and defaults to
                                    <literal>ascii</literal> if not supplied.
                                    SpecTcl has two built in spectrum
                                    file formats; <literal>ascii</literal>, which
                                    is most commonly used and
                                    <literal>binary</literal>, which hardly
                                    anyone uses.  Additionally the SpecTcl file format
                                    can be extended at the C++ level.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>shmkey</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the key of the SYSV shared memory
                                    region
                                    that SpecTcl is using for display  memory.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>shmsize</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the number of
                                    <varname>DisplayMegabytes</varname>
                                    used by SpecTcl for its shared memory region.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>version</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the SpecTcl version as a dict
                                    containing the keys
                                    <literal>major</literal>,
                                    <literal>minor</literal> and
                                    <literal>editlevel</literal>
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeCreate</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>parameterPatterns</parameter>
                                  </methodparam>
                                  <methodparam>
                                      <type></type><parameter>gate</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Note that this requires the
                                    <literal>rootinterface</literal> package be
                                    pulled into SpecTcl.  Creates a new Root
                                    tree that gets populated by successive data
                                    and written to file.
                                   </para>
                                   <para>
                                    Root Trees are similar to SpecTcl Filters but
                                    have the format of CERN Root trees and are
                                    aware of changes in run state.
                                   </para>
                                   <para>
                                    <parameter>name</parameter> is the name of the
                                    root tree.  <parameter>parameterPatterns</parameter>
                                    specifies a set of patterns that determine the
                                    parameters that are written to the tree.
                                    Finally, if supplied, <parameter>gate</parameter>
                                    specifies the name of a gate. Only events that
                                    pass the gate get added to the file.
                                   </para>
                                   <para>
                                    Note that the <parameter>parameterPatterns</parameter>
                                    is applied statically.  That is if subsequently
                                    a new parameter is created that matches one
                                    of the patterns, it is not added to the tree.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeDelete</methodname>
                                  <methodparam>
                                      <type></type><parameter>name</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Deletes the root tree <parameter>name</parameter>.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>rootTreeList</methodname>
                                  <methodparam>
                                      <type></type><parameter>pattern</parameter>
                                      <modifier>(optional)</modifier>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Lists the properties of trees who's name
                                    matches <parameter>pattern</parameter>.
                                    If that <parameter>pattern</parameter>
                                    is not provided, it defaults to
                                    <literal>*</literal> matching all trees.
                                   </para>
                                   <para>
                                    The returned value is a list of dicts. Each
                                    dict describes a tree using the keys
                                    <literal>tree</literal> - the name of the
                                    tree, <literal>parameters</literal> the
                                    list of parameter patterns and
                                    <literal>gate</literal> the gate (could
                                    be an empty string).
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>command</methodname>
                                  <methodparam>
                                      <type></type><parameter>script</parameter>
                                  </methodparam>
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Executes an arbitrary command,
                                    <parameter>script</parameter> in the
                                    SpecTcl server.   This allows for access
                                    to user defined commands and other client needs
                                    that have not been foreseen.
                                   </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                               <term><methodsynopsis>
                                  <type></type>
                                  <methodname>getVars</methodname>
                                  <void />
                               </methodsynopsis></term>
                               <listitem>
                                   <para>
                                    Returns the values of some variables
                                    maintained by the server.  The result is
                                    a dict whose keys are the names of those
                                    variables and whose values are the values of
                                    the variable specified in the key.
                                   </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </refsect2>

                </refsect1>
                <refsect1>
                    <title>OMISSIONS</title>
                    <para>
                        There is no REST access to the
                        <command>rootexec</command> command as the most common
                        use case is to pop up a <classname>TBrowser</classname>
                        to allow ROOT interaction with the spectrum data and,
                        that could only pop up on any X-11 DISPLAY connection
                        of the SpecTcl server, not the client.
                    </para>
                </refsect1>
            </refentry>
            <refentry>
               <refmeta>
                  <refentrytitle>SpecTclRestCommand</refentrytitle>
                  <manvolnum>3spectcl</manvolnum>
               </refmeta>
               <refnamediv>
                  <refname>SpecTclRestCommand</refname>
                  <refpurpose>3spectcl</refpurpose>
                </refnamediv>
                <refsynopsisdiv>
                    <programlisting>
package require SpecTclRestCommand

SpecTclRestCommand::initialize spectcl-host spectcl-port
                    </programlisting>
                </refsynopsisdiv>
                <refsect1>
                         <title>DESCRIPTION</title>
                      <para>
                        This package, which is in the <filename>TclLibs</filename>
                        directory tree of the SpecTcl installation beginning
                        with SpecTcl 5.5, provides most of the SpecTcl commands
                        in terms of the SpecTcl REST client interface.  The
                        intent is to allow existing SpecTcl Graphical User
                        interfaces to run as REST clients should SpecTcl
                        be run "headless" under the NSCLDAQ  manager.
                      </para>
                      <para>
                        Assuming the GUI makes use of none of the
                        unimplemented features described in
                        <literal>DIFFERENCES</literal> below, the only requirements
                        are that a framing script be run that
                      </para>
                      <orderedlist>
                        <listitem>
                           <para>
                              Includes the package via
                              <command>package require</command> as
                              shown in the synopsis (note that this, in turn
                              will require that the SpecTcl
                              <filename>TcLLibs</filename> directory be
                              included in the package search path).
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              Initialize access to the REST interface by
                              invoking
                              <command>SpecTclRestCommand::initilialize</command>.
                              This command takes, as parameters, the host on which
                              the SpecTcl providing the REST interface and
                              the port on which that REST interface is listening
                              for connections.
                           </para>
                        </listitem>
                      </orderedlist>
                      <para>
                        While not strictly necessary, the REST client used
                        can be destroyed by calling
                        <command>SpecTclRestCommand::shutdown</command>,
                        which takes no command parameters.  One use case for this
                        is an application which interacts with more than one
                        SpecTcl REST server through this package.  Such an
                        application can invoke
                        <command>SpecTclRestCommand::shutdown</command> followed
                        by <command>SpecTclRestCommand::initialize</command>
                        to switch REST servers.
                      </para>
                      <para>
                        Note, as is usual for REST clients, no persistent
                        connection is formed with the server.  The client
                        forms a connection for each command and closes that
                        connection once the server has returned any information
                        that command returns.
                      </para>
                </refsect1>
                <refsect1>
                    <title>DIFFERENCES</title>
                    <para>
                        The command implemented are not 100% compatible with
                        SpecTcl.  This section describes the differences
                        between the native command set and the
                        commands provided by this package.
                    </para>
                    <formalpara>
                        <title>Additions</title>
                        <para>
                            The need to initialize and the ability to
                            shutdown REST access have been documented in
                            <literal>DESCRIPTION</literal>  above.
                        </para>
                    </formalpara>
                    <para>
                        An additional command
                        <command>execCommand</command> passes its single argument
                        as a command string to be  executed by the
                        SpecTcl Tcl interpreter.  One use case for this is
                        to open a file and obtain its file discriptor for
                        later use with, e.g. <command>sread</command> or
                        <command>swrite</command>.  A second use is to
                        form the basis of user written facades to support any
                        commands that have been added to SpecTcl.
                        Finally, it's possible to use this command to reduce
                        the number of requests needed to perform,
                        what otherwise might be, time consuming requests.
                    </para>
                    <para>
                        <command>execCommand</command> returns any
                        result the requested command might return.
                    </para>
                    <para>
                        SpectTcl maintains several global variables that user
                        interfaces may depend on. Two commands are provided to
                        maintain the same variables in the client side.
                        The <command>execCommand</command> interface can be used
                        by authors of client software to maintain additional variables.
                    </para>
                    <para>
                        <command>updateVariables</command> fetches the contents of
                        those variables and updates  identically named
                        client side global variables
                        with their values.
                    </para>
                    <para>
                        <command>maintainVariables</command> requires the services
                        of the event loop.  It periodically runs
                        <command>updateVariables</command>.  Its single
                        command line parameter is the number of seconds between
                        update requests.  Note that the REST server is written
                        so that a single client request updates all variables.
                    </para>
                    <para>
                        Here is a list of the variables that
                        <command>updateVariables</command> will update:
                    </para>
                    <variablelist>
                        <varlistentry>
                           <term><varname>DisplayMegabytes</varname></term>
                           <listitem>
                               <para>
                                The number of megabytes of display shared
                                memory requested (normally modified from
                                the defaut in <filename>SpecTclInit.tcl</filename>)
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><varname>Statistics</varname></term>
                           <listitem>
                               <para>
                                Array containing some SpecTcl statistics.  The
                                indices of this array are:
                               </para>
                               <variablelist>
                                <varlistentry>
                                   <term>EventsAccepted</term>
                                   <listitem>
                                       <para>
                                        Number of events accepted by the
                                        event processing pipeline (that is
                                        the number that returned
                                        <literal>kfTRUE</literal>).
                                       </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                   <term>EventsAcceptedThisRun</term>
                                   <listitem>
                                       <para>
                                        Number of events that were accepted
                                        since the most recent begin run.
                                       </para>
                                    </listitem>
                                </varlistentry>
                               </variablelist>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>OnlineState</literal></term>
                           <listitem>
                               <para>
                                Online state of the program.  I believe this is
                                set nonzero by some scripts that use
                                <command>attach -pipe</command> to attach to
                                the NSCLDAQ data connector.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>EventListSize</literal></term>
                           <listitem>
                               <para>
                                Number of events batched up by the event processing
                                pipline for processing by the analysis (histogramming)
                                pipeline.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>ParameterCount</literal></term>
                           <listitem>
                               <para>
                                Initial size of the <classname>CEvent</classname>
                                'arrays' when they are created.  Note they expand
                                as needed and are recycled so this parameter is
                                less critical than it used to be.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>SpecTclHome</literal></term>
                           <listitem>
                               <para>
                                The top level directory of the SpecTcl installation
                                the server was built against.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>LastSequence</literal></term>
                           <listitem>
                               <para>
                                For NSCLDAQ-8 and earlier data this is the
                                sequence number of the most recent buffer
                                of data seen.  For NSCLDAQ-10 and later this is
                                filled in from trigger statistics
                                ring items to be
                                the number of event triggered ring items that
                                were produced as of the last trigger statistics
                                ring item.  This is used by some GUIs to
                                compute the approximate fraction of data
                                SpecTcl has analyzed.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>RunNumber</literal></term>
                           <listitem>
                               <para>
                                For data acquisition systems that have a run
                                number that can be extracted from their
                                data, this is the run number of the data source
                                most recently opened.  Note that if SpecTcl
                                is attached to an online data source this may
                                not update until the beginning of the next run.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>RunState</literal></term>
                           <listitem>
                               <para>
                                This is the state of any current run that's being
                                analyzed.  It's most useful when analyzing
                                online data.  It can take the values:
                                <literal>Active</literal>, <literal>Halted</literal>,
                                and <literal>Paused</literal>.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>DisplayType</literal></term>
                           <listitem>
                               <para>
                                Type of displayer used by SpecTcl.
                                This is taken from the <filename>SpecTclInit.tcl</filename>
                                file unless the default <literal>xamine</literal>
                                is not overidden.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>BuffersAnalyzed</literal></term>
                           <listitem>
                               <para>
                                For NSCLDAQ 8 and earlier this is the number of
                                buffers SpecTcl has analyzed.  For NSCLDAQ11, this is
                                the number of physics event ring items that have
                                been analyzed.  Ths, in conjunction with
                                <literal>LastSequence</literal> are used by
                                GUIs to compute the fraction of the data
                                SpecTcl has analyzed in the online environment.
                                Note that there are no longer any online NSCLDAQ-8
                                systems.
                               </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                           <term><literal>RunTitle</literal></term>
                           <listitem>
                               <para>
                                For data from DAQ systems with titles associated
                                with their runs, this is the title of the most
                                recently attached data source.
                               </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                    <formalpara>
                        <title>Omissions</title>
                        <para>
                            There are command features that have not
                            been fully implemented.  In most cases these
                            are not heavily used commands or features.
                            If one or more of these causes problems, please
                            report your needs.
                        </para>
                    </formalpara>
                    <itemizedlist>
                        <listitem>
                           <para>
                              The <command>rootexec</command> is not supported
                              because normally this is used to access the
                              graphical user interface of Root (e.g. pop up
                              a <classname>TBrowser</classname>), and REST
                              server SpecTcl's may not have access to a
                              display.
                           </para>
                           <para>
                            Note that the <command>execommand</command>
                            can be used if you need to run a macro that does not
                            require Root's graphics.
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              <command>gate -list</command>'s
                              <option>-byid</option> option is not implemented.
                           </para>
                        </listitem>
                        
                        <listitem>
                           <para>
                              <command>gate ?-new?</command>, gate creation, does
                              support the creation of
                              <literal>T</literal> or <literal>F</literal>
                              gates.
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              <command>parameter -list</command>
                              <option>-byid</option> is not supported.
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              <command>parameter -delete</command>
                              <option>-id</option> is not supported.
                           </para>
                        </listitem>
                        
                        <listitem>
                           <para>
                               <command>spectrum -list</command>  does not
                               implement the <option>-byid</option> and
                               the <option>-id</option>  options.
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              <command>spectrum -delete</command>
                              does not implement the <option>-id</option>
                              option.
                           </para>
                        </listitem>
                        <listitem>
                           <para>
                              <command>unbind</command>  does not implement
                              passing a list of Xamine mapping ids
                              (xids) to be unbound.
                           </para>
                        </listitem>
                    </itemizedlist>
                    <refsect2>
                        <title>Tracing implementation</title>
                        <para>
                            The SpecTcl command set provides scripts with the
                            ability to establish and remove traces which invoke
                            scripts when significant events occur in the parameter,
                            spectrum and gate dictionaries.  This section provide
                            implementation note on the implementation of traces
                            in this package.
                        </para>
                        <para>
                            The idea of traces is not well supported by REST.
                            Specifically, the expectation of REST is that the client
                            drives all interaction between client and server via
                            explicit HTTP requests.  A direct implementation of traces,
                            on the other hand, would require the server to make
                            requests for action on the part of the client for
                            every trace that fired.
                        </para>
                        <para>
                            That leaves implementation of traces to polling on the
                            client's behalf.  Automated polling requires an
                            event loop to dispatch the poll procedure.  In
                            practice, this is is not a restriction as the primary
                            use case of this package and tracing is to maintain
                            a GUI that, in the past, ran directly within
                            SpecTcl itself and Tk scripts, by their nature run
                            the event loop.
                        </para>
                        <para>
                            There are two choices about how to implement trace
                            polling:
                        </para>
                        <itemizedlist>
                            <listitem>
                               <para>
                                  Poll the contents of all of the traced
                                  dictionaries, compute differencese and dispatch
                                  changes based on those differences.
                               </para>
                            </listitem>
                            <listitem>
                               <para>
                                  Provide mechsnisms in the server to buffer
                                  traces themselves and poll the actual
                                  traces.
                               </para>
                            </listitem>
                        </itemizedlist>
                        <para>
                            As there ae SpecTcl cases with thousands of parameters
                            and spectra, the first alternative can be expensive.
                            Therefore SpecTcl's REST server provides the second
                            alternative.  
                        </para>
                        <para>
                            On the first attempt to interact with traces,
                            the <literal>SpecTclRestCommand</literal> package
                            expresses interest in traces to the server, which,
                            begins server side trace buffering.  It also
                            initiates periodic trace polling.  The trace poll
                            proc dispatches appropriate traces to any established
                            trace scripts in a manner that is compatible
                            with what SpecTcl itself provided.
                        </para>
                        <para>
                            This implies that:
                        </para>
                        <itemizedlist>
                            <listitem>
                               <para>
                                  Scripts making use of tracing must enter the
                                  event loop in a manner that allows the
                                  trace polling proc to execute periodically,
                                  or at least significantly more often than the
                                  value of
                                  <varname>::SpecTclRestCommand::tracePollInterval*100</varname>
                                  at the time the first tracing operation was
                                  done by the script.
                               </para>
                            </listitem>
                            <listitem>
                               <para>
                                  There is a latency between the event that
                                  actually would fire the trace and the trace
                                  being fired in the client script.  This
                                  latency is determined by the periodicity of the
                                  polling proc which, by default is executed
                                  <literal>2</literal> seconds.  The number of
                                  seconds between polls is determined by the
                                  variable
                                  <varname>::SpecTclRestCommand::tracePollInterval</varname>.
                               </para>
                               <para>
                                Scripts can set this variable but, since its
                                value also determines the server side trace
                                retention period (100*::<varname>SpecTclRestCommand::tracePollInterval</varname>)
                                at the time the first trace operation is performed
                                by the client script), it's recommended to set
                                this value early, during script initialization.
                               </para>
                            </listitem>
                            <listitem>
                               <para>
                                   If a script exits without executing
                                   <function>SpecTclRestCommand::shutdown</function>,
                                   the server will continue to buffer traces
                                   for the script.  Note that normally this is
                                   not an awful problem as the retention period
                                   will prevent the trace buffer from growing
                                   without bounds and at some point, SpecTcl's
                                   parameter, spectrum and gate dictionaries
                                   converge to a final, static state.
                               </para>
                            </listitem>
                        </itemizedlist>
                    </refsect2>
                </refsect1>
            </refentry>
            
        </section>
       
    </chapter>
</book>
