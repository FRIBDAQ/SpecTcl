/*
 * Module code.
 *
 * Generated by SIP 4.16.4 on Tue Dec 17 13:25:15 2019
 */

#include "sipAPICPyConverter.h"

#line 8 "CPyConverter.sip"
#include <CPyConverter.h>
#include <Python.h>
#include <iostream>
#include <vector>
#include <random>
#include <string>
#include <chrono>
#include <dataAccess.h>
#line 19 "./sipCPyConvertercmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_CPyConverter[] = {
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'u', 'n', 's', 'i', 'g', 'n', 'e', 'd', ' ', 'l', 'o', 'n', 'g', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'd', 'o', 'u', 'b', 'l', 'e', '>', 0,
    'v', 'e', 'c', 't', 'o', 'r', 'T', 'o', 'L', 'i', 's', 't', '_', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'f', 'l', 'o', 'a', 't', '>', 0,
    'v', 'e', 'c', 't', 'o', 'r', 'T', 'o', 'L', 'i', 's', 't', '_', 'F', 'l', 'o', 'a', 't', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'l', 'o', 'n', 'g', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'u', 'i', 'n', 't', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'i', 'n', 't', '>', 0,
    'v', 'e', 'c', 't', 'o', 'r', 'T', 'o', 'L', 'i', 's', 't', '_', 'I', 'n', 't', 0,
    'D', 'e', 'b', 'u', 'g', 'F', 'i', 'l', 'l', 'S', 'p', 'e', 'c', 't', 'r', 'a', 0,
    'S', 'h', 'M', 'e', 'm', 'T', 'o', 'N', 'p', 'A', 'r', 'r', 'a', 'y', 0,
    'C', 'P', 'y', 'C', 'o', 'n', 'v', 'e', 'r', 't', 'e', 'r', 0,
    's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', 0,
    'e', 'x', 't', 'r', 'a', 'c', 't', 'I', 'n', 'f', 'o', 0,
    'm', '_', 'n', 'a', 'm', 'e', 's', 0,
    'U', 'p', 'd', 'a', 't', 'e', 0,
    'm', '_', 'm', 'a', 'x', 'y', 0,
    'm', '_', 'm', 'i', 'n', 'y', 0,
    'm', '_', 'b', 'i', 'n', 'y', 0,
    'm', '_', 'm', 'a', 'x', 'x', 0,
    'm', '_', 'm', 'i', 'n', 'x', 0,
    'm', '_', 'b', 'i', 'n', 'x', 0,
    'm', '_', 'd', 'i', 'm', 0,
    'm', '_', 'i', 'd', 0,
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_CPyConverter_CPyConverter.ctd_base,
    &sipTypeDef_CPyConverter_std_string.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_2400.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_2200.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_1800.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_2000.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_0100std_string.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_1900.mtd_base,
    &sipTypeDef_CPyConverter_std_vector_2100.mtd_base,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_CPyConverter = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_CPyConverter,
    0,
    -1,
    sipStrings_CPyConverter,
    NULL,
    NULL,
    9,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_CPyConverter;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_CPyConverter
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initCPyConverter
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "CPyConverter",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_CPyConverter, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_CPyConverter), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_CPyConverter = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_CPyConverter = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_CPyConverter == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_CPyConverter,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_CPyConverter,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}
