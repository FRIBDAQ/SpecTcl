#include "CPyConverter.h"
#include <stdexcept>
#include <sys/shm.h>
#include <sys/stat.h>
#include <cstdint>
#include <iostream>
#include <sstream>
#include "dataRetriever.h"
#include <numpy/arrayobject.h>

bool debug = false;

CPyConverter::CPyConverter()
{}

CPyConverter::~CPyConverter()
{}

void
CPyConverter::extractInfo(char* speclist)
{
  std::stringstream ss;
  int id, dim, binx, biny;
  float minx, miny, maxx, maxy;
  std::string name;
  ss << std::string(speclist);  
  while (!ss.eof() &&
	 (ss >> id >> name >> dim >> binx >> minx >> maxx >> biny >> miny >> maxy)) {
    m_id.push_back(id);
    m_names.push_back(name);
    m_dim.push_back(dim);
    m_binx.push_back(binx);
    m_biny.push_back(biny);
    m_minx.push_back(minx);
    m_miny.push_back(miny);      
    m_maxx.push_back(maxx);
    m_maxy.push_back(maxy);      
  }    
}

PyObject*
CPyConverter::Update()
{
  dataRetriever* d = dataRetriever::getInstance();
  d->InitShMem();
  spec_shared *p = d->GetShMem();

  import_array();
  
  char **speclist;
  int lsize;
  lsize = p->GetSpectrumList(&speclist);

  Address_t addr;
  PyObject* listData = PyList_New(lsize);
  PyObject* tmp;
  
  for (int i = 0; i < lsize; i++){
    extractInfo(speclist[i]);
    addr = p->CreateSpectrum(i);  
    tmp = ShMemToNpArray(addr, m_dim[i], m_binx[i], m_biny[i]);
    PyList_SetItem(listData, i, tmp);
  }
  
  PyObject* pId = vectorToList_Int(m_id);
  PyObject* pName = vectorToList_String(m_names);
  PyObject* pDim = vectorToList_Int(m_dim);
  PyObject* pBinX = vectorToList_Int(m_binx);
  PyObject* pMinX = vectorToList_Float(m_minx);
  PyObject* pMaxX = vectorToList_Float(m_maxx);
  PyObject* pBinY = vectorToList_Int(m_biny);
  PyObject* pMinY = vectorToList_Float(m_miny);
  PyObject* pMaxY = vectorToList_Float(m_maxy);

  PyObject* result = PyTuple_New(10);
  PyTuple_SetItem(result, 0, pId);
  PyTuple_SetItem(result, 1, pName);
  PyTuple_SetItem(result, 2, pDim);  
  PyTuple_SetItem(result, 3, pBinX);
  PyTuple_SetItem(result, 4, pMinX);
  PyTuple_SetItem(result, 5, pMaxX);
  PyTuple_SetItem(result, 6, pBinY);
  PyTuple_SetItem(result, 7, pMinY);
  PyTuple_SetItem(result, 8, pMaxY);
  PyTuple_SetItem(result, 9, listData);  
  
  return result;
}

PyObject*
CPyConverter::ShMemToNpArray(void* addr, int dim, int nbinx, int nbiny)
{
  PyArrayObject* data;

  import_array();

  if (dim == 1){
    npy_intp dims = {nbinx};
    data = (PyArrayObject*)PyArray_SimpleNewFromData(dim, &dims, NPY_INT, addr);
  }
  /*
  else {
    npy_intp dims[size] = {p->getxdim(index), p->getydim(index)};
    //    data = (PyArrayObject*)PyArray_SimpleNewFromData(size, &dims, NPY_INT, addr);    
  }
  */
  return (PyObject*)data;
}

PyObject*
CPyConverter::FillSpectra()
{
  dataRetriever* d = dataRetriever::getInstance();
  d->InitShMem();
  spec_shared *dp = d->GetShMem();

  char **speclist;
  int lsize;
  lsize = dp->GetSpectrumList(&speclist);

  Address_t addr;
  PyArrayObject* data[lsize];
  npy_intp dims[lsize];
  
  for (int i = 0; i < lsize; i++){
    dims[i] = dp->getxdim(i); 
    addr = dp->CreateSpectrum(i);
    data[i] = (PyArrayObject*)PyArray_SimpleNewFromData(1, &dims, NPY_INT, addr);
    //    data[i] = ShMemToNpArray(addr, m_dim[i], m_binx[i], m_biny[i]);
  }
    
  return Py_BuildValue("NN", (PyObject*)data[0], (PyObject*)data[1]);
  
}

PyObject*
CPyConverter::vectorToList_Int(const std::vector<int> &data) {
  PyObject* listObj = PyList_New(data.size() );
  if (!listObj) throw std::logic_error("Unable to allocate memory for Python list");
  for (unsigned int i = 0; i < data.size(); i++) {
    PyObject *num = PyLong_FromLong(data[i]);
    if (!num) {
      Py_DECREF(listObj);
      throw std::logic_error("Unable to allocate memory for Python list");
    }
    PyList_SET_ITEM(listObj, i, num);
  }
  return listObj;
}

PyObject*
CPyConverter::vectorToList_Float(const std::vector<float> &data) {
  PyObject* listObj = PyList_New(data.size() );
  if (!listObj) throw std::logic_error("Unable to allocate memory for Python list");
  for (unsigned int i = 0; i < data.size(); i++) {
    PyObject *num = PyFloat_FromDouble( (double) data[i]);
    if (!num) {
      Py_DECREF(listObj);
      throw std::logic_error("Unable to allocate memory for Python list");
    }
    PyList_SET_ITEM(listObj, i, num);
  }
  return listObj;
}

PyObject*
CPyConverter::vectorToList_String(const std::vector<std::string> &data) {
  PyObject* listObj = PyList_New(data.size() );
  if (!listObj) throw std::logic_error("Unable to allocate memory for Python list");  
  for (unsigned int i = 0; i < data.size(); i++) {
    PyObject* newstring;
    newstring = PyUnicode_DecodeUTF8(data[i].c_str(), data[i].length(), NULL);
    if(newstring == NULL) {
      Py_DECREF(listObj);
      throw std::logic_error("Unable to allocate memory for Python list");      
    }
    PyList_SET_ITEM(listObj, i, newstring);  
  }
  return listObj;
}
