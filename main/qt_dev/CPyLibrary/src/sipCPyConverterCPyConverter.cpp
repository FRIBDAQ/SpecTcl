/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.4 on Tue Dec 17 13:25:15 2019
 */

#include "sipAPICPyConverter.h"

#line 8 "CPyConverter.sip"
#include <CPyConverter.h>
#include <Python.h>
#include <iostream>
#include <vector>
#include <random>
#include <string>
#include <chrono>
#include <dataAccess.h>
#line 19 "./sipCPyConverterCPyConverter.cpp"

#line 343 "CPyConverter.sip"
#include <vector>
#line 23 "./sipCPyConverterCPyConverter.cpp"
#line 285 "CPyConverter.sip"
#include <vector>
#line 26 "./sipCPyConverterCPyConverter.cpp"
#line 619 "CPyConverter.sip"
#include <vector>
#line 29 "./sipCPyConverterCPyConverter.cpp"
#line 684 "CPyConverter.sip"
#include <string>
#line 32 "./sipCPyConverterCPyConverter.cpp"


class sipCPyConverter : public CPyConverter
{
public:
    sipCPyConverter();
    sipCPyConverter(const CPyConverter&);
    ~sipCPyConverter();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipCPyConverter(const sipCPyConverter &);
    sipCPyConverter &operator = (const sipCPyConverter &);
};

sipCPyConverter::sipCPyConverter(): CPyConverter(), sipPySelf(0)
{
}

sipCPyConverter::sipCPyConverter(const CPyConverter& a0): CPyConverter(a0), sipPySelf(0)
{
}

sipCPyConverter::~sipCPyConverter()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_CPyConverter_extractInfo(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_extractInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char* a0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_CPyConverter, &sipCpp, &a0))
        {
            sipCpp->extractInfo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_extractInfo, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_Update(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_Update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_CPyConverter, &sipCpp))
        {
            PyObject * sipRes;

            sipRes = sipCpp->Update();

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_Update, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_ShMemToNpArray(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_ShMemToNpArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        void* a0;
        int a1;
        int a2;
        int a3;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bviii", &sipSelf, sipType_CPyConverter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            PyObject * sipRes;

            sipRes = sipCpp->ShMemToNpArray(a0,a1,a2,a3);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_ShMemToNpArray, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_DebugFillSpectra(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_DebugFillSpectra(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_CPyConverter, &sipCpp))
        {
            PyObject * sipRes;

            sipRes = sipCpp->DebugFillSpectra();

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_DebugFillSpectra, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_vectorToList_Int(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_vectorToList_Int(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<int>* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_vector_1800,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->vectorToList_Int(*a0);
            sipReleaseType(const_cast<std::vector<int> *>(a0),sipType_std_vector_1800,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_vectorToList_Int, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_vectorToList_Float(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_vectorToList_Float(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<float>* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_vector_2200,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->vectorToList_Float(*a0);
            sipReleaseType(const_cast<std::vector<float> *>(a0),sipType_std_vector_2200,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_vectorToList_Float, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_vectorToList_String(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_vectorToList_String(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<std::string>* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_vector_0100std_string,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->vectorToList_String(*a0);
            sipReleaseType(const_cast<std::vector<std::string> *>(a0),sipType_std_vector_0100std_string,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_vectorToList_String, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_CPyConverter(void *, const sipTypeDef *);}
static void *cast_CPyConverter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_CPyConverter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_CPyConverter(void *, int);}
static void release_CPyConverter(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipCPyConverter *>(sipCppV);
    else
        delete reinterpret_cast<CPyConverter *>(sipCppV);
}


extern "C" {static void assign_CPyConverter(void *, SIP_SSIZE_T, const void *);}
static void assign_CPyConverter(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<CPyConverter *>(sipDst)[sipDstIdx] = *reinterpret_cast<const CPyConverter *>(sipSrc);
}


extern "C" {static void *array_CPyConverter(SIP_SSIZE_T);}
static void *array_CPyConverter(SIP_SSIZE_T sipNrElem)
{
    return new CPyConverter[sipNrElem];
}


extern "C" {static void *copy_CPyConverter(const void *, SIP_SSIZE_T);}
static void *copy_CPyConverter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new CPyConverter(reinterpret_cast<const CPyConverter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_CPyConverter(sipSimpleWrapper *);}
static void dealloc_CPyConverter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipCPyConverter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_CPyConverter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_CPyConverter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_CPyConverter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipCPyConverter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipCPyConverter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const CPyConverter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_CPyConverter, &a0))
        {
            sipCpp = new sipCPyConverter(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_CPyConverter[] = {
    {SIP_MLNAME_CAST(sipName_DebugFillSpectra), meth_CPyConverter_DebugFillSpectra, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ShMemToNpArray), meth_CPyConverter_ShMemToNpArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_Update), meth_CPyConverter_Update, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_extractInfo), meth_CPyConverter_extractInfo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_vectorToList_Float), meth_CPyConverter_vectorToList_Float, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_vectorToList_Int), meth_CPyConverter_vectorToList_Int, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_vectorToList_String), meth_CPyConverter_vectorToList_String, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_CPyConverter_m_binx(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_binx(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_binx;

    return sipConvertFromType(sipVal, sipType_std_vector_1800, NULL);
}


extern "C" {static int varset_CPyConverter_m_binx(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_binx(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<int> *>(sipForceConvertToType(sipPy,sipType_std_vector_1800,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_binx = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_1800, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_biny(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_biny(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_biny;

    return sipConvertFromType(sipVal, sipType_std_vector_1800, NULL);
}


extern "C" {static int varset_CPyConverter_m_biny(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_biny(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<int> *>(sipForceConvertToType(sipPy,sipType_std_vector_1800,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_biny = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_1800, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_dim(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_dim(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_dim;

    return sipConvertFromType(sipVal, sipType_std_vector_1800, NULL);
}


extern "C" {static int varset_CPyConverter_m_dim(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_dim(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<int> *>(sipForceConvertToType(sipPy,sipType_std_vector_1800,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_dim = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_1800, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_id(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_id(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_id;

    return sipConvertFromType(sipVal, sipType_std_vector_1800, NULL);
}


extern "C" {static int varset_CPyConverter_m_id(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_id(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<int> *>(sipForceConvertToType(sipPy,sipType_std_vector_1800,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_id = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_1800, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_maxx(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_maxx(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_maxx;

    return sipConvertFromType(sipVal, sipType_std_vector_2200, NULL);
}


extern "C" {static int varset_CPyConverter_m_maxx(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_maxx(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<float> *>(sipForceConvertToType(sipPy,sipType_std_vector_2200,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_maxx = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_2200, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_maxy(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_maxy(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_maxy;

    return sipConvertFromType(sipVal, sipType_std_vector_2200, NULL);
}


extern "C" {static int varset_CPyConverter_m_maxy(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_maxy(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<float> *>(sipForceConvertToType(sipPy,sipType_std_vector_2200,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_maxy = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_2200, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_minx(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_minx(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_minx;

    return sipConvertFromType(sipVal, sipType_std_vector_2200, NULL);
}


extern "C" {static int varset_CPyConverter_m_minx(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_minx(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<float> *>(sipForceConvertToType(sipPy,sipType_std_vector_2200,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_minx = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_2200, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_miny(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_miny(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_miny;

    return sipConvertFromType(sipVal, sipType_std_vector_2200, NULL);
}


extern "C" {static int varset_CPyConverter_m_miny(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_miny(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<float>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<float> *>(sipForceConvertToType(sipPy,sipType_std_vector_2200,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_miny = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_2200, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_CPyConverter_m_names(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_names(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<std::string>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_names;

    return sipConvertFromType(sipVal, sipType_std_vector_0100std_string, NULL);
}


extern "C" {static int varset_CPyConverter_m_names(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_names(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<std::string>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<std::string> *>(sipForceConvertToType(sipPy,sipType_std_vector_0100std_string,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_names = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_0100std_string, sipValState);

    return 0;
}

sipVariableDef variables_CPyConverter[] = {
    {InstanceVariable, sipName_m_binx, (PyMethodDef *)varget_CPyConverter_m_binx, (PyMethodDef *)varset_CPyConverter_m_binx, NULL, NULL},
    {InstanceVariable, sipName_m_biny, (PyMethodDef *)varget_CPyConverter_m_biny, (PyMethodDef *)varset_CPyConverter_m_biny, NULL, NULL},
    {InstanceVariable, sipName_m_dim, (PyMethodDef *)varget_CPyConverter_m_dim, (PyMethodDef *)varset_CPyConverter_m_dim, NULL, NULL},
    {InstanceVariable, sipName_m_id, (PyMethodDef *)varget_CPyConverter_m_id, (PyMethodDef *)varset_CPyConverter_m_id, NULL, NULL},
    {InstanceVariable, sipName_m_maxx, (PyMethodDef *)varget_CPyConverter_m_maxx, (PyMethodDef *)varset_CPyConverter_m_maxx, NULL, NULL},
    {InstanceVariable, sipName_m_maxy, (PyMethodDef *)varget_CPyConverter_m_maxy, (PyMethodDef *)varset_CPyConverter_m_maxy, NULL, NULL},
    {InstanceVariable, sipName_m_minx, (PyMethodDef *)varget_CPyConverter_m_minx, (PyMethodDef *)varset_CPyConverter_m_minx, NULL, NULL},
    {InstanceVariable, sipName_m_miny, (PyMethodDef *)varget_CPyConverter_m_miny, (PyMethodDef *)varset_CPyConverter_m_miny, NULL, NULL},
    {InstanceVariable, sipName_m_names, (PyMethodDef *)varget_CPyConverter_m_names, (PyMethodDef *)varset_CPyConverter_m_names, NULL, NULL},
};


sipClassTypeDef sipTypeDef_CPyConverter_CPyConverter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_CPyConverter,
        {0}
    },
    {
        sipNameNr_CPyConverter,
        {0, 0, 1},
        7, methods_CPyConverter,
        0, 0,
        9, variables_CPyConverter,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_CPyConverter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_CPyConverter,
    assign_CPyConverter,
    array_CPyConverter,
    copy_CPyConverter,
    release_CPyConverter,
    cast_CPyConverter,
    0,
    0,
    0,
    0,
    0,
    0
};
