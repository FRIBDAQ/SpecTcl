/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.4 on Fri Dec  6 15:49:47 2019
 */

#include "sipAPICPyConverter.h"

#line 603 "CPyConverter.sip"
#include <vector>
#line 12 "./sipCPyConverterstdvector2600.cpp"



extern "C" {static void assign_std_vector_2600(void *, SIP_SSIZE_T, const void *);}
static void assign_std_vector_2600(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::vector<bool> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::vector<bool> *>(sipSrc);
}


extern "C" {static void *array_std_vector_2600(SIP_SSIZE_T);}
static void *array_std_vector_2600(SIP_SSIZE_T sipNrElem)
{
    return new std::vector<bool>[sipNrElem];
}


extern "C" {static void *copy_std_vector_2600(const void *, SIP_SSIZE_T);}
static void *copy_std_vector_2600(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::vector<bool>(reinterpret_cast<const std::vector<bool> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_vector_2600(void *, int);}
static void release_std_vector_2600(void *ptr, int)
{
    delete reinterpret_cast<std::vector<bool> *>(ptr);
}



extern "C" {static int convertTo_std_vector_2600(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_vector_2600(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::vector<bool> **sipCppPtr = reinterpret_cast<std::vector<bool> **>(sipCppPtrV);

#line 627 "CPyConverter.sip"
  // Check if type is compatible
  if (sipIsErr == NULL) {
    if (!PyList_Check(sipPy)) {
      return 0;
    }
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
      PyObject *item = PyList_GET_ITEM(sipPy, i);
      if (!PyBool_Check(item)) {
        //printErrorMessage("TypeError : object in list of type " + std::string(item->ob_type->tp_name) + " can not be converted to bool");
        return 0;
      }
    }
    return 1;
  }

  // Convert Python list of booleans to a std::vector<bool>
  std::vector<bool> *v = new std::vector<bool>();
  for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
    v->push_back(PyList_GET_ITEM(sipPy, i) == Py_True);
  }

  *sipCppPtr = v;
  return sipGetState(sipTransferObj);
#line 75 "./sipCPyConverterstdvector2600.cpp"
}


extern "C" {static PyObject *convertFrom_std_vector_2600(void *, PyObject *);}
static PyObject *convertFrom_std_vector_2600(void *sipCppV, PyObject *)
{
   std::vector<bool> *sipCpp = reinterpret_cast<std::vector<bool> *>(sipCppV);

#line 607 "CPyConverter.sip"
  PyObject *l;

  // Create the Python list of the correct length.
  if ((l = PyList_New(sipCpp -> size())) == NULL) {
    return NULL;
  }

  // Go through each element in the C++ instance and convert it to a
  // wrapped object.
  int i = 0;
  for (std::vector<bool>::iterator iter = sipCpp->begin(); iter != sipCpp->end(); ++iter) {
    // Add the wrapper to the list.
    PyList_SET_ITEM(l, i, PyBool_FromLong(*iter));
  }

  // Return the Python list.
  return l;
#line 102 "./sipCPyConverterstdvector2600.cpp"
}


sipMappedTypeDef sipTypeDef_CPyConverter_std_vector_2600 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_85,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_vector_2600,
    array_std_vector_2600,
    copy_std_vector_2600,
    release_std_vector_2600,
    convertTo_std_vector_2600,
    convertFrom_std_vector_2600
};
