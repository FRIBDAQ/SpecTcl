/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.4 on Fri Dec  6 15:49:47 2019
 */

#include "sipAPICPyConverter.h"

#line 8 "CPyConverter.sip"
#include <CPyConverter.h>
#include <Python.h>
#include <iostream>
#include <vector>
#include <random>
#include <chrono>
#line 17 "./sipCPyConverterCPyConverter.cpp"

#line 327 "CPyConverter.sip"
#include <vector>
#line 21 "./sipCPyConverterCPyConverter.cpp"
#line 269 "CPyConverter.sip"
#include <vector>
#line 24 "./sipCPyConverterCPyConverter.cpp"
#line 661 "CPyConverter.sip"
#include <string>
#line 27 "./sipCPyConverterCPyConverter.cpp"


class sipCPyConverter : public CPyConverter
{
public:
    sipCPyConverter();
    sipCPyConverter(const CPyConverter&);
    ~sipCPyConverter();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipCPyConverter(const sipCPyConverter &);
    sipCPyConverter &operator = (const sipCPyConverter &);
};

sipCPyConverter::sipCPyConverter(): CPyConverter(), sipPySelf(0)
{
}

sipCPyConverter::sipCPyConverter(const CPyConverter& a0): CPyConverter(a0), sipPySelf(0)
{
}

sipCPyConverter::~sipCPyConverter()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_CPyConverter_print(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_print(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_CPyConverter, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->print());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_print, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_getRandomNumber(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_getRandomNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->getRandomNumber(*a0);
            sipReleaseType(a0,sipType_std_string,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_getRandomNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_generate(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_generate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string* a0;
        int a0State = 0;
        int a1;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_string,&a0, &a0State, &a1))
        {
            PyObject * sipRes;

            sipRes = sipCpp->generate(*a0,a1);
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_generate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_vectorToList_Float(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_vectorToList_Float(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<float>* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_vector_2200,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->vectorToList_Float(*a0);
            sipReleaseType(const_cast<std::vector<float> *>(a0),sipType_std_vector_2200,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_vectorToList_Float, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_CPyConverter_vectorToList_Int(PyObject *, PyObject *);}
static PyObject *meth_CPyConverter_vectorToList_Int(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<int>* a0;
        int a0State = 0;
        CPyConverter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_CPyConverter, &sipCpp, sipType_std_vector_1800,&a0, &a0State))
        {
            PyObject * sipRes;

            sipRes = sipCpp->vectorToList_Int(*a0);
            sipReleaseType(const_cast<std::vector<int> *>(a0),sipType_std_vector_1800,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_CPyConverter, sipName_vectorToList_Int, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_CPyConverter(void *, const sipTypeDef *);}
static void *cast_CPyConverter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_CPyConverter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_CPyConverter(void *, int);}
static void release_CPyConverter(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipCPyConverter *>(sipCppV);
    else
        delete reinterpret_cast<CPyConverter *>(sipCppV);
}


extern "C" {static void assign_CPyConverter(void *, SIP_SSIZE_T, const void *);}
static void assign_CPyConverter(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<CPyConverter *>(sipDst)[sipDstIdx] = *reinterpret_cast<const CPyConverter *>(sipSrc);
}


extern "C" {static void *array_CPyConverter(SIP_SSIZE_T);}
static void *array_CPyConverter(SIP_SSIZE_T sipNrElem)
{
    return new CPyConverter[sipNrElem];
}


extern "C" {static void *copy_CPyConverter(const void *, SIP_SSIZE_T);}
static void *copy_CPyConverter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new CPyConverter(reinterpret_cast<const CPyConverter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_CPyConverter(sipSimpleWrapper *);}
static void dealloc_CPyConverter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipCPyConverter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_CPyConverter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_CPyConverter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_CPyConverter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipCPyConverter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipCPyConverter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const CPyConverter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_CPyConverter, &a0))
        {
            sipCpp = new sipCPyConverter(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_CPyConverter[] = {
    {SIP_MLNAME_CAST(sipName_generate), meth_CPyConverter_generate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRandomNumber), meth_CPyConverter_getRandomNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_print), meth_CPyConverter_print, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_vectorToList_Float), meth_CPyConverter_vectorToList_Float, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_vectorToList_Int), meth_CPyConverter_vectorToList_Int, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_CPyConverter_m_v(void *, PyObject *, PyObject *);}
static PyObject *varget_CPyConverter_m_v(void *sipSelf, PyObject *, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    sipVal = &sipCpp->m_v;

    return sipConvertFromType(sipVal, sipType_std_vector_1800, NULL);
}


extern "C" {static int varset_CPyConverter_m_v(void *, PyObject *, PyObject *);}
static int varset_CPyConverter_m_v(void *sipSelf, PyObject *sipPy, PyObject *)
{
    std::vector<int>*sipVal;
    CPyConverter *sipCpp = reinterpret_cast<CPyConverter *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<std::vector<int> *>(sipForceConvertToType(sipPy,sipType_std_vector_1800,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_v = *sipVal;

    sipReleaseType(sipVal, sipType_std_vector_1800, sipValState);

    return 0;
}

sipVariableDef variables_CPyConverter[] = {
    {InstanceVariable, sipName_m_v, (PyMethodDef *)varget_CPyConverter_m_v, (PyMethodDef *)varset_CPyConverter_m_v, NULL, NULL},
};


sipClassTypeDef sipTypeDef_CPyConverter_CPyConverter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_CPyConverter,
        {0}
    },
    {
        sipNameNr_CPyConverter,
        {0, 0, 1},
        5, methods_CPyConverter,
        0, 0,
        1, variables_CPyConverter,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_CPyConverter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_CPyConverter,
    assign_CPyConverter,
    array_CPyConverter,
    copy_CPyConverter,
    release_CPyConverter,
    cast_CPyConverter,
    0,
    0,
    0,
    0,
    0,
    0
};
