<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"
>
<book>
   <bookinfo>
      <title>SpecTcl Root ntuple plugin</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>February 5, 2008</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
      </revhistory>
   </bookinfo>
   
<chapter>
    <title>Introduction</title>
    <para>
        Many users of <application>SpecTcl</application> have various
        ad-hoc methods to move NSCL event data into Root.  The
        Root ntuple plugin hooks into the SpecTcl filter mechanism
        and supplies a generalized scheme for migrating pre-sorted data
        from any data that SpecTcl can analyze to Root ntuple files.
    </para>
    <para>
        This plugin has the following pre-requisites:
        <orderedlist>
            <listitem>
                <para>
                    Installation of SpecTcl-3.2 or later (no pre-releases
                    of 3.2).
                </para>
            </listitem>
            <listitem>
                <para>
                    Installation of Root.  The plugin has been tested with
                    Root 5.14 but should work with almost any version of Root.
                </para>
            </listitem>
        </orderedlist>
    </para>
    <para>
        The remainder of this document:
        <itemizedlist>
            <listitem>
                <para>Describes how to configure and install the plugin</para>
            </listitem>
            <listitem>
                <para>Describes how to load and use the plugin.</para>
            </listitem>
            <listitem>
                <para>Provides an appendix that provides a sample extension
                    to the folder Gui that allows you to specify filter formats
                    for inactive filters.
                </para>
            </listitem>
        </itemizedlist>
    </para>
</chapter>

<chapter>
    <title>Installation</title>
    <para>
        While the plugin can be installed anywhere, I recommend installing it
        in the SpecTcl installation directory.  This makes loading it easier.
        The plugin is installed by following the usual two step
        <command>configure</command> and <command>make install</command>
        procedure used by most Unix/Linux open source software.
    </para>
    <para>
        The <command>configure</command> script configures the Makefiles
        for build and installation.  It accepts the followign switches that
        are specific to the plugin:
    </para>
    <variablelist>
        <varlistentry>
            <term><option>--help</option></term>
            <listitem>
                <para>Prints out exhaustive help describing the options and
                    variables recognized by the <command>configure</command>
                    script.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--prefix</option>=<replaceable>path</replaceable></term>
            <listitem>
                <para>
                    <replaceable>path</replaceable> is the top leve directory
                    for the installation tree for the plugin.  The plugin
                    itself is installed in the <filename>TclLibs</filename>
                    subdirectory of this tree and has the name
                    <filename>librootfilterformat.so</filename>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--with-tcl-header-dir</option>=<replaceable>path</replaceable></term>
            <listitem>
                <para>
                    The configure script searches for <filename>tcl.h</filename> in the
                    most likely places.  If it reports it is not able to find it,
                    you can tell configure where it actually lives by supplying the
                    <replaceable>path</replaceable> parameter to this option.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--with-spectcl-home</option>=<replaceable>path</replaceable></term>
            <listitem>
                <para>
                    The plugin must link to the SpecTcl libraries.  By default,
                    these are assumed to be located in the same directory tree
                    as the one specified by the <option>--prefix</option> option.
                    If, however you choose to install the plugin elsewhere,
                    you must specify this option and <replaceable>path</replaceable>
                    to be the path to the top level directory of the SpecTcl installation.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--with-rootsys</option>=<replaceable>path</replaceable></term>
            <listitem>
                <para>
                    The plugin must also link to the Root libraries.  These
                    libraries cannot be automatically located; ther is a wide
                    variation in where they are installed from system to system.
                    Specify this option with the <replaceable>path</replaceable>
                    argument specifying the value you would specify for the
                    <varname>ROOTSYS</varname> environment variable when using
                    Root.
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
    <example>
        <title>Building at the NSCL</title>
        <programlisting>
./configure --prefix=/usr/opt/spectcl/3.2 --with-rootsys=/opt/etch/root/root5.16
...
make install
        </programlisting>
    </example>
</chapter>
<chapter>
    <title>Usage</title>
    <para>
        This chapter describes how to use the plugin. Specifically:
        <itemizedlist>
            <listitem>
                <para>How to load the plugin</para>
            </listitem>
            <listitem>
                <para>Some background on SpecTcl filters is provided</para>
            </listitem>
            <listitem>
                <para>How to specify that an filter should be written in
                    root ntuple format.
                </para>
            </listitem>
            <listitem>
                <para>
                    What the root ntuple file contains.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <section>
        <title>Loading the plugin</title>
        <para>
            The Tcl <command>load</command> command loads plugin libraries.
            You must specify the path to the plugin library completely.  If
            the plugin has been installed in the SpecTcl installation, you can
            use the <varname>SpecTclHome</varname> variable to shorten the
            path.
        </para>
        <para>
            The plugin will add a format selection to the SpecTcl
            <command>filter -format</command> command.
            The following dialog loads the plugin from the SpecTcl installation
            directory tree and ensures that it has installed correctly.
        </para>
        <example>
            <title>Loading the plugin</title>
            <programlisting>
<prompt>% </prompt><userinput>load $SpecTclHome/TclLibs/librootfilterformat.so</userinput> <co id="load" />
<prompt>% </prompt><userinput>filter</userinput>                                           <co id="ok" />
<computeroutput>Usage:
 filter [-new] filtername gatename {par1 par2 ...}
 filter -delete filtername
 filter -enable filtername
 filter -disable filtername
 filter -regate filtername gatename
 filter -file filename filtername
 filter -list ?glob-pattern?
 filter -format filtername format

filter creates pre-sorted event files

filter formats are: 
xdr        - NSCL XDR system independent filter file format
rootntuple - Root file containing an ntuple named spectcl.</computeroutput>   <co id="format" />

            </programlisting>
        </example>
        <calloutlist>
            <callout arearefs="load">
                <para>
                    This loads the plugin library assuming it was installed
                    in SpecTcl's installation.  The Tcl variable
                    <varname>SpecTclHome</varname> is set by SpecTcl's initialization
                    to be the path to its installation.
                </para>
            </callout>
            <callout arearefs="ok">
                <para>
                    The simplest way to check that the filter loaded correctly
                    is to issue an invalid <command>filter</command> command.
                    Like most SpecTcl commands, <command>filter</command> will then
                    provide usage information.  The <command>filter</command> command's
                    usage text dynamically generates the list of supported output formats
                    from the list of available formats.
                </para>
            </callout>
            <callout arearefs="format">
                <para>
                    The <literal>rootntuple</literal> format is the filter output
                    format that is added by the plugin.  Its presence in the list
                    of available formats indicates the plugin successfully loaded.
                </para>
            </callout>
        </calloutlist>
    </section>
    <section>
        <title>SpecTcl Filters</title>
        <para>
            To use the plugin you need to understand SpecTcl filters.
            A SpecTcl filter cuts the data in two directions:
            <orderedlist>
                <listitem>
                    <para>Only events that satisfy a filter's gate
                        are allowed through the filter and written to the
                        filter output file.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Only the specified subset of SpecTcl parameters are
                        written to the filter output file for events that
                        satisfy the gate.
                    </para>
                </listitem>
            </orderedlist>
            In other words, a filter can produce a subset of parameters from
            a subset of events.
        </para>
        <para>
            To use a filter you must therefore:
            <orderedlist>
                <listitem>
                    <para>
                        Create a gate that will select the events that
                        are written to the output file.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use the <command>filter -new</command> command
                        to create a filter, specifying its name, gate and
                        list of parameters.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Specify the file to which filter data will be written
                        via the <command>filter -file</command> command.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Enable the filter to allow it to write data to file
                        via <command>filter -enable</command> and disable
                        the filter when done writing to a file via
                        <command>filter -disable</command>
                    </para>
                </listitem>
            </orderedlist>
        </para>
    </section>
    <section>
        <title>Specifying filters to output root ntuple files.
        </title>
        <para>
            SpecTcl 3.2 introduced a new subcommand to the <command>filter</command>
            command <command>filter -format</command>, as well as an extensible
            filter output format subsystem.  The original filter file format
            is the default format and is now called <literal>xdr</literal> format.
            The root plugin extends the set of output formats by adding the
            <literal>rootntuple</literal> file format.
        </para>
        <para>
            A filter's output format can be set whenever it is not enabled.
            The <command>filter -format</command> command is used to set
            the format of the next filter file written.
        </para>
        <para>
            The example below shows the command line based creation of a filter
            named root, setting it to write in root ntuple format, selecting
            an output file and enabling the filter to write data.
        </para>
        <example>
            <title>Creating a root n-tuple output filter.</title>
            <programlisting>
<command>
filter root filtergate [list event.raw.00 event.raw.01 event.raw.02]
filter -format root rootntuple
filter -file spectcl.ntuple root
filter -enable root
</command>
            </programlisting>
        </example>
        <para>
            If you are creating the filter with the folder GUI, use the
            filter wizard as you normally do, however create the filter in the
            disabled state.  Once created you can use the
            <command>filter -format</command> command to set the filter format
            to <literal>rootntuple</literal>, and then use the folder GUI to
            subsequently enable the filter.
        </para>
        <para>
            <link linkend="formatgui">The Appendix</link> shows how to
            extend the folder Gui so that you can select the filter format
            for any disabled filter using that GUI.
        </para>
    </section>
    <section>
        <title>Contents of a root ntuple filter.</title>
        <para>
            So you have a filter file in root ntuple format. In order to analyze
            this file with root you need to know what it contains.
            This section describes that.
        </para>
        <para>
            A SpecTcl Root filter file contains a single n-tuple named
            <literal>spectcl</literal>.  The n-tuple contains all events
            SpecTcl analyzed to satisfy the filter gate while the filer was
            enabled to write to this file.
        </para>
        <para>
            The n-tuple parameter names are the same as the names of the SpecTcl
            parameters that were selected for the filter.  In the event a parameter
            was not valid for an event, its slot is filled with a silent
            'Not a Number' or <firstterm>NaN</firstterm> as they are called.
            These 'values' are floating point values that will not be histogrammed,
            and can be deteced via the function <function>isnan</function> or
            <function>fpclassify</function>.
        </para>
    </section>
    

</chapter>

<appendix id="formatgui">
    <title>Sample GUI extensions to specify filter output format.</title>
    <para>
        This section provides a Tcl/Tk script that adds functionality to the
        folder GUI that allows you to set the format of filter files from
        amongst the formats known to SpecTcl at the time.  The code is provided
        in the filter tarball.  This code is sample code and intended for
        instructional purposes.  You may use it freely under the Gnu Public
        License, but it should not be considered as NSCL supported software.
    </para>
    <para>
        The entire gui is part of the distribution tarball, and is the file
        <filename>selectFilterFormat.tcl</filename>.  We are going to present
        this file a bit at a time, rather than just posting a large-ish chunk
        of code.  The script relies on the <application>snit</application>
        Tcl package that is part of the tcllib. snit is an object oriented
        extension to Tcl that also supports the creation of <firstterm>megawidgets</firstterm>.
        A megawidget is a collection of simple widgets that operate to a client script
        as if they were an ordinary Tk widget.
    </para>
    <para>
        The first chunk I'd like to present is the initialization.  Assuming
        that we've created a widget <classname>filterFormat</classname> that
        will display the filters and let you set their formats, the following
        code adds a menu item to the folder GUI's <guimenu>Filter</guimenu>
        which pops up that widget:
    </para>
    <figure>
        <title>Adding a menu entry to the <guimenu>Filter</guimenu> menu</title>
        <programlisting>
proc filterFormatDialog {} {            <co id="createproc" />
    set name .filterformatdialog
    if {![winfo exists  $name]} {       <co id="existsyet" />
	filterFormat $name              <co id="create" />
    }
}

#   Add the dialog to the filter menu:


.topmenu.filter add command -label {Filter Format...} \   <co id="menuadd" />
                            -command [list filterFormatDialog]

        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="createproc">
            <para>
                The <function>filterFormatDialog</function>
                <command>proc</command> will be responsible for
                creating the dialog in response to the user's menu invocation.
            </para>
        </callout>
        <callout arearefs="existsyet">
            <para>
                The widget should only be created if it does not yet exist.
                <command>winfo exists</command> <replaceable>widgetname</replaceable>
                returns a boolean true if <replaceable>widgetname</replaceable> already
                exists.
            </para>
        </callout>
        <callout arearefs="create">
            <para>
                This code actually creates the widget.
            </para>
        </callout>
        <callout arearefs="menuadd">
            <para>
                This line adds a menu item labeled <literal>Filter Format...</literal>
                to the filter menu, which is named <literal>.topmenu.filter</literal>.
                When invoked, the <function>filterFormatDialog</function> proc is
                called to actually create the dialog.
            </para>
        </callout>
    </calloutlist>
    <para>
        Now I'd like to walk through the process of creating the widget.
        There are three code snippets we need to look at.  The first is
        a utility function that produces a list of the filters that are not
        enabled.  This is used to create the list of filters that can have
        their format set. The second snippet is used to list the set of formats
        that are available.  This is used both to provide some documentation
        of the available formats on the dialog as well as to stock a menu of
        possible formats for each filter.  Finally, we want to see the
        construction of the megawidget.
    </para>
    <para>
        The proc below <function>inactiveFilters</function> lists the filters
        that are not enabled.  This is done by obtaining a list of the filter
        descriptions and building a return list of the filters whose state is
        <literal>disabled</literal>.  This  proc is a proc local to the
        filterFormat snit::widget.
    </para>
    <figure>
        <title>Getting a list of disabled filters</title>
        <programlisting>
snit widget:: filterFormat {
...
    proc inactiveFilters {} {
	set filters [filter -list]                 <co id="listfilters" />
	set result [list]
	foreach filter $filters {                  <co id="iteratefilters" />
	    if {[lindex $filter 4] eq "disabled"} { <co id="disabledfilter" />
		lappend result $filter              
	    }
	}
	return $result                             <co id="disabledreturn" />
    }
    ...
}
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="listfilters">
            <para>
                The list filter descriptions is captured in the
                <varname>filters</varname> variable.
            </para>
        </callout>
        <callout arearefs="iteratefilters">
            <para>
                Iterate over the filters in the list.  The variable
                <varname>filter</varname> will contain a single filter
                description.  A filter description may look like this:
                <programlisting>
{afilter test testing.flt {event.raw.00 event.sum event.raw.03} disabled xdr}
                </programlisting>
            </para>
            <para>
                A list that contains in order, the filter name, the gate, the
                output filename, the list of parameters to be written to the
                filter, the state of the filter (<literal>enabled</literal>
                or <literal>disabled</literal>), and the current filter
                format.
            </para>
        </callout>
        <callout arearefs="disabledfilter">
            <para>
                The body of this if is executed if the filter is disabled, and
                adds the filter description as a list element in <varname>result</varname>.
            </para>
        </callout>
        <callout arearefs="disabledreturn">
            <para>
                The (possibly empty) list of disabled filters is returned.
            </para>
        </callout>
    </calloutlist>
    <para>
        The proc <function>filterFormatList</function> obtains the
        the list of filter formats and their descriptions.  It does this by
        processing the output of <command>filter -help</command>, which shown
        below:
    </para>
    <figure>
        <title>Filter help text</title>
        <programlisting>
Usage:
filter [-new] filtername gatename {par1 par2 ...}
filter -delete filtername
filter -enable filtername
filter -disable filtername
filter -regate filtername gatename
filter -file filename filtername
filter -list ?glob-pattern?
filter -format filtername format

filter creates pre-sorted event files

filter formats are:                                          <co id="delimeter" />
xdr        - NSCL XDR system independent filter file format  <co id="aformatdescr" />
...
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="delimeter">
            <para>
                This line is the delimeter between help text and the
                list of known filter formats.
            </para>
        </callout>
        <callout arearefs="aformatdescr">
            <para>
                This is a sample format description.  I make use of the fact
                that the <literal>-</literal> character separates
                the filter format keyword from its description.
            </para>
        </callout>
    </calloutlist>
    <para>
        Here's the code that decodes this text:
    </para>
    <figure>
        <title>Obtaining a list of known filter formats</title>
        <programlisting>
snit::widget filterFormat {
...
    proc filterFormatList {} {          
	
	# Our only handle on this is to anlyze the help text.
	# The lines after the line that reads
	# "filter formats are:"
	# are the descriptions.. with keyword - description.

	catch {filter -help} helpText       <co id="getfilterhelp" />
	
	set helpText [split $helpText "\n"] <co id="filterhelpsplit" />
	set linenum 0
	foreach line $helpText {
	    if {[string trim $line] eq "filter formats are:"} { <co id="delimeterfind" />
		break
	    }
	    incr linenum
	}
	incr linenum;				#  line number of first format.
	set descriptions [lrange $helpText $linenum end]   <co id="descriptionsonly" />
	set result [list]
	foreach line $descriptions {
	    set format [split $line -]
	    set key   [string trim [lindex $format 0]]     <co id="descriptionpieces" />
	    set descr [string trim [lindex $format 1]]

	    lappend result [list $key $descr]
	    
	}
	return $result
	
    }
...
}
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="getfilterhelp">
            <para>
                Since there's not actually a <command>filter -help</command>
                command, and we are relying on filter to give us usage text
                on errors, the command is issued in a catch command to allow
                the script to continue executing, and to capture the error text
                from the command in <varname>helpText</varname>
            </para>
        </callout>
        <callout arearefs="filterhelpsplit">
            <para>
                The help text lines are split into a list, one line per list element.
            </para>
        </callout>
        <callout arearefs="delimeterfind">
            <para>
                The point of this loop is to figure out which line has the
                text just before the format list. In the end,
                <varname>linenum</varname> will be set to the number of the
                line that is the first format description line.
            </para>
        </callout>
        <callout arearefs="descriptionsonly">
            <para>
                This <command>lrange</command> command reduces the set of lines
                to just the format description lines.
            </para>
        </callout>
        <callout arearefs="descriptionpieces">
            <para>
                Each format description is split at the <literal>-</literal> and
                the format keyword and description are stored as a list in the
                final result list.
            </para>
        </callout>
    </calloutlist>
    <para>
        Now let's look at the code that builds the dialog.
        The dialog will be made up of a bunch of labels laid out using the
        <command>grid</command> command.  The top set of labels will
        list the filters.  The filter format will be clickable to pop up
        a menu of formats.  The bottom set of labels will just be a reminder
        of the meanings of each format keyword.
    </para>
    <figure>
        <title>Laying out the widget</title>
        <programlisting>
snit::widget filterFormat {               <co id="snitwidget" />
    hulltype toplevel                     <co id="hulltype"   />
 ...
    
    constructor args {                    <co id="constructor" />

	

	# List the Filters               <co id="filtertitles" />

	label $win.filtertitle -text {Inactive Filters:}
	grid $win.filtertitle -

	label $win.filtername   -text Name
	label $win.filtergate   -text Gate 
	label $win.filterfile   -text File
	label $win.filterfmt    -text Format

	grid $win.filtername   $win.filtergate $win.filterfile $win.filterfmt -sticky w

	set fnum 0

	foreach filter [inactiveFilters] {
	    set name [lindex $filter 0]
	    set gate [lindex $filter 1]
	    set file [lindex $filter 2]
	    set fmt  [lindex $filter 5]

	    label $win.name$fnum -text $name
	    label $win.gate$fnum -text $gate       <co id="filterlist" />
	    label $win.file$fnum -text $file
	    label $win.fmt$fnum  -text $fmt

	    bind $win.fmt$fnum &lt;Button-1$gt;  \      <co id="filterformatmenu" />
                        [mymethod selectFormat $name $win.fmt$fnum %X %Y]

	    grid $win.name$fnum $win.gate$fnum $win.file$fnum $win.fmt$fnum -sticky w

	    incr fnum
	}
	
	# List the known filter formats:

	set formats [filterFormatList]


	label $win.formats -text {Key of filter formats: }   
	grid $win.formats -


	foreach format $formats {
	    set keyword [lindex $format 0]
	    set descr   [lindex $format 1]
            label $win.${keyword}key  -text $keyword  
	    label $win.${keyword}descr  -text $descr   <co id="formatlist" />
	    grid  $win.${keyword}key  $win.${keyword}descr  -sticky w
	    
	}
	# Method to dismiss:

	button $win.dismiss -text {Dismiss} -command [list destroy $self]
	grid $win.dismiss
    }
    ..
}
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="snitwidget">
            <para>
                The <command>snit::widget</command> command creates a megawidget
                class. The name of the class, <classname>filterFormat</classname>
                is the widget name command used to create widgets of this type.
            </para>
        </callout>
        <callout arearefs="hulltype">
            <para>
                Snit megawidgets live in container widgets called <firstterm>hull</firstterm>s.
                The default type of hull widget is a <command>frame</command>.
                Since our widget will be a dialog, we want to be laid out directly
                in a <command>toplevel</command>.  The <command>hulltype</command>
                command determines the type of widget used to contain the
                megawidget.
            </para>
        </callout>
        <callout arearefs="constructor">
            <para>
                The <command>constructor</command> method of a snit widget
                is invoked when the widget is created.  Usually (and this is
                no exception), the constructor creates the widgets that make
                up the megawidget and lays them out in the hull.
            </para>
        </callout>
        <callout arearefs="filtertitles">
            <para>
                The next section of code provides titles for the list of
                inactive filters, and lays them out using the
                <command>grid</command> geometry manager.
            </para>
        </callout>
        <callout arearefs="filterlist">
            <para>
                Having used <command>inactiveFilters</command> already shown
                the descriptions are broken down into their parts, and labels
                built for each part.
            </para>
        </callout>
        <callout arearefs="filterformatmenu">
            <para>
                The <command>bind</command> command here ensures that if the
                user clicks the left mouse button when the pointer is over
                the format type, the proc <command>selectFormat</command> is
                called, which brings up the menu of format choices.
                <literal>%X</literal> and <literal>%Y</literal> are the
                screen coordinates of the pointer which provide a hint about
                where to pop up the menu.  The other parameters are the name of
                the filter, and the name of the label widget that shows the
                current format.  Both will be affected by changes in the format.
            </para>
        </callout>
        <callout arearefs="formatlist">
            <para>
                This section of code produces a list of the supproted formats and
                their descdriptive text as label widgets.
            </para>
        </callout>
    </calloutlist>
    <para>
        When constructed, the final dialog might look something like this:
    </para>
    <figure>
      <title>The filter format dialog</title>
    
      <mediaobject>
        <imageobject>
          <imagedata fileref="selectiondialog.gif" format="GIF" />
        </imageobject>
    
        <imageobject>
          <imagedata fileref="selectiondialog.eps" format="EPS" />
        </imageobject>
      </mediaobject>
    </figure>
    <para>
        The next chunk of code to look at is the <command>method</command>
        that responds to the mouse click on the format of a filter.
        The intent is for that to bring up a menu of radiobutton menu entries
        the user can select the new format type from.
    </para>
    <figure>
        <title>Generating the format menu</title>
        <programlisting>
            ...
    method selectFormat {filter label x y} {          <co id="selectformatparams" />
	
	set name $win.filterformatmenu
	destroy  $name                               <co id="destroyexistingmenu" />

	set formats [filterFormatList]

	# construct the menu:

	menu $name
	$name add command -label $filter -command "" <co id="menutitle" />
	$name add separator
	foreach format $formats {
	    set fname [lindex $format 0]
	    $name add radio -label $fname \
                            -variable ::${selfns}::format \ <co id="formatmenuradio" />
                            -value $fname \
		            -command [mymethod formatSelected $filter $fname  $name $label]
	}
	tk_popup $name $x $y                       <co id="menupopup" />
    }
    ...
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="selectformatparams">
            <para>
                The <function>selectFormat</function> proc takes as parameters
                the name of the filter, the label widget and the screen
                coordinates of the mouse at the time the button was clicked.
            </para>
        </callout>
        <callout arearefs="destroyexistingmenu" >
            <para>
                While it is an error to create an existing widget, it is not an
                error to destroy one that does not already exist.  If the menu
                is already posted (e.g. you click on first one filter's format
                and then on a different filter's format without choosing a
                filter format for the first filter), it will be destroyed prior
                to making this new menu.
            </para>
        </callout>
        <callout arearefs="menutitle">
            <para>
                The name of the filter is placed at the top of the menu
                as a command that does nothing.  The name of the filter is
                separated from the radio buttons by a horizontal line
                <command>separator</command>.
            </para>
        </callout>
        <callout arearefs="formatmenuradio">
            <para>
                For each known format type, a radio button is added.
                The method <methodname>formatSelected</methodname> will
                be called in response to the selection, and is passed
                the filter name, the format name, the menu name and the name
                of the label widget associated with the format of the
                filter.
            </para>
        </callout>
        <callout arearefs="menupopup">
            <para>
                Pops up the menu at or near the mouse position.
            </para>
        </callout>
    </calloutlist>
    <para>
        We now have one last bit of code to look at.  The
        <methodname>formatSelected</methodname> method is called
        when one of the formats is chose from the popup menu:
    </para>
    <figure>
        <title>formatSelected - processing menu selections</title>
        <programlisting>
...
    method formatSelected {filtername formatname menuwidget labelwidget} { <co id="formatselectedargs" />
	filter -format $filtername $formatname
	$labelwidget config -text $formatname
	destroy  $menuwidget
    }
...
        </programlisting>
    </figure>
    <calloutlist>
        <callout arearefs="formatselectedargs">
            <para>
                This method is relatively straightforward once you know what it must
                do and what the method parameters are.  Method parameters are:
                The filter name <parameter>filtername</parameter>,
                <parameter>formatname</parameter> the format keyword selected
                from the popup menu.
                <parameter>menuwidget</parameter> the name of
                the popup menu widget. <parameter>labelwidget</parameter>
                the name of the label widget that indicates the current
                format for the <parameter>filtername</parameter> filter.
            </para>
            <para>
                The method must set the new format for the filter, set
                the new text indicating the current format for the filter,
                and finally destroy the menu so it no longer is visible.
            </para>
        </callout>
    </calloutlist>  
</appendix>

</book>