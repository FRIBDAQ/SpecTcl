#
#   Makefile for scripted spectcl.  Note that the autogenerated
#   stuff above was computed and written by the SpecTcl 
#   installer.  If you move to a different system you may need
#   too adjust these, depending on where SpecTcl and other
#   system components were installed.
#

#
#   Additional libraries that depend on the operating system.
#   These are in names of the form:
#      $(OS)LIBS  where OS is a macro defined and written
#      into the header of this file by the installer.
#       OS is the output of the uname command
#      with illegal characters stripped out.
#
linuxLIBS=-ldl
HPUXLIBS= -L/opt/tcltk/lib              # HPUX not supported...
cygwinLIBS=-lrpc
DarwinLIBS=                             # OS-X.

#
#  Similarly below are additional header dirs. that might be needed
#  by SpecTcl in various operating systems
#
linuxINCS=
HPUXINCS=-I/opt/tcltk/include         # HPUX not supported ....
cygwinINCS=
DarwinINCS=			      # OS-X


#
#   If you want to do performance profiling, uncomment the line
#   below:
#
# PROFILE=-pg

#
#  If you want to turn off debug symbols, comment the line
#  below:
#
DEBUG=-g3			# -g3 supports gprof too.

#
#   We need get headers and libs from the installation and
#   contrib/scripted directories too:
#
INCLUDES+=-I$(INSTDIR)/include \
	  -I$(INSTDIR)/contrib/scripted/include $($(OS)INCS)
LIBDIRS+=-L$(INSTDIR)/lib \
	 -L$(INSTDIR)/contrib/scripted/lib $($(OS)LIBS)

#
#   The full set of libraries and -L's needed to get the
#   scripted SpecTcl link are therefore:
#
LIBS= $(LIBDIRS) -lScripted \
	-lTclGrammerCommands \
	-lSorting -lXplus -lGates -lAnalysis -lEventSource -lSpecio \
	-ltclPlus -lException \
	-lXamine -ltape -lFilter \
	$(LIBFLAGS)              \
	 -lXt -lX11 -lm

#  The final form of the various compilation commands:

CXXCOMPILE=$(CXX) $(INCLUDES) $(DEBUG) $(PROFILE) -c
CCCOMPILE =$(CC)  $(INCLUDES) $(DEBUG) $(PROFILE) -c
LINK      =$(LD)

#
#   The rules below compile from cpp -> o with C++
#                                cc  -> o with C++
#                                cxx -> o with C++
#                                C   -> o with C++
#    You can add to themif you prefer a different
#    extension for C++ files.
#

.cpp.o:
	$(CXXCOMPILE) $<

.cc.o:
	$(CXXCOMPILE) $<

.cxx.o:
	$(CXXCOMPILE) $<

.C.o:
	$(CXXCOMPILE) $<

#   The rule below compiles from .c -> .o with C
#   If you have other C extensions you prefer to use
#   feel free to add them below.
#

.c.o:
	$(CCCOMPILE) $<


#
#  If you are extending the scripted spectcl add you r
#  objects below (space separated and backslash to 
#  continue on the next line if needed.
#
OBJECTS=MySpecTclApp.o

#
#  Now the targets:
#

SpecTcl: $(OBJECTS)			
	$(LINK) -o SpecTcl $(OBJECTS)   \
	$(INSTDIR)/lib/Globals.o        \
	$(LIBS)                         
	echo -n Be sure that both $(INSTDIR)/lib and       
	echo $(INSTDIR)/contrib/scripted/lib are part of 
	echo LD_LIBRARY_PATH

clean:
	rm -f $(OBJECTS) SpecTcl

depend:
	makedepend -Y. *.cpp *.cc *.cxx *.C *.c
# DO NOT DELETE

MySpecTclApp.o: MySpecTclApp.h
