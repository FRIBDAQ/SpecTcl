#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2005.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#     Author:
#             Ron Fox
#            NSCL
#            Michigan State University
#            East Lansing, MI 48824-1321
#

package provide browser 2.0
package require Tk
package require snit
package require img::png


#   browser provides a snit megawidget called "browser" which allows
#   the user to browse SpecTcl objects in a hierarchical manner
#   currently implemented as a ttk::treeview with scrollbars.  The object types that can
#   be browsed include:
#     Spectra
#     Parameters (tree and otherwise)
#     TreeVariables
#     Gates
#
#  Options:
#
#        The following allow the attachment
#        of scripts to the right click of top level folders.
#
#     -spectrumfoldercommand  script
#     -parameterfoldercommand script
#     -variablefoldercommand  script
#     -gatefoldercommand      script
#
#       The following allow the attachment of scripts
#       to double-clicks of spectra, parameters, variablesand gates:
#
#     -spectrumscript        script
#     -parameterscript       script
#     -variablescript        script
#     -gatescript            script
#
#       The following allow the attachment of scripts to right clicks
#       of spectra, parameters, variables and gates:
#
#     -spectrumrightclick    script
#     -parameterrightclick   script
#     -variablerightclick    script
#     -gaterightclick       script
#
#      The following control what is visible in the browser:
#
#      -restrict   {list of toplevel folders to view} (at present this is not dynamic!!).
#      -detail     bool
#      -showcolumns {list of columns to show}         (at presnt this is not dynamic!!).
#      -filtergates script     Run gate defs through script and only display those for which script is true
#      -filterparameters script As for -filtergates but with parameters.
#      -filterspectra script  as for -filtergates but with specrtra.
#
#     Geometric aspects:
#      -width     - Width of the browser window               (at present not dynamic)
#      -treewidth - Width of the tree column of the browser.  (at present not dynamic)
#
#  Each of these categories is represented as a folder whose contents contain the
#  objects of that type.  By convention in SpecTcl/Treeparameter, .'s are path
#  separators.  The tree hierarchy will generate, as needed, subfolders to reflect
#  the pathing hierarchy generated by the user.
#

#   Locate ourself and read in the icons we require:
#

namespace eval browser {
    variable here [file dirname [info script]]
}

image create photo ::browser::spectrumicon -format gif \
                                           -file [file join $::browser::here   spectrumicon.gif]
image create photo ::browser::gateicon     -format gif \
                                           -file [file join $::browser::here   gateicon.gif]
image create photo ::browser::paramicon    -format gif \
                                           -file [file join $::browser::here   treeparicon.gif]
image create photo ::browser::varicon      -format gif \
                                           -file [file join $::browser::here   treevaricon.gif]
image create photo ::browser::axisicon     -format gif \
                                           -file [file join $::browser::here   axisicon.gif]
image create photo ::browser::pointicon    -format gif \
                                           -file [file join $::browser::here   pointicon.gif]
image create photo ::browser::pseudoicon   -format gif \
                                           -file [file join $::browser::here   pseudoicon.gif]
image create photo ::browser::foldericon   -format png \
    -file [file join $::browser::here folder.png]

::snit::widget browser {

    # the subwidgets in this frame:

    component tree
    component xscroll
    component yscroll

    option -spectrumfoldercommand  {}
    option -parameterfoldercommand {}
    option -variablefoldercommand  {}
    option -gatefoldercommand      {}


    option -spectrumscript         {}
    option -parameterscript        {}
    option -variablescript         {}
    option -gatescript             {}


    option -spectrumrightclick     {}
    option -parameterrightclick    {}
    option -variablerightclick     {}
    option -gaterightclick        {}

    option -restrict   {spectra parameters gates variables}
    option -detail     1
    option -showcolumns -default [list type gate low high bins value units] \
	-configuremethod configColumns

    option -filtergates {}
    option -filterparameters {}
    option -filterspectra    {}

    option -width 8in
    option -treewidth 2.5in

    delegate option * to tree
    delegate method * to tree

    #---
    
    variable topLevelIds [list]

    constructor {args} {

	# install and layout the widgets in the frame>

	install tree using ttk::treeview $win.tree \
	    -yscrollcommand [list $win.yscroll set] -xscrollcommand [list $win.xscroll set]
	install xscroll using scrollbar $win.xscroll -orient horizontal -command [list $win.tree xview]
	install yscroll using scrollbar $win.yscroll -orient vertical   -command [list $win.tree yview]
	grid $tree $yscroll -sticky nsew
	grid $xscroll       -sticky nsew

	#  Invariant tree configuration:
	
	set allcolumns [list type gate low high bins value units]
	$tree configure -columns $allcolumns
	foreach colname $allcolumns {
	    $tree heading $colname -text $colname
	    $tree column $colname -stretch 1 -anchor w -width 100
	}
	$tree heading #0 -text "Tree"

	
	# Force default configuration

	foreach option [array names options] {
	    $self configure $option $options($option)
	}

	$self configurelist $args; # overrides to defaults.

	# Populate the tree:

	$self fillAllFolders


    }
    #----------------------------------------------------------------------------------
    #  configuration management:

    ##
    #  -showcolumns - affects both the columns displayed as well as the
    #                 -show results for the tree:
    #
    method configColumns {option value} {
	set options($option) $value
	$tree configure -displaycolumns [concat $value]
	set showList tree
	if {[llength $value] > 0} {
	    set showList [concat $showList headings]
	}
	$tree configure -show $showList
    }
    #------------------------------------------------------------------------------------
    # Public methods:

    ##
    # update
    #   Updates the contents of the browser:
    #
    method update {} {
	$self fillAllFolders
    }
    #-------------------------------------------------------------------------------------
    # Private methods.

        # fillAllFolders
    #    Destructively restock all folders;
    #
    method fillAllFolders {} {

	# Kill off the top level folders:

	$tree delete $topLevelIds
	set topLevelIds [list]

	# Stock only those in the -restrict list:

        if {[lsearch -exact $options(-restrict) spectra] != -1} {
            $self fillSpectrumFolder
        }
        if {[lsearch -exact $options(-restrict) parameters] != -1} {
             $self fillParameterFolder
        }
        if {[lsearch -exact $options(-restrict) variables] != -1} {
            $self fillVariableFolder
        }
        if {[lsearch -exact $options(-restrict) gates] != -1} {
            $self fillGateFolder
        }
    }

    # fillSpectrumFolder
    #      Fills in the Spectrum folder with spectrum definitions.  At the top level,
    #      We just fill in the name and type.  Then we need to dispatch to type dependent
    #      methods to figure out how to fill in the rest of spectrum information.
    #      As with all the fill*Folder functions, the existing spectra are first removed from
    #      the folder.  See insertSpectrum for information about how to add a single spectrum.
    #
    method fillSpectrumFolder {} {
	
	# Create the top level folder for spectra:

	set spectrumFolder [$tree insert {} end -text Spectra \
				-open 0 -tag spectrumFolder -image ::browser::foldericon]

	lappend topLevelIds $spectrumFolder
    }
    # fillParameterFolder
    #      Fills the parameter folder with the set of parameters that are now defined.
    #      Previously existing parameters in the folder are first destroyed.
    #      this is suitable for a wholesale refresh of the gui.. it is not
    #      so useful for adding a single parameter.  See the addParameter method for that.
    #
    method fillParameterFolder {} {
	

    }
    # fillVariableFolder
    #      Fills the variable folder with the set of treevariables that are now defined.
    #      note that only treevariables are put in the folder, not ordinary Tcl vars.
    #      as that could be a strain on the user. Prior to filling, the existing
    #      variables are wiped out.  This function is best used to do a full refresh.
    #
    #
    method fillVariableFolder {} {
    }
    # fillGateFolder
    #    Fills the gate folder with the set of gates that are now defined.
    #    The type column is filled with the gate type and gate type specific
    #    subnodes are created for each gate.
    #
    method fillGateFolder {} {
    }


}