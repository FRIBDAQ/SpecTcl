<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>What's new for SpecTcl-3.2</title>
</head>

<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img
        src="images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>
        <td width="79%"><h1>SpecTcl-3.2 new features</h1>
        </td>
        <td width="12%"><a href="index.htm"><img
        src="images/HH00706_.jpg" alt="HH00706_.jpg (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="index.htm" name="Top">SpecTcl Home</a>&nbsp; <a href="general_information.htm">General
Information</a> <a href="users_guide.htm">User Guide</a> <a href="programmers_guide.htm">Programmer's
Guide</a> <a href="obtaining_and_installing.htm">Obtaining and Installing</a></p>

<ul>
  <li>The new <a href="Commands/fit.htm">fit</a> command allows users
      to produce fits of regions of interest on spectra.  The fit command
      comes with the capability to produce linear fits.  The set of fit types
      the fit command can produce is extensible.  Extending the fit types
      supported by the command is described in the
      <a href="Programming/fits.htm">Guide to extending the SpecTcl fitting system</a>
      which is part of the
      <a href="programmers_guide.htm">SpecTcl Programmer's guide</a>.
      Note that Xamine button support added this version allows you
      to write software to accept fit limits graphically through Xamine.
  </li>
  <li>
      Xamine's capability to allow the client (SpecTcl) to display
      client buttons is now formally supported.  This capability
      allows SpecTcl application programs to create GUI elements that
      are processed by Xamine and result in button messages to SpecTcl.
      This allows you to create buttons that can accept point on spectra
      as well as other GUI elements.
      Xamine's capabilities for client butttons and how to use them in
      SpecTcl code are described in
      <a href="Programming/xaminebuttons.htm">SpecTcl's interface to
      Xamine Client buttons</a>.  That page is part of the
       <a href="programmers_guide.htm">SpecTcl Programmer's guide</a>.
  </li>
  <li>
      Closely related to Xamine button handling is the ability to
      define function objects that will be invoked if Xamine had to be
      restarted.  A typical use of this would be to recreate an application
      specific Xamine client button box if Xamine is restarted.
      This capability is described in
      <a href="Programming/xaminerestart.htm">Writing Xamine Restart Handlers</a>
      which is part of the
      <a href="programmers_guide.htm">SpecTcl Programmer's guide</a>.
  </li>
  
  <li>
    SpecTcl 3.2 defines two new spectrum types.  These are both multiply
    incremented 2-d spectra.   The first, type <em>m2</em> is intended to
    behave much like any other 2d spectrum except that several ordered pairs of
    parameters can be incremeneted.  The second <em>gd</em> (gamma deluxe), has
    increment semantics like a 2-d gamma spectrum except that the parameters of
    the x and y axes can be independently specified.
    The documentation of the
    <a href="Commands/spectrum.htm">spectrum</a> command describes these
    spectrum types and how to create them.
  </li>
  <li>
      A plugin to support reading and writing Radware spectra has been
      added.  This is described in
      <a href="Plugins/radware.htm">The Radware Spectrum I/O plugin</a>.
      This plugin uses portions of the Radware gamma ray data analysis
      software written by
      David Radford.  This software is redistributed with SpecTcl by permission
      of the author.
  </li>
  <li>
     SpecTcl now supports dynamically loadable C++ plugins.  These plugins,
     and how to write them, are described in
     <a href="Plugins/writing.htm">The guide to writing SpecTcl plugin
     software</a>.
  </li>
  <li>
     The new variable <em>NoPromptForNewGui</em> can be defined in the
     SpecTclInit.tcl file to inhibit asking the user if they want to try
     out the new gui in the event you start the old tree parameter GUI.
  </li>
  <li>
    In many analysis software packages a <em>Super Event</em> is an event
    that contains subevents that should each be treated as a single event.
    This is useful, for example in handling a block mode data acquisition
    interface.  To handle superevents, SpecTcl must be able to get the analysis
    framework to advance the event pointer but not necessarily increment the
    number of events analyzed in an event buffer.  This is now supported
    and described in
    <a href="Programming/superevents.htm">SpecTcl and Super Events</a>
    in the
    <a href="programmers_guide.htm">SpecTcl Programmer's guide</a>.
  </li>
  <li>
     A Tcl splash screen package written by Emmanuel Frecon
     at the Swedish Institute of Computer Science has been incorporated and
     redistributed with SpecTcl under the terms of its license.
     The current SpectclRC.tcl files produce a splash/progress screen that
     allows the user to track SpecTcl's initialization.
     <a href="Programming/splashes.htm">SpecTcl splash screens</a>
     in the
     <a href="programmers_guide.htm">SpecTcl Programmer's guide</a> describes
     how to generate splash screens and how to tailor the SpecTcl splash screen
     image.
  </li>
</ul>

<hr>
<address></address>
<!-- hhmts start -->Last modified: Wed Apr  4 14:01:30 EDT 2007 <!-- hhmts end -->
</body> </html>
