<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>parameter - SpecTcl Command</title>
</head>

<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img
        src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>
        <td width="79%"><h1>parameter - SpecTcl Command</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/hh00706_.jpg"
        alt="HH00706_.wmf (6530 bytes)" width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm" name="Top">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>

<h2>Syntax</h2>

<p>parameter [-new] <em>name id resolution [{low high units}]</em><br>
parameter -list [-byid]<br>
parameter -list <em>name<br>
</em>parameter -list -id <em>id<br>
</em>parameter -delete <em>name</em><br>
parameter -delete -id <em>id</em></p>

<h2>Synopsis</h2>

<p>Manipulates the SpecTcl parameter dictionary.</p>

<ul>
    <li>Successful creations return the name of the created
        parameter.</li>
    <li>Unsuccessful creations return the reason for failure.</li>
    <li>Listings of parameters produce a Tcl List where each
        element is a triplet containing a parameter name,
        parameter Id and resolution.</li>
    <li>Deletions return either the name of the deleted parameter
        or the reason the parameter could not be deleted.</li>
</ul>

<p>&nbsp;</p>

<h2>Detailed Description</h2>

<p>SpecTcl maintains a parameter dictionary. The parameter
dictionary creates a correspondence between elements in the Event
dynamic array and named parameters which are used to create
spectra. Each parameter has the following properties:</p>

<ul>
    <li>A Name, which can be used to refer to the parameter when
        constructing spectra.</li>
    <li>An Id which represents the offset into the parameter
        array at which the parameter will be placed (offsets
        number from zero).</li>
    <li>A resolution which is used to represent the number of
        bits of significant data in the parameter. The resolution
        is used to scale the parameter to the spectra it is used
        in.</li>
    <li>Optionally:
	<ul>
	  <li>A low limit for scaling to the spectrum coordinates</li>
	  <li>A high limit for scaling to the spectrum coordinates</li>
	  <li>A string to label the parameter's axis with (<em>e.g. "MeV"</em>)
	    </li>
	</ul>
      </li>
</ul>

<p>The <a href="spectrum.htm"><strong>spectrum</strong></a>
command is used to create spectra which histogram parameters.</p>

<h3>parameter [-new] <em>name id resolution [{low high units}]</em></h3>

<p>Creates a new entry in the parameter dictionary. The <strong>-new</strong>
flag is optional.</p>

<ul>
    <li><em>name</em> will be the name used to enter the new
        parameter in the parameter dictionary.</li>
    <li><em>id</em> is the offset into the event dynamic array
        where the parameter will be placed by the unpacker.</li>
    <li><em>resolution</em> is the number of significant bits of
        data written into the event dynamic array.</li>
    <li><em>low</em> is the integer low limit of the parameter used to scale 
	the parameter to the mapped spectrum coordinates.</li>
    <li><em>high</em> is the integer high limit of the parameter used to scale
	the parameter to the mapped spectrum coordinates.</li>
    <li><em>units</em> is a string to label the parameter's axis with on
	the histogram itself. Note that, in the case of a multi-parameter
	axis (<em>e.g. a gamma spectrum</em>), the units of the first mapped
	parameter are used (it is assumed that they will all be the same
	units, anyway).
</ul>

<h3>parameter -list [-byid]</h3>

<p>Returns a list of the parameter definitions. If the optional <strong>-byid</strong>
switch is included, the parameters are sorted by Id number.
Otherwise the list is alphabetical by parameter name. The output
is in a form which makes processing by other Tcl commands and
scripts easy (see e.g. <a href="parlist.htm"><strong>ParList</strong></a>).
The output is a Tcl List of definitions. Each list element is,
itself, a 3 element list containing in order, the name of the
parameter, the parameter id, and the parameter resolution.</p>

<h3>parameter -list <em>name</em></h3>

<p>Returns the parameter definition for the parameter named <em>name</em>.
If the parameter cannot be listed, the return value is an error
message string.</p>

<h3>parameter -list -id <em>id</em></h3>

<p>Returns the parameter definition for the parameter with the id
<em>id.</em> If the parameter cannot be listed, the return value
is an error message string.</p>

<h3>parameter -delete <em>name</em></h3>

<p>Removes the parameter named <em>name</em> from the parameter
dictionary.</p>

<h3>parameter -delete -id <em>id</em></h3>

<p>Removes the parameter with the id <em>id</em> from the
parameter dictionary.</p>

<h2>Examples:</h2>

<pre>parameter De1 0 12                     ;# Creates a 12 bit parameter named De1 in element 
#                                         zero of the event array.
parameter p1 1 10 {10 100 "MeV"}       ;# Creates a 10 bit parameter named p1 which will 
#                                         scale channel data to between 10 and 100, and 
#                                         will label its axis with "MeV".
parameter -list -byid                  ;# Creates a list sorted by Id of the defined 
#                                         parameters.
parameter -delete -id 0                ;# Deletes the parameter with the id 0.
ParList [parameter -list -byid]        ;# Uses the ParList script to create a nicely 
#                                         formatted list of parameters sorted by ID.
SaveParams setup.tcl [parameter -list] ;# Uses the Saveparams script to create a file 
#                                         called setup.tcl which contains definitions 
#                                         for all of the parameters known to SpecTcl. 
#                                         This script can then be sourced to re-define 
#                                         these parameters on subsequent runs.
</pre>

<p><a href="parameter.htm#Top">Top</a></p>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>

<hr>

<p>Last Modified: <!--webbot bot="Timestamp" s-type="EDITED"
s-format="%B %d, %Y" startspan -->April 18, 2001<!--webbot
bot="Timestamp" endspan i-checksum="17669" --> by: <a
href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a><br>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>
</body>
</html>
