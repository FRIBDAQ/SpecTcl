<html>

<head>

<title>Fit command</title>
</head>

<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tr>
    <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif" alt="nscl_logo_small.gif (2463 bytes)" width="63" height="52"></a></th>

    <td width="79%">
      <h1>fit</h1>
    </td>
    <td width="12%"><a href="../index.htm"><img src="../images/HH00706_.jpg" alt="HH00706_.jpg (6530 bytes)" width="192" height="84"></a></td>
  </tr>
</table>
<h2>Syntax</h2>
<p>
fit create <em>spectrum low high type</em><br />
fit update <em>?pattern?</em> <br />
fit delete <em>name</em><br />
fit list <em>?pattern?</em><br />
fit proc <em>fitname</em><br />

</p>

<h2>Detailed Description</h2>
<p>
  The fit command is an ensemble of commands that allows you to create and
manipulate fits.  The SpecTcl fitting subsystem, at this time supports fits
on all types of spectra that have a 1-d  display (e.g. gamma1 spectra are
fittable).  A fit is a named entity that is bound to a region of interest 
of a specific spectrum.  While fits are not automatically updated, it is possible
to ask fit to update itself based on the current state of a spectrum.
Fits are also displayed in Xamine.
</p>
<p>
   The SpecTcl fitting subsystem is exentsible.   See the programming
guide section on <a href="../Programming/fits.htm">Extending SpecTcl's Fitting
subsystem</a>for information about how to add a fit type to SpecTcl.
</p>
<h3>fit create <em>spectrum low high type</em></h3>
<p>
Creates a fit and performs it based on the data currently in <em>spectrum</em>.
<ul>
  <li><em>spectrum</em> is the name of an existing spectrum on which the
    fit is to be created and performed</li>
  <li><em>low high</em> define the region of interest for the fit in channel
      coordinates.  If you want to specify a fit region in 'real' coordinates,
      you will need to write a script to do so and look at the spectrum
      axis definition to know how to map real coordinates to channel 
      coordinates.</li>
   <li><em>type</em> is a string that specifies the type of fit to perform.
      At this type, SpecTcl supports fit types of "linear" or "gaussian".
      Note that the gaussian fit type is assumed to be sitting on top of a 
      constant background.  The set of fit types can be extended.
      See <a href="../Programming/fits.htm">Extending SpecTcl's Fitting
      subsystem</a>for information about how to add a fit type to SpecTcl</li>
</ul>

<h3>fit update <em>?pattern?</em></h3>
<p>
   Performs the specified set of fits again using the current data in a spectrum.
   If the optional <em>pattern</em> is supplied, only the fits with names that
   match it will be performed. <em>Pattern</em> can contain the wild-card
   characters used by unix in filename matching.  If the <em>pattern</em> is
   not provided, then it defaults to "*" which updates all fits.
</p>
<p>
   When a fit is updated, its new fitline is propagated to Xamine for display.
</p>
<h3>fit delete <em>name</em></h3>
<p>
  Deletes the specified fit.  If the fit was displayed in Xamine, the fitline is
  removed from the corresponding spectrum.
</p>
<h3>fit list ?pattern?</h3>
<p>
   Lists fits and their properties.  The result is a properly formatted Tcl list.
   Each element of the list is itself a list as follows:
   <table>
      <tr><th>Element</th><th>Contents</th></tr>
      <tr align="top"><td>0</td><td>The name of the fit</td></tr>
      <tr align="top"><td>1</td><td>The name of the spectrum the fit is defined on</td></tr>
      <tr align="top"><td>2</td><td>The type of the fit (e.g. "gaussian")</td></tr>
      <tr align="top"><td>3</td><td>A 2 element sublist that describes the region of interest
          over which the fit was performed and will be displayed.  The low
          channel limit will be first followed by the high channel limit of the
          area of interest</td></tr>
      <tr align="top"><td>4</td><td>A property list that describes the fit parameters.
        A property list is a list of two item sublists.  Each item contains
        a keyword and a value (keyword is element 0).  The parameters returned
        by each fit will depend on its fit type as each fit type will
        have a different set of variable parameters.  For example, the
        gaussian fit has a "centroid" parameter, the linear fit a "slope"
        parameter.  See the section "Parameters of supported fits" below
        for the parameters of fits that are a standard part of SpecTcl.
        for others either list them and look at the fit property list  or
        consult with the author of the fit.  Note that all fits should
        produce a property named "chisquare" that is the chi-square
        measure of the goodness of the fit.
        </td></tr>
   </table>
</p>
<h3>fit proc <em>name</em></h3>
<p>
   Produces a Tcl proc named <em>fitline</em> that is capable of evaluating
   the fit at any point in the fit's region of interest.  The proc has
   a single parameter, the channel coordinate of the point to evaluate.
   Note that you can use the Tcl "rename" command to rename the fit
   to something meaningful.  The script below uses this to create a proc
   named for each existing fit that is named after the fit:
<pre>
foreach fit [fit list] {
  set name [lindex $fit 0]
  eval     [fit proc $name]
  rename fitline $name
}
</pre>
</p>
<h2>Properties of supported fits</h2>
<p>
  This section describes the properties of fits that are supported by SpecTcl.
</p>
<h3>Gaussian Fit Parameters</h3>
<p>
   A gaussian fit produces a functional form as follows:
<pre>
    y = baseline + height * exp(-0.5*((x-centroid)/sigma)**2)
</pre>
</p>
<p> The fit parameters are therefore "baseline", "height", "centroid",
"sigma", and "chisquare".
</p>
<h3>Linear Fit Parameters</h3>
<p>
  The linear fit produces a functional form as follows:
<pre>
      y  = offset + slope*x
</pre>
</p>
<p>
   Therefore the fit parameters are called: "offset", "slope", and of course
   "chisquare".
<hr>
<p>Last Modified: October 23, 2006 <br />
 by: <a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>

</body>

</html>
