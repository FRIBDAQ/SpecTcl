<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
 
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
 
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
  <title>User's Guide</title>
</head>
    <body>
  
<table border="0" cellpadding="0" cellspacing="0" width="100%">
     <tbody>
    <tr>
         <th width="9%" nowrap="nowrap"><a
 href="http://www.nscl.msu.edu"><img src="images/nscl_logo_small.gif"
 alt="nscl_logo_small.gif (2463 bytes)" width="63" height="52">
      </a></th>
         <td width="79%">
      <h1>SpecTcl - User's Guide</h1>
         </td>
         <td width="12%"><a href="index.htm"><img
 src="images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)" width="192"
 height="84">
      </a></td>
     </tr>
 
  </tbody>
</table>
  
<p><a href="index.htm">SpecTcl Home</a>&nbsp; <a
 href="general_information.htm">General Information</a> <a
 href="users_guide.htm">User Guide</a> <a href="programmers_guide.htm">Programmer's
Guide</a> <a href="obtaining_and_installing.htm">Obtaining and Installing</a></p>
  
<p><a name="Top">This page covers the following information:</a> </p>
  
<ul>
     <li><a href="#concepts">SpecTcl Concepts</a></li>
     <li><a href="#LimitConfig">Configuring SpecTcl's limits and default
actions</a></li>
     <li><a href="#Tcl/Tk">General information about SpecTcl's         command
language</a></li>
     <li><a href="Commands/categories.htm">SpecTcl commands</a></li>
     <li><a href="#Initialization">Initialization</a></li>
 
</ul>
  
<h2><a name="concepts"></a>SpecTcl Concepts</h2>
 
<p>SpectTcl is a data sorting program which uses an extended version of Tcl/TK 
as a command language. Using Tcl/Tk, a general purpose scripting language 
provides the user (and SpecTcl's developer(s)) with a powerful command language 
framework on which to base the system.&nbsp; For more information on Tcl/Tk, 
click <a href="#Tcl/Tk">here</a>.&nbsp; For information about SpecTcl's extensions
to Tcl/Tk, click <a href="Commands/categories.htm">here</a>.</p>
 
<p>SpecTcl understands the following types of entities:</p>
 
<ul>
   <li><a href="parameters.htm">Parameters</a></li>
   <li><a href="spectra.htm">Spectra</a></li>
   <li><a href="gates.htm">Gates</a></li>
   <li><a href="scripts.htm">Scripts</a></li>
 
</ul>
 
<p>Power users of SpecTcl will have a thorough understanding of these concepts.</p>
 
<p><a href="#Top">Top</a></p>
  
<h2><a name="LimitConfig">Configuring SpecTcl's limits</a> and default actions</h2>
  
<p>SpecTcl uses the initial values of some Tcl global variables to set some
hard and soft limits.&nbsp; These limits are read in as follows: </p>
  
<ol>
     <li>First the SpecTcl system configuration script is read         from
$INSTDIR/Etc/SpecTclInit.tcl &nbsp; ($INSTDIR is the         base of the
SpecTcl installation tree).&nbsp; This script         is expected to contain
system defaults for these         variables.</li>
     <li>If SpecTclInit.tcl exists in the user's home directory,        
it too will be run to allow the system defaults to be         overridden.</li>
     <li>Any variables which are not set by either of these         scripts
is defaulted to by hard coded values in         AppInit.cpp.</li>
 
</ol>
  
<p>The variables which may be modified are listed below:</p>
  
<table border="1" width="100%">
     <tbody>
    <tr>
         <td width="18%"><strong>Variable Name</strong></td>
         <td width="48%"><strong>Usage</strong></td>
         <td width="34%"><strong>"Normal Default"</strong></td>
     </tr>
     <tr>
         <td valign="top" rowspan="2" width="18%">DisplayMegabytes</td>
         <td rowspan="2" width="48%">Number of megabytes of shared      
  display spectrum memory to allocate.&nbsp; This is a hard         limit
which is maintained for the duration of the program         run. This value
is in units of megabytes (1024*1024) e.g.         20 is 20 megabytes of storage.</td>
         <td width="34%">Hard coded:&nbsp; 16 (megabytes)</td>
     </tr>
     <tr>
         <td width="34%">$INSTDIR/etc/SpecTclInit.tcl 16</td>
     </tr>
     <tr>
         <td valign="top" rowspan="2" width="18%">ParameterCount</td>
         <td rowspan="2" width="48%">Soft limit on number of         parameters
in an event. This sets the initial size of the         parameter array.&nbsp;
The parameter array dynamically         expands if necessary, however setting
the ParameterCount         at least as large as the number of parameters
you will be         creating reduces the per event overhead of maintaining 
        that array.</td>
         <td width="34%">Hard coded: 256</td>
     </tr>
     <tr>
         <td width="34%">$INSTDIR/etc/SpecTclInit.tcl 256</td>
     </tr>
     <tr>
         <td valign="top" rowspan="2" width="18%">EventListSize</td>
         <td rowspan="2" width="48%">Number of events which are         accumulated
in the event list before dumping the event         list to the histogramming
pipeline.</td>
         <td width="34%">Hard Coded:&nbsp; 256</td>
     </tr>
     <tr>
         <td width="34%">$INSTDIR/etc/SpecTclInit.tcl 256</td>
     </tr>
     <tr>
         <td valign="top" width="18%">ParameterOverwriteAction</td>
         <td width="48%">Tells SpecTcl's parameter read script what to do
when a           parameter which already exists is read in.&nbsp; This can
be any of           the following values:           
      <ul>
             <li>skip - the old parameter is retained and the new definition
is               ignored.</li>
             <li>overwrite - the new parameter definition silently replaces
the               old one</li>
             <li>query - The user is asked whether or not to accept the new 
              parameter definition or keep the old one.</li>
           
      </ul>
         </td>
         <td width="34%" valign="top">query</td>
     </tr>
     <tr>
         <td valign="top" width="18%">SpectrumOverwriteAction</td>
         <td width="48%">Tells SpecTcl's spectrum read scripts what to do
when a           spectrum which is already defined is read in.&nbsp; This
can be any of           the following values:           
      <ul>
             <li>skip - the old parameter is retained and the new definition
is               ignored.</li>
             <li>overwrite - the new parameter definition silently replaces
the               old one</li>
             <li>query - The user is asked whether or not to accept the new 
              parameter definition or keep the old one.</li>
           
      </ul>
           
      <p>&nbsp;</p>
           
      <p>&nbsp;</p>
      </td>
         <td width="34%" valign="top">query</td>
     </tr>
    <tr>
      <td valign="top">TKConsoleHistory<br>
      </td>
      <td valign="top">Sets the number of commands in the TK console history
buffer.<br>
      </td>
      <td valign="top">48<br>
      </td>
    </tr>
    <tr>
      <td valign="top">TKConsoleBufferSize<br>
      </td>
      <td valign="top">Sets the number of characters in the TK console scroll
back buffer.<br>
      </td>
      <td valign="top">512<br>
      </td>
    </tr>
 
  </tbody>
</table>
  
<p>These variables are set using the Tcl set command.&nbsp; The following
segment from a user's SpecTclInit.tcl script sets&nbsp; the display storage
to 20 megabytes and the initial parameter set to 1024:</p>
  
<pre>set DisplayMegabytes 20		;# 20 Megabytes of display memory<br>set ParameterCount   1024       ;# 1K parametrers for this run.</pre>
  
<p>&nbsp;</p>
  
<p><a href="#Top">Top</a></p>
  
<h2><a name="Tcl/Tk">SpecTcl's Command Language</a></h2>
  
<p>SpecTcl contains an embedded scripting language called Tcl/Tk.&nbsp;&nbsp;
Tcl, the "Tool Command Language" was developed by <a
 href="http://www.scriptics.com/people/john.ousterhout/">John K.&nbsp; Ousterhou</a>t.&nbsp;
The Tk command set add on provides the ablility to create Graphical User
interfaces based on Tcl/Tk. &nbsp; The combination provides powerful scripting
support for many applications. &nbsp; Since Tcl/Tk is actually a library, 
programs like SpecTcl can add the power of Tcl/Tk to their user interface.&nbsp;
For example, the following Tcl/Tk script analyzes a 10 second shot of data:</p>
  
<pre>start		    	;# Start analyzing data.<br>after 10000 stop 	;# After 10000milliseconds issue the stop command.</pre>
  
<p>To give a more interesting example of Tcl/Tk in action: The following
Tcl Script, adds a command named Help which brings up Netscape displaying
the home page of the SpecTcl documentation, it then creates a button labelled
Help which will trigger this command and adds it to the GUI:</p>
  
<pre>proc Help {} {                      ;#Help command<br>    global SpecTclHome              ;# This variable "knows" where SpecTcl was installed <br>    set URL [format "%s%s" $SpecTclHome /doc/index.htm]  ;# Constructs the Doc. URL.<br>    exec netscape $URL &amp;            ;# Spins off Netscape as a background process.<br>}<br>button .help      -text "Help"  -command Help   ;# Creates the Help button and<br>pack   .help                                    ;# Packs it into the main window.<br></pre>
  
<p>It is beyond the scope of this page to provide a complete description
of the Tcl/TK command language, The following two books are useful resources:</p>
  
<p><strong>Tcl and the Tk Toolkit </strong>John K. Ousterhout Addison Wesley
ISBN 0-201-63337-X</p>
  
<p><strong>Practical Programming in Tcl and Tk&nbsp;&nbsp; </strong>Brent 
B. Welch Prentice Hall ISBN 0-13-6t16830-2</p>
  
<p>The following links point to some online resources for Tcl/Tk:</p>
  
<table border="0" width="100%">
     <tbody>
    <tr>
         <td width="100%"><a
 href="http://www.sco.com/Technology/tcl/Tcl.html">TCL/WWW         info</a></td>
     </tr>
     <tr>
         <td width="100%"><a
 href="http://ls4-www.informatik.uni-dortmund.de/luebeck/pg279/bibInfos.html">Starting 
        page for Tcl/Tk info (english/german)</a></td>
     </tr>
     <tr>
         <td width="100%"><a
 href="http://cuiwww.unige.ch/eao/www/TclTkMan/Man.html">Manual         pages
for Tcl/TK</a></td>
     </tr>
     <tr>
         <td width="100%"><a href="http://www.scriptics.com/">         The
Tcl exchange</a></td>
     </tr>
 
  </tbody>
</table>
  
<p><a href="#Top">Top</a></p>
  
<h2><a name="Initialization"></a>Initialization</h2>
  
<p>SpecTcl's graphical user interface is built on TK. It is therefore possible
for you to define your own extensions to the GUI. In addition, other user
level initializations may, from time to time, be useful, such as ensuring
that various procedures are defined. SpecTcl therefore will run the file:
~/SpecTclRC.tcl if it exists after it has initialized.</p>
  
<p><a href="#Top">Top</a></p>
  
<p><a href="index.htm">SpecTcl Home</a>&nbsp; <a
 href="general_information.htm">General Information</a> <a
 href="users_guide.htm">User Guide</a> <a href="programmers_guide.htm">Programmer's
Guide</a> <a href="obtaining_and_installing.htm">Obtaining and Installing</a></p>
  
<hr>  
<p>Last Modified: <!--webbot bot="Timestamp" s-type="EDITED"
s-format="%B %d, %Y" startspan -->January 16, 2003<!--webbot bot="Timestamp" endspan i-checksum="31209" --> by: <a
 href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a><br>
 <font size="2">&copy; Copyright NSCL 1999, All rights reserved</font></p>
 <br>
</body>
</html>
