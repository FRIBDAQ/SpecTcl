<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>SpecTcl Plugins Guide</title>
</head>

<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>Guide to SpecTcl Plugins</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>

<p>
This guide describes:

<ul>
  <li><a href="#what">What a SpecTcl Plugin is</a></li>
  <li><a href="#list">The list of SpecTcl Plugins now supported</a></li>
  <li><a href="#how">How to write a SpecTcl Plugin</a></li>
</ul>

<a name="what" />
<h2>What is a SpecTcl Plugin</h2>

<p>
A SpecTcl plugin is compiled code that can be dynamically incorporated into
SpecTcl.  SpecTcl plugins depend on tow bits of technology;
<ul>
  <li>Shared libraries (called dynamic link libraries on some operating
      systems)
  </li>
  <li>The ability of the Tcl interpreter to load shared libraries containing
      Tcl Packages</li>
</ul>

</p>
Plugins allow you dynamically add software to SpecTcl that is distributed in
binary form.  This can be useful either for intellectual property reasons or
for ensuring that users's are actually running the code that was distributed.
<p>
<p>
Plugins are capable of doing anything any other bits of SpecTcl application
code can do including:
<ul>
  <li>Providing and establishing event processors</li>
  <li>Adding commnds to SpecTcl that are executed at compiled speed.</li>
  <li>Adding to or modifying the SpecTcl GUI (generally done by executing
      scripts that are either external to the plugin or stored as text within
      the plugin.
  </li>
</ul>
</p>
<p>
  The examples and recipes in this document are all relevant to
  plugins development on linux. On other systems, the same principles
  should apply although other linker flags may be needed to coerce the linker
  to build your plugin libraries as shared libraries, and the file type of the
  plugin may vary as well (e.g. while it is .so on many linux like systems it
  will be .dylib on OS-X and .dll on Windows/Cygwin).
</p>
 
<p>
  A plugin is installed in SpecTcl using the Tcl 
  <pre>
load
  </pre>
  command.
</p>
<p>
  The form of this command is:
  <pre>
load <em>pluginfile</em>
  </pre>
  Where <em>pluginfile</em> is the full path to the plugin shared library.
</p>


<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's Guide</a>

<a name="list" />
<h2>Supported Plugins</h2>

<p>This section contains a list of supported plugins and pointers to their
   documentation.  Supported plugins will generally be installed in
  $SpecTclHome/lib
</p>

<p>
<ul>
  <li><a href="radware.htm">The Radware Spectrum interchange plugin</a></li>
</ul>
</p>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's Guide</a>

<a name="how">
<h2>How to write a SpecTcl Plugin</h2>
<p>
This section describes how to produce a plugin.  Of course, prior to writing
the plugin you need to have a clear idea of what the plugin should do, and
what, if anything, it should offer the user.
</p>
As plugins are hard to debug it is a good idea to first test your plugin code
as a statically linked application extension to SpecTcl.  Once you are
confident that your static extension works, you would:
<ul>
  <li>Code the plugin initialization function</li>
  <li>Build the plugin as a shared object</li>
  <li>Place the plugin where anyone who wants it can load it</li>
  <li>Consider contributing the plugin to SpecTcl</li>
</ul>


<h3>Coding the plugin initialization function</h3>
<p>
The Tcl <tt>load</tt> command invokes an initialization
function when loading a plugin.  The signature of this plugin is:
<pre>
extern "C" {
   int <em>Pluginname</em>_Init(Tcl_Interp*);
}
</pre>
</p>
<p>
Four important notes about this call signature:
<ol>
  <li> The <tt>extern "C" {}</tt> means that the function is called according
  to the C, not C++ calling conventions. If your plugin is written in C++,
  you must define the function in that way.
  </li>
  <li>The <em>Pluginname</em> must be related to the library name as follows;
     First strip the lib off the library name.  Second capitalize the first
     letter of all that remains.  Then strip the file type off the end.
     For example, the Radware spectrum interchange package is in a library file
     named <tt>libradwareio.so</tt>; the full name of its initialization
  function is therefore: <tt>Radwareio_Init</tt>
  </li>
  <li>The parameter is a pointer to the raw interpreter handle in the base
  Tcl programming interface.  it is <em>not</em> a pointer to a
  <tt>CTCLInterpreter</tt></li>
  <li>The function should return <tt>TCL_OK</tt> if successful and
  <tt>TCL_ERROR</tt> in the event an error is detected by the initialization
  function.</li> 
</ol>
<p>
The body of the initialization function should perform whatever setup is
required to make the plugin usable and activate it.  This could include
registering new Tcl commands, adding event processors to the SpecTcl event
processing pipeline, executing scripts in the interpreter to bring up a GUI or
augment an existing one, or any other functions you want.
</p>
<p>
We conclude this section by showing a simplified initialization function for the
Radware Spectrum Interchange plugin.  This plugin adds two commands:
<tt>rwwrite</tt>, and <tt>rwread</tt> which write and read spectra in Radware
format respectively.
</p>
<pre>
extern "C" {
  int Radwareio_Init(Tcl_Interp* pInterp) 
  {

    cerr << "\n\nradwareio incorporates software that is part of the Radware package\n";
    cerr << "written by David Radford at Oak Ridge National Laboratories\n";
    cerr << "This software is incorporated with permission and thanks\n";

    // Wrap the interpreter in an interpreter object and 
    // create the commands.

    CTCLInterpreter& interp(*(new CTCLInterpreter(pInterp)));
    CRWWrite*  pWrite = new CRWWrite(interp);
    CRWRead*   pRead  = new CRWRead(interp);

    return TCL_OK;

  }
}

</pre>
<p>
First the function takes care of acknowledging the author of Radware and
thanking him for providing permission to redistribute the spectrum I/O functions
from the radware package.
</p>
<p>
Next, since this is a C++ plugin, we wrap the interpreter pointer passed in a
<em>CTCLInterpreter</em> so that we can use the object oriented Tcl interfaces.
Reference information about that library is available in the
<a href="http://docs.nscl.msu.edu/daq/bluebook/html">Web "big blue book"</a>
and the <a href="http://docs.nscl.msu.edu/daq/bluebook/bluebook.pdf">Printable
"big blue book"</a> which contain comprehensive documentation about the NSCL
data acquisition and SpecTcl packages.
</p>
<p>
  Next, instances of the two command processors are created (they register
themselves with the interpreter their constructors reeceieve).  This adds the
two commands to the Tcl interpreter used by SpecTcl.   Finally, the
initialization function returns <tt>TCL_OK</tt> indicating the plugin is ready
for use.
</p>

<h3>Building the plugin</h3>
<p>
Plugins must be built as shared object libraries.
The following Linux Makefile accomplishes that for the Radware Spectrum interchange
plugin:
<pre>
INSTDIR=/usr/opt/spectcl/3.2
LIBDIR=$(INSTDIR)/lib
INCDIR=$(INSTDIR)/include -I/usr/include/tcl8.4

CXXFLAGS=-I$(INCDIR)
LDFLAGS=-L$(LIBDIR)  -shared -Wl,"-rpath=$(LIBDIR)"
LIBS= 

pluginName = libradwareio.so

OBJECTS = radwareioPackage.o CRWRead.o CRWWrite.o

$(pluginName): $(OBJECTS)
	$(CXX) --version
	$(CXX) -o $(pluginName)  $(LDFLAGS) $(OBJECTS)  $(LIBS)

clean:
	rm -f $(OBJECTS) $(pluginName)  
</pre>
</p>
<p>
Simply replaced the definitions of <tt>pluginName</tt> with the name of the
library you are creating, replace the definition of <tt>OBJECTS</tt> with the
objects that need to be created to make up the plugin library.
</p>
<p>
If, when loading the plugin you get undefined references, you can add the
libraries you need to the definition of <tt>LIBS</tt>.  Note that you don't
need to add any of the SpecTcl libraries as they are already linked into
SpecTcl and symbols required from them will be resolved when the plugin is loaded.
</p>

<h3>Installing a plugin</h3>
<p>
A plugin can be installed anywhere. The important thing is that users who must
use the plugin must be have:
<ol>
  <li>Execute access to all directories leading to the plugin</li>
  <li>Read and execute access to the plugin library itself</li>
</ol>
Normally plugins should be installed in some central, shared location so that
updates and defect fixes can be applied centrally.
</p>
<p>
<ul>
  <li>At the NSCL you can ask for and get a directory into which this can be
  installed</li>
  <li>If the plugin is something you think would be generally useful,
      consider submitting it for inclusion with the SpecTcl distribution as
  contributed software.
</ul>
</p>

<h3>Contributing a plugin</h3>
<p>
Contributing a plugin involves some support responsibility.  In exchange for
taking on that responsibility, your plugin is:
<ul>
  <li>Included in the SpecTcl releases at the sourceforge website</li>
  <li>Acknowledged in the SpecTcl release notes (fame and fortune?)</li>
</ul>
</p>
<p>
  You have two options for getting your plugin distributed with SpecTcl:
  <ol>
    <li>You can incorporate your plugin into the SpecTcl build system.</li>
    <li>You can distribute your plugin on the SpecTcl sourceforge page as a
        separate release tarball
    </li>
  </ol>
</p>

<p>
  Now for the responsibilities:
  <ul>
    <li>You are responsible for packaging your plugin so that it will either be
    built as part of the SpecTcl build system, or separately</li>
    <li>You are reponsible for supporting your plugin</li>
    <li>You are responsible for testing that your plugin continues to work with
    newer versions of SpecTcl</li>
  </ul>
  If you do not meet these responsibilities, we reserve the right to stop
  distributing your plugin with SpecTcl.
</p>

<p>
  To get your plugin distributed with SpecTcl
  Send an e-mail to <a href="mailto=fox@nscl.msu.edu">fox@nscl.msu.edu</a>.
  The e-mail should include:
  <ul>
    <li>Documentation describing your plugin.</li>
    <li>The complete source tree of your plugin.  This will be added
        to the SpecTcl CVS repository.</li>
    <li>The contact information you would like to use for plugin support</li>
    <li>A description of how to build the plugin (either as part of the SpecTcl
    build system or separately as you choose)</li>
  </ul>
</p>
<p>
  Naturally you may modify your plugin as time goes on.  You may fix defects,
  or enhance the original functionality of the plugin.  If you do, Send an
  email containing:
  <ul>
    <li>Release notes and/or changelogs describing the changes</li>
    <li>New documentaiton if appropriate</li>
    <li>The updated complete source tree of your plugin.</li>
  </ul>
  </p>
<p>
  Note that unless you choose to have your plugin distributed and built
  separately from SpecTcl, your plugin's release and updates may be delayed
  to coincide with SpecTcl releases (normally 2-3 times per year).
  </p>
<p>
    Note that there may be cases where we determine that for practical reasons
    we cannot distribute your plugin with SpecTcl.  Examples may be failures to
    get your software to build with the SpecTcl build system in a way that allows
    it to be bundled into the SpecTcl tarballs.  In this case we will let you know
    about this.  This is not a personal decision, but just a support decision on our
    part.  You are still welcome to contribute the plugin as a separately released
    plugin or as a bundled plugin at a later date.
</p>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's Guide</a>


<hr>
<address><a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a></address>
<!-- hhmts start -->Last modified: Sun Apr  8 19:39:00 EDT 2007 <!-- hhmts end -->
</body> </html>
