<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<title>Supporting Non-NSCL data buffers</title>
</head>

<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img
        src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>
        <td width="79%"><h1>Supporting Non-NSCL data buffers</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/hh00706_.jpg"
        alt="HH00706_.wmf (6530 bytes)" width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm" name="Top">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>

<p>SpecTcl uses an object which is an instance of a class derived
from CBufferDecoder to manage the global properties of the
buffer. Physics event buffers are assumed to consist in general
of some framing information which encapsulates a set of events.
The Events are in a region called the body. To Build a version of
SpecTcl which is able to anaylze data from non NSCL data sources
you must:</p>
<div align="left">

<table border="0" cellpadding="3" cellspacing="4">
    <tr>
        <td><img src="../images/checkbox51.gif" width="25"
        height="13"></td>
        <td><a href="#CBufferDecoder">Code a class which is
        derived from CBufferDecoder which can fulfil minimal
        requirements of the analyzer/event unpacker.</a></td>
    </tr>
    <tr>
        <td><img src="../images/checkbox51.gif" width="25"
        height="13"></td>
        <td><a href="#AppInit">Modify AppInit.cpp to instantiate
        your buffer decoder class and attach it to the analyzer.</a></td>
    </tr>
    <tr>
        <td><img src="../images/checkbox51.gif" width="25"
        height="13"></td>
        <td><a href="building.htm">Build your customized version
        of SpecTcl</a></td>
    </tr>
</table>
</div>

<p><a href="#Top">Top</a></p>

<h2><a name="CBufferDecoder">Deriving a class from CBufferDecoder</a></h2>

<p>The services provided by CBufferDecoder are described <a
href="modifyin.htm#CBufferDecoder">here</a>. Many of these
services are not used by the Analyzer, and, if necessary can be
stubbed off to return dummy values, if your decoder does not use
them. The members which are required, however are:</p>
<div align="left">

<table border="0" cellpadding="3" cellspacing="4">
    <tr>
        <td><strong>Member</strong></td>
        <td><strong>Description</strong></td>
    </tr>
    <tr>
        <td>getBody</td>
        <td>Return a pointer to the body section of the buffer.</td>
    </tr>
    <tr>
        <td>getEntityCount</td>
        <td>Return the number of events in the buffer.</td>
    </tr>
    <tr>
        <td>getBufferType</td>
        <td>Return the type of the buffer.</td>
    </tr>
</table>
</div>

<p>&nbsp;</p>

<p><a href="#Top">Top</a></p>

<h2><a name="AppInit">Modifying AppInit.cpp</a></h2>

<p>The AppInit.cpp file contains code which initializes SpecTcl.
AppInit instantiates and initializes the analyzer as well as
hooking the decoder and the unpacker to the analyzer. This is
done in the following code fragment in AppInit.cpp:</p>

<pre>  // Analyzer initial sizing is based on m_pAnalyzer.

  m_pAnalyzer     = new CAnalyzer(m_nParams, m_nListSize);
  gpAnalyzer      = m_pAnalyzer;
  //
  // Hook the analyzer together with its sink, unpacker and decoder.
  //
  gpAnalyzer-&gt;AttachSink(*gpEventSink);
  gpAnalyzer-&gt;AttachUnpacker(*gpUnpacker);
  gpAnalyzer-&gt;AttachDecoder(*gpBufferDecoder);</pre>

<p>The global variable gpBufferDecoder is a pointer to a buffer
decoder. Setting this global variable to another value prior to
this code segment subsitutes your buffer decoder for the default
SpecTcl decoder. For example, the code fragment above can be
modified to read:</p>

<pre> // Analyzer initial sizing is based on m_pAnalyzer.

  m_pAnalyzer     = new CAnalyzer(m_nParams, m_nListSize);
  gpAnalyzer      = m_pAnalyzer;
  //
  // Create a buffer decoder of type CMyDecoder and arrange to have it hooked
  // into SpecTcl's analyzer:
  //
  static CMyDecoder decoder;
  gpBufferDecoder = &amp;decoder;
  //
  // Hook the analyzer together with its sink, unpacker and decoder.
  //
  gpAnalyzer-&gt;AttachSink(*gpEventSink);
  gpAnalyzer-&gt;AttachUnpacker(*gpUnpacker);
  gpAnalyzer-&gt;AttachDecoder(*gpBufferDecoder);</pre>

<p>Note that the static storage qualifier is required or else the
decoder will be destroyed when control passes out of the
function. Alternatively, the decoder could be created dynamically
with new, in which case it must be deleted in the CTCLGrammerApp
class destructor.</p>

<p><a href="#Top">Top</a></p>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>

<hr>

<p>Last Modified: <!--webbot bot="Timestamp" s-type="EDITED"
s-format="%B %d, %Y" startspan -->April 18, 2001<!--webbot
bot="Timestamp" endspan i-checksum="17669" --> by: <a
href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a><br>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>
</body>
</html>
