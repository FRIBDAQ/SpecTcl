Content-type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of CLanguageTraceCallback</TITLE>
</HEAD><BODY>
<H1>CLanguageTraceCallback</H1>
Section: NSCL Data Analysis packags (3)<BR>Updated: 0.1<BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>


<BR>



<PRE>
<BR>
<HR></PRE>



<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

CLanguageTraceCallback - A trace callback object that bridges to unbound
functions
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>


<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/CLanguageTraceCallbacks.h">CLanguageTraceCallbacks.h</A>&gt;

class CTCLInterpreter;


typedef char* (VariableTraceCallback)(Tcl_Interp*, char*, char*, int, void*);


class CLanguageTraceCallback : public CVariableTraceCallback
{
 public:
  CLanguageTraceCallback(VariableTraceCallback* pCallback,
                          void*                  pClientData);
};

#endif


</PRE>

</DL>

<P>

<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<B>CLanguageTraceCallback</B> provides a pre-built trace callback you can
instantiate and register on a CTCLTracedVariable to create an unbound function
callback.  Unbound functions are C++'s terminology for functions that are not
members of a class.  CLanguageCallback also allows you to register a callback
written in C or any other language.
<A NAME="lbAE">&nbsp;</A>
<H2>PUBLIC INTERFACE</H2>

<DL COMPACT>
<DT><B>typedef char* (VariableTraceCallback)(Tcl_Interp*, char*, char*, int, void*);</B><DD>
This typedef defines the call signature of the unbound callback function.  The
first parameter is a pointer to the Tcl interpreter.  Note that this is the
interpreter itself, not the object wrapping of the interpreter that the TCL++
library usually uses.   The second parameter, is a pointer to tha null
terminated character string that is the name of the variable that fired the
trace. If the trace fired on an array element,the third parameter is a pointer
to the name of the element, otherwise it is a a NULL.  The fourth parameter are
flags indicating why the trace fired. It will be one of the
flags <B>TCL_TRACE_READS, TCL_TRACE_WRITES, TCL_TRACE_UNSETS</B> or.
<BR>&nbsp;<B>TCL_TRACE_DESTROYED</B>&nbsp;will&nbsp;be&nbsp;set&nbsp;if&nbsp;the&nbsp;trace&nbsp;is&nbsp;getting&nbsp;removed,&nbsp;an
finally, <B>TCL_INTERP_DESTROYED is set if the interpreter is getting
destroyed.
The final parameter is a user supplied parameter which is passed without
interpretation to the callback.
<DT>CLanguageTraceCallback(VariableTraceCallback* </B><I>pCallback</I><B>, void* </B><I>pClientData</I><B>);<DD>
The constructor for CLanguageTraceCallback</B> objects allows you to specify
two parameters. <I>pCallback</I> is a pointer to a function of type
<B>VariableTraceCallback</B>.  This designates the callback function.  The
second parameter is saved by the callback object and passed without
interpretation to <I>pCallback</I> when the callback fires.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>EXAMPLES</H2>

&lt;none yet&gt;
<A NAME="lbAG">&nbsp;</A>
<H2>SEE ALSO</H2>

<A HREF="/cgi-bin/man/man2html?3+CTracedVariable">CTracedVariable</A>(3) <A HREF="/cgi-bin/man/man2html?3+CVariableTraceCallback">CVariableTraceCallback</A>(3), <A HREF="/cgi-bin/man/man2html?3+TracingIntro">TracingIntro</A>(3)
<P>

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">PUBLIC INTERFACE</A><DD>
<DT><A HREF="#lbAF">EXAMPLES</A><DD>
<DT><A HREF="#lbAG">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 14:18:39 GMT, February 25, 2005
</BODY>
</HTML>
