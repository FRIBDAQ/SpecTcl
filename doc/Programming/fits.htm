<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
  <meta http-equiv="content-type" content="text/html; charset=windows-1250">
  
  <title>Extending SpecTcl's Fit subsystem.</title>
  </head>
  <body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tr>
    <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif" alt="nscl_logo_small.gif (2463 bytes)" width="63" height="52"></a></th>

    <td width="79%">

      <h1>Extending SpecTcl's fitting subsystem</h1>
    </td>
    <td width="12%"><a href="../index.htm"><img src="../images/HH00706_.jpg" alt="HH00706_.jpg (6530 bytes)" width="192" height="84"></a></td>
  </tr>
</table>
<a href=../programmers_guide.htm>Programmer's guide</a>
<h2>Background</h2>
<p>
  The SpecTcl fit subsystem is extensible.  This means that it is possible for
  users to add custom fit types to the program.  This section describes
  enough of the structure of the SpecTcl fitting subsystem to give you
  a basic understanding of the steps needed to add a new fit type.
  The second section of this page describes the step-by-step procedure
  for adding a new fit type to SpecTcl.
</p>
<p>
  The SpecTcl Fit command is based on several interacting classes.  The ones which
matter to you are:
<ul>
  <li><em>CFit</em> subclasses of <em>CFit</em> implement concrete fit mechanisms.
        The next section will include a description of the interface the <em>CFit</em>
        abstract base class exports</li>
  <li><em>CFitFactory</em> is a class with a few static member functions.
     The fit command passses the fit type name to a <em>CFitFactory</em>.  The
     factory is supposed to determine if a fit of that type name has been
     supported and, if so, produce an object of the appropriate type.
     </li>
  <li><em>CFitCreator</em> is a base class for a helper class.  Concrete
    subclasses of <em>CFitCreator</em> are registered with the factory.
    These subclasses are used by the factory to create the correct fit objects.
    </li>
</ul>
</p>
<h2>How to create a new fit type</h2>
<p>
  The steps you must follow to create a new fit type are to:
  <ol>
     <li>Write a new fit class that implements the new fit type.</li>
     <li>Write a new fit creator class that creates an instance (object)
         of the class on behalf of the factory.</li>
    <li>Register your fit creator with the fit factory so that it knows when to
        ask it to create a fit object.</li>
    <li>Incorporate all your new code into your tailored SpecTcl and build it.</li>
  </ol>
</p>
<h3>The <em>CFit</em> class: </h3>
<p>
  The part of the <em>CFit</em> abstract base class  interface you need to be
  concerned with is shown below:
<pre>
class CFit : public  CNamedItem     
{
  // Public data types.
public:
  struct Point {                // A point for the fit.

    double x;
    double y;
  };
  typedef std::vector<Point> PointArray; // Point array is a std::vector of points.
  typedef PointArray::iterator PointIterator;

  typedef std::pair<std::string, double> FitParameter;
  typedef std::vector<FitParameter> FitParameterList;
  typedef FitParameterList::iterator FitParameterIterator;

  typedef enum {
    Accepting,
    Performed
  } FitState;                   //!< State of the fit.
public:
  CFit (std::string name, int id = 0);          // Constructor.
  
protected:
  void SetFitState(FitState state);

// Class operations:

public:
  
  

  void AddPoint (Point p)   ; 
  void ClearPoints();
  PointIterator begin ()   ; 
  PointIterator end ()   ; 
  size_t size ()   ; 
  FitState GetState ()  const ; 

 
  
 
  // Pure virtual functions must be implemented by
  // subclasses.

  virtual CFit* clone() = 0;
  virtual   void Perform ()   = 0 ; 
  virtual  double operator() (double x)  =0 ; 
  virtual  FitParameterList GetParameters () =0  ; 
  virtual  std::string Type() const  = 0;
  virtual  std::string makeTclFitScript() = 0;
 
};
</pre>
Note that the entire class definition is in &lt;CFit.h&gt;.
</p>
<p>Your job will be to implement the pure virtual members of this class:
<table border="1">
  <tr align="top"><td><em>clone</em></td>
                  <td>This member function should return a new fit object that
                      is a functional copy of *this.  In general, if you have
                      implemented a copy constructor, this can be 
                      implemented as:
<pre>
return new CMyFitType(*this);
</pre>
                      where you must substitute your own fit type for the
                      <em>CMyFitType</em> class above.
                      </td></tr>
    <tr align="top"><td><em>Perform</em></td>
                    <td>Perform the fit.  The fit points can be gotten
                       by iterating through them using
                       <em>begin()</em>, and <em>end()</em>.
                       Once successfully performed, <em>SetFitState</em>
                       must be called to set the fit state to <em>CFit::Performed</em>.
                       </td></tr>
    <tr align="top"><td><em>operator()</em></td>
                    <td>Is expected to return the value of the fit evaluated at
                    its parameter.  If the fit has not yet been performed, this
                    should throw an error.  Note that <em>FitState</em> can be
                    called to determine if the fit has been performed.
                    </td></tr>
    <tr align="top"><td><em>GetParameters</em></td>
               <td> Should return the list of parameter
                name value pairs for the fit.  If the fit has not yet been performed,
                this shouldthrow an errror.
                </td></tr>
    <tr align="top"><td><em>Type</em></td>
                    <td>Must return a string that is the same as the fit type
                    (e.g. the gaussian fit returns "gaussian").</td></tr>
    <tr align="top"><td><em>makeTclFitScript</em></td>
                    <td>This function must return a Tcl script named
                       <em>fitline</em> that takes a single parameter
                       and returns the height of the fit at that channel.</td></tr>
    
</table>

<h3>The <em>CFitCreator</em> class</h3>
<p>Fit creator objects are used by the fit factory to generate the correct type
of fit object.  In order to add a fit type you will need to create your fit
class, and a class that is subclassed from <em>CFitCreator</em> that creates
a new object of your fit type.
</p>
<p>
  The fit creator class has the following key interfaces:
<pre>
class CFitCreator      
{
public:
  
  virtual   CFit* operator() (std::string name, int id=0)   = 0 ; 
  virtual   std::string DescribeFit()  = 0;
};

</pre>

</p>
<p>
  Your fit creator subclass must implement the pure virtual functions as follows:
  <table border="1">
    <tr align="top"><td><em>operator()</em></td>
                    <td>Create and return a new fit of the type you are implementing.
                       Usually this is done as follows:
                       <pre>
return new CMyFit(name id) ;
</pre>
                        where you must substitute the name of your fit type
                        for <em>CMyFit</em>.</td></tr>
    <tr align="top"><td><em>DescribeFit</em></td>
                    <td>Should return a string that describes the fit type that
                        this creator creates e.g. "gaussianl  - Gaussian fit on a linear background".
                        </td></tr>
  </table>
<h3>Registering your fit creator</h3>
<p>
   Once you have written the classes descdribed above, you must make your fit type
   known to the fit factory.  This is done by associating your fit creator with
   a fit type keyword.  To do this, in your MySpecTclApp.cpp file, in some
   function such as <em>AddCommands</em>, add a call to 
   <em>CFitCreator::AddFitType</em> e.g:
<pre>
    CFitCreator::AddFitType(string("myfitform"), new CMyFitCreator());
</pre>
<hr />
<p>Last Modified: October 23, 2006 <br />
 by: <a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>
  </body>
</html>
