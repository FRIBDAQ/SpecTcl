<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>Writing Xamine Restart Handlers.</title>
</head>

<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>Writing Xamine Restart Handlers.</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>

<p>
This document describes how to detect when Xamine restarts and to execute
application speficic code when that happens.
<ul>
  <li>First we provide a <a href="#motivation">motivation</a> for this
  capability</li>
  <li>Next we describe <a href="#howitworks">how the facility works</a> at a
  high level</li>
  <li>Finally we describe <a href="#sample">a sample use</a> of this
  facility. </li>
</ul>

<a name="motivation" />
<h2>Motivation</h2>

<p>Now that SpecTcl implements interfaces to the Xamine client button boxes
(see <a href="xaminebuttons.htm">Xamine client button programming</a>), SpecTcl
applications may perform application specific actions at initialization time
for Xamine.  If Xamine exits (either through user action or as the result of a
defect), SpecTcl detects the exit and restarts a new instance of Xamine.
</p>

<p>
Without a mechanism to allow the user to detect Xamine restarts, SpecTcl
applications would not be able to recreate the client button box when Xamine
restarts.  This would have the effect or stripping the application of some of
its functionality at an unpredictable time.  This is clearly undesirable.
</p>

<p>
In order to deal with this issue, SpecTcl 3.2 and later include a facility
for registering one or more event handlers that will execute when SpecTcl
restarts Xamine.   This would allow an application to re-create any Xamine
client buttons displayed when the previous instance of Xamine exited.
</p>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<a name="howitworks">
<h2>How it works</h2>

<p>
When SpecTcl initializes, it starts Xamine in code located in the base class of
the class you create in <tt>MySpecTclApp.cpp</tt>.  At that time, it
establishes a Tcl file handler to inform the Tcl/Tk event loop when the pipe
through which Xamine sends gates becomes readable.  When this pipe becomes
readable, code in an object of type <em>CXamineEventHandler</em> is executed
to process the event.
</p>

<p>
If Xamine exits, it will close its end of the pipe. When this happens, SpecTcl
will see the pipe as readable.  When the pipe becomes readable, SpecTcl tests
for the presence of the Xamine process.  If this test fails, SpecTcl executes
the Xamine restart code.  This restart code now has hooks that allow the
application programmer to install user written handlers to be called after
Xamine has been restarted.
</p>

<p>
Let's get down to the specifics of the implementation that you need to know to
use it.
<ul>
  <li>The function <tt>CMySpecTclApp::SelectDisplayer</tt> in turn invokes
  <tt>CTclGrammerApp::SelectDisplayer</tt>.  That function starts up Xamine and
  establishes the Xamine Event handler.  Code you add to
  <tt>CMySpecTclApp::SelectDisplayer</tt> can fetch a pointer to that event
  handler by invoking <tt>getXamineEvents</tt>. This returns a pointer to a
  <em>CXamineEventHandler</em>
  </li>
  <li>
     The key parts of the definition of <em>CXamineEventHandler</em> are shown
     below:
    <pre>

class CXamineEventHandler
{
  // Base class for button handlers:
public:
&hellip;
  class CRestartHandler {
  public:
    virtual void  operator()() = 0;
  };
&hellip;
  typedef std::list<CRestartHandler*> RestartHandlerList;
private:
&hellip;
  RestartHandlerList m_restartHandlers;
public:
&hellip;
  void addRestartHandler(CRestartHandler&amp; handler);

    </pre>
    <ul>
      <li>The <em>CRestartHandler</em> class is the abstract base class for all
      handler objects that execute Xamine Restart application specific code.
      It's <tt>operator()</tt> is called when Xamine has been restarted after
      an exit.
      </li>
      <li>
      The Xamine event handler object maintains a list of established handlers
      in its <tt>m_restartHandlers</tt> data element.  This member is an
      ordered list, where the order of the list is the order in which handlers
      were registered an the order in which they will be called.
      </li>
      <li>The event processor's <tt>addRestartHandler</tt> member function adds
      a pointer to a restart handler to the end of the list (the object is
      passed in by reference however).
      </l>
    </ul>
    <li>Note that when a restart handler has been established, it is not
    removed after it is executed. In other words, it is only necessary to
    establish the restart handlers once, not each time Xamine started.
    </li>
</ul>
</p>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<a name="sample" />

<h2>A sample use</h2>
<p> This section shows how to modify  the sample button code in
<a href="xaminebuttons.htm#example">SpecTcl's interface to Xamine Client
Buttons</a> so that the button box and its button gets rebuilt whenever Xamine
is restarted.  Take a little time to familiarize yourself with that example.
</p>
<p>
No modifications will be needed to the <em>CFitButton</em> class.  We will
instead:
<ul>
  <li> Create an Xamine restart handler class and an object that is an instance
  of it.</li>
  <li> Have that object create the button box and the CFitButton as needed</li>
  <li> Ask it to create the button box and fit button object initially</li>
  <li> Add the object the set of handlers SpecTcl calls on Xamine restart</li>
</ul>
</p>

<p>
The definition and implementation of our restart handler is:
<pre>
class CButtonBoxSetup : public CXamineEventHandler::CRestartHandler
{
private:
  CFitButton* m_pButtons;
public:
  CButtonBoxSetup() : m_pButtons(0) {}
  virtual void operator()() {
    delete m_pButtons;
    Xamine_DefineButtonBox(4,4);
    m_pButtons = new CFitButton(myApp.getXamineEvents());
  }
};
</pre>
This code is added to <tt>MySpecTclApp.cpp</tt> so that it has access to
<tt>app</tt> the instance of <em>CMySpecTclApp</em> that file creates.
</p>
<p>
The class takes advantage of the fact that the <tt>delete</tt> statement can be
given a null pointer, and that doing so is a no-op.  Therefore the constructor
initializes the <tt>m_pButtons</tt> member to 0 (null), so that
<tt>operator()</tt> does not need to worry about whether or not the button has
already been created.
</p>

<p>
The only other thing we need to do is modify
<tt>CMySpecTclApp::SelectDisplayer</tt>
<pre>
void 
CMySpecTclApp::SelectDisplayer(UInt_t nDisplaySize, CHistogrammer& rHistogrammer)  
{ 
  CTclGrammerApp::SelectDisplayer(nDisplaySize, rHistogrammer);


  // Hook in the button box and ensure that it gets re-hooked on exit.

  CXamineEventHandler* pEventHandler = getXamineEvents();
  CButtonBoxSetup*     pSetup        = new CButtonBoxSetup;
  pEventHandler->addRestartHandler(*pSetup);
  
  (*pSetup)();			// Get it set up the first time.

}
</pre>

The line <tt>(*pSetup)()</tt> manually invokes the handler function causing the
creation of the initial button box and button.  After that, whenever SpecTcl
restarts, the handler code will automatically recreate the button box and
button.
</p>

<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's guide</a>

<hr>
<address><a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a></address>
<!-- hhmts start -->Last modified: Fri Apr  6 12:05:03 EDT 2007 <!-- hhmts end -->
</body> </html>
