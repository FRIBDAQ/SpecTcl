<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-15">
<title>SpecTcl Plugins Guide</title>
</head>

<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>SpecTcl's support for Super Events.</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>

<p>
    This guide describes SpecTcl's support for Super Events.  A Super Event is a single
    event from the point of view of the structure of the buffer, however that single event
    contains several physics events.  Block mode data taking systems will often create
    super events.  Each buffer read from the hardware, in this case, contains several events,
    and reformatting requires time that can eat into the deadtime.
</p>
<p>
    SpecTcl's data analysis, prior to version 3.2 decremented the number of events remaining in a buffer
    each time the event processing pipeline completed processing.  Support now is provided to control
    when this decrement actually happens (normally after processing the last event in the super event.
</p>
<p>
    In order to retain compatible behavior, by default, SpecTcl will decrement the event count after each
    execution of the event processing pipeline.  This decrement can be inhibited by calling
    <tt>CAnalyzer::entityNotDone()</tt>.
</p>
<p>
    A typical use-case for this function in an event processor would be:
    <pre>
rAna.SetEventSize(sizeOfSubEvent);
if (!lastSubEvent) {
  rAna.entityNotDone();
}
    </pre>
    Where <tt>lastSubEvent</tt> is assumed to be a flag that indicates the last subevent of a super
event has just been processed.  Additionally, <tt>sizeOfSubEvent</tt> is assumed to be the size of the
subevent just processed (e.g. adding sizeOfSubEvent to the event pointer passed to the event processor
will point to the next sub-event or to the next event as the case may be.
</p>
<br />
<p>
<a href="#top">Top</a>
<a href="../programmers_guide.htm">Programmer's Guide</a>
</p>

<hr>
<address><a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a></address>
<!-- hhmts start -->Last modified: Sun Apr  8 19:39:00 EDT 2007 <!-- hhmts end -->
</body>
</html>