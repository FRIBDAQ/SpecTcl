This is gri.info, produced by makeinfo version 4.3 from gri.texi.

INFO-DIR-SECTION Scientific Applications
START-INFO-DIR-ENTRY
* Gri: (gri).  Programming language for scientific illustration
END-INFO-DIR-ENTRY


File: gri.info,  Node: Installing gri-mode.el,  Next: Step 1,  Prev: Screenshot 4,  Up: Emacs Mode

Installing gri-mode.el, the nuts and bolts.
===========================================

   The Emacs `gri-mode.el' file is now bundled with gri, so odds are
you already have it.  If not, you will find it at gri's web site
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/gri/gri/gri-mode.el

   The following installation steps appear a *bit* complicated.  That's
only because gri has changed how it gets installed a few times, and
gri-mode.el works with all of these various methods.  If you use gri
from a Linux package (Debian or Red Hat) or if you compiled it yourself
using the default configuration, you won't need to do much.

   To install `gri-mode.el', follow these 4 steps.  If gri-mode is
already installed, you can skip the first two steps and move on to the
last two, in which you tell Emacs that you'd like to use Gri mode when
you edit files that end in `.gri', the Gri suffix.  (Actually, if
you're using Debian linux, you can skip all of these steps since the
system will assume that you want gri-mode if you're editing a Gri file.)

* Menu:

* Step 1::  Placing gri-mode.el where Emacs can find it.
* Step 2::  Configuring gri-mode to where gri lives on your system.
* Step 3::  Telling emacs to load gri-mode
* Step 4::  Extra user configuration of gri-mode.


File: gri.info,  Node: Step 1,  Next: Step 2,  Prev: Installing gri-mode.el,  Up: Installing gri-mode.el

Placing gri-mode.el where Emacs can find it.
--------------------------------------------

   (Those using gri from gri's *RPM* package, a *Debian* package or a
*Red Hat* package users can skip this, as it is done for them)

   Extra `.el' files like `gri-mode.el' that are not part of Emacs
should be stored in a directory where Emacs will find them when you ask
it to load them.  The files should therefore be found in Emacs'
*load-path*.  To see the directory list currently in the load-path, do
this in Emacs:

     C-h v load-path

   If you have access to system directories, put gri-mode.el in a
*site-lisp* directory, such as `/usr/local/share/emacs/site-lisp/' That
way all users will have access to the files.

   If you don't have access to a site-lisp directory (e.g. you have
only a user account), then create a directory where your extra `.el'
files will be stored and add it to Emacs' load-path.  For example, say
you created the directory `~/emacs' and stored gri-mode.el there, you
would then put this near the top of your `~/.emacs' file:

     (setq load-path (cons "~/emacs" load-path))


File: gri.info,  Node: Step 2,  Next: Step 3,  Prev: Step 1,  Up: Installing gri-mode.el

Telling gri-mode where gri resides
----------------------------------

   (Those using gri from gri's *RPM* package, a *Debian* package or a
*Red Hat* package users can skip this, as it is done for them)

   You may skip this section if gri is installed on your system as
`/usr/local/bin/gri-2.12.7' and `/usr/local/share/gri/2.12.7/gri.cmd'
(the default when compiling gri yourself).  If not, then you may need
to set the Emacs variable `gri*directory-tree' in a startup file such
as in your `~/.emacs' file.

   The Emacs variable `gri*directory-tree' is used to configure
gri-mode to tell it where Gri is installed on your system. For the
default gri installation paths used in this gri release, gri-mode
expects to find the gri executable and the file gri.cmd as:
`gri*directory-tree/2.12.7/gri.cmd' and `/usr/local/bin/gri-'2.12.7
where `gri*directory-tree' is by default set to `/usr/local/share/gri/'.

   If you have only one version of gri installed on your system,
gri-mode will also look to find `gri.cmd' and the gri executable like
so:
  1. Gri executable in the PATH, with startup file
     `gri*directory-tree/gri.cmd'.

  2. Gri executable in the PATH, with startup file
     `gri*directory-tree/lib/gri.cmd'.

  3. Gri executable `gri*directory-tree/bin/gri', with startup file
     `gri*directory-tree/lib/gri.cmd'.

   However, gri-mode was designed to support, and ease the use of,
*multiple installed versions* of gri.  To use this feature, you must
use the gri version number as a directory name under the
`gri*directory-tree' path, like this:

     gri*directory-tree/VERSION/bin/gri
     gri*directory-tree/VERSION/lib/gri.cmd

   (e.g. `/opt/gri/2.040/bin/gri' and `/opt/gri/2.040/lib/gri.cmd' with
`gri*directory-tree' set to `"/opt/gri"')

   or without the *lib* and *bin* subdirectories if the executable is
found in the PATH named like `gri-VERSION' (This is the way Debian
packages are set up): the file `gri*directory-tree/VERSION/gri.cmd' and
the `gri-VERSION' executable in the PATH (e.g.
`/usr/share/gri/2.1.17/gri.cmd' and `/usr/bin/gri-2.1.17' with
`gri*directory-tree' set to `"/usr/share/gri"')

   *Important note:* You may have more than one tree and make a list of
them:

     (setq gri*directory-tree '("/opt/gri/" "/usr/share/gri/"))

   *Examples:*

  1.  If you use a RedHat package  installed like:

          /usr/bin/gri
          /usr/share/gri/gri.cmd

     then you'd also use:

          (setq gri*directory-tree "/usr/share/gri/")

     but gri-mode would know of only one installed version of gri.

  2.  If you use a Debian GNU/Linux installation like:

          /usr/bin/gri -> /usr/bin/gri-2.1.17
          /usr/share/gri/2.1.17/gri.cmd

     then you'd use:

          (setq gri*directory-tree "/usr/share/gri/")

     Note that all gri binaries must exist in the path with version
     number  suffixes (e.g. `gri-2.1.17') since there is no
     `/usr/share/gri/2.1.17/bin/' directory (using a similar structure
     to `opt/gri' below) where gri-mode can find the binary
     corresponding to a given version number.

  3.  If you had multiple versions of Gri installed like so (this
     reflects  the installation paths used in older gri releases):

          /opt/gri/2.040/bin/gri
          /opt/gri/2.040/lib/gri.cmd
          /opt/gri/2.041/bin/gri
          /opt/gri/2.041/lib/gri.cmd

     then you'd use:

          (setq gri*directory-tree "/opt/gri/")



File: gri.info,  Node: Step 3,  Next: Step 4,  Prev: Step 2,  Up: Installing gri-mode.el

Telling emacs to load gri-mode
------------------------------

   (Those using a *Debian* package can skip this, as it is done for
them)

   To tell emacs to use this mode with `.gri' files, you can load
gri-mode whenever a new emacs session is starting by adding the
following line to your `~/.emacs' file:

     (require 'gri-mode)

   This is a good method when you only start emacs once a week and use
it for every file you edit (as you should).

   If you startup a fresh emacs every time you edit then you probably
only want to load gri-mode into emacs when you need it.  In that case,
instead of the `require' statement above, add the following lines to
your `~/.emacs' file:

     (autoload 'gri-mode "gri-mode" "Enter Gri-mode." t)
     (setq auto-mode-alist (cons '("\\.gri$" . gri-mode) auto-mode-alist))

   The first line tells Emacs that it will find out what it needs to
know about running the command `M-x gri-mode' by loading the file
`gri-mode.el'.  The second line tells it to run the command `M-x
gri-mode' when a file with extension `.gri' is visited (thus using
gri-mode with all those files).


File: gri.info,  Node: Step 4,  Next: Major Gri-mode commands,  Prev: Step 3,  Up: Installing gri-mode.el

Extra user configuration of gri-mode
------------------------------------

   *All users should do this at some time.*

   At this point, gri-mode should start up when you edit a gri file.
You may optionally customize gri-mode by:

  1.  using the Custom interface (see the Help or Gri-Help menu or run
     the  command `M-x gri-customize'), or

  2.  manually setting variables in your `~/.emacs' file.  These are
     briefly described by typing `C-h m' while in gri-mode.  Then, for
     further infomation, use emacs' `describe-variable' command, bound
     to `C-h v'.  For example, for more information about the
     `gri*WWW-program' variable, you'd type `C-h v gri*WWW-program'
     (note that emacs does <Tab> completion, so pressing the  <Tab> key
     after typing-in gri will display all gri related  variables.)


File: gri.info,  Node: Major Gri-mode commands,  Next: Gri command names,  Prev: Step 4,  Up: Emacs Mode

Major Gri-mode commands.
========================

   This section describes the major gri-mode commands, briefly showing
how they can increase your productivity.

* Menu:

* Gri command names::     How gri-mode names all gri commands.
* Possible completions::  A list of all valid commands matching so far.
* Command abbreviations:: Abbreviating many words at one time.
* Variable completion::   Completion of builtin variable and synonyms.
* Editing the syntax::    What to do after gri-complete.
* User commands::         gri-mode knows about ~/.grirc.
* Gri code fragments::    Use them as short-cuts.
* Info interface::        Getting help about the current command.


File: gri.info,  Node: Gri command names,  Next: Possible completions,  Prev: Major Gri-mode commands,  Up: Major Gri-mode commands

How gri-mode names Gri commands
-------------------------------

   A major feature of Gri mode is the completion of partially typed
commands.  Let's examine how gri-mode decides to name gri commands.  A
name is determined by removing bracketed options from the syntax line
of a given command.  This is different from what the gri parser does.
In this way, the gri command

     draw label "\string" [centered|rightjustified] at .x. .y. [cm] [rotated .deg.]

is named by gri-mode simply `draw label at'.  Note how the `at' stays
in the name because it is not optional.  So when you see `draw label
at' in gri-mode's menus or prompts, you are more likely to associate
the name with what the command actually does.


File: gri.info,  Node: Possible completions,  Next: Command abbreviations,  Prev: Gri command names,  Up: Major Gri-mode commands

Possible completions of gri command names
-----------------------------------------

   When you press <M-tab> to complete a command name (or a variable or
synonym name as described below), gri-mode will expand it as much as it
can and do nothing further.  If you type in nothing more and insist by
using `gri-complete' (<M-tab>) again, gri-mode will respond by showing
all possible completions in the `*completions*' buffer.  In this way
you can use `gri-complete' word-by-word to abbreviate commands without
ever displaying completions, like you would for file completion in
emacs or bash.

   If a completion is ambiguous, but could be exact, invoke
gri-complete a second time to complete it. e.g.

     sh<M-tab>

expands to

     show

and informs you that 12 possible completions exists; then

     show<M-tab>

will display these completions in the completions buffer; then typing
<M-tab> again forces completion to a complete but not unique
possibility:

     show .value.|{rpn ...}|"\text" [.value.|{rpn ...}|text [...]]

   Completions are shown immediately (without invoking gri-complete
again) if the completions window is already displayed or if there are 3
possibilities or less.  In this case they are displayed in the
minibuffer.

   Note: The `*completions*' window is deleted after a command is fully
completed.  `gri-complete' uses its own `*completions*' buffer, which
is not displayed in the buffer-list to avoid clutter.


File: gri.info,  Node: Command abbreviations,  Next: Variable completion,  Prev: Possible completions,  Up: Major Gri-mode commands

Command name abbreviation
-------------------------

   gri-mode uses command name abbreviations in a non-Unix way in that
all words that compose the command name may be abbreviated (and not only
the word preceding the cursor).  For example, one can type in

     dr x a<M-tab>

and it will expand1 all the words to

     draw x axis [at bottom|top|{.y. [cm]} [lower|upper]]

   This is reminiscent of VMS, which the author was used to when
gri-mode.el was initially created.  It's likely that a gri-mode.el
rewritten from scratch wouldn't have this feature since it's not part
of the Unix mindset.


File: gri.info,  Node: Variable completion,  Next: Editing the syntax,  Prev: Command abbreviations,  Up: Major Gri-mode commands

Variable (and synonym) completion
---------------------------------

   It's also possible to do <M-tab> completion on gri builtin variable
and synonym names while editing a command.  Simply type in the leading
`.' (dot) or `\' (slash) character and invoke completion with <M-tab>.

   For example,

     ..x<M-tab>

displays a completions buffer listing the possible completions:

     ..xmargin..                        ..xsize..
     ..xleft..                          ..xright..
     ..xlast..

Typing in an extra `m' will complete to `..xmargin..' and the following
help information will be displayed in the minibuffer:

     margin to left of axis area. Default is 6 cm.


File: gri.info,  Node: Editing the syntax,  Next: User commands,  Prev: Variable completion,  Up: Major Gri-mode commands

Editing the syntax output by gri-complete
-----------------------------------------

   You might wonder what to do with all the bracketed code left behind
by `gri-complete'.  It certainly won't go through the gri parser
without error, so you have to edit it out.

   The tools provided in gri-mode are `gri-option-select' (`C-C C-o')
and `gri-kill-option' (`C-C C-k') to narrow in on a particular gri
command, given a syntax description left on the line by `gri-complete'.
The cursor location is used to decide which gri command(s) to narrow
to.

   For example, if `gri-complete' is used on the line `dr x a', the
result will be a line like

     draw x axis [at bottom|top|{.y. [cm]} [lower|upper]]

   This is the gri way of describing many commands at once.  The above
syntax description is a shortcut formulation for all of:

     draw x axis
     draw x axis at bottom
     draw x axis at bottom top
     draw x axis at bottom bottom
     draw x axis at top
     draw x axis at top top
     draw x axis at top bottom
     draw x axis at .y. cm
     draw x axis at .y. cm lower
     draw x axis at .y. cm upper

   The `gri-option-select' (`C-C C-o') command provides easy navigation
to select one of these commands.  The narrowing process is governed by
the cursor position.  For example, to get the command narrowed down to

     draw x axis at bottom [lower|upper]

place the cursor somewhere in the word `bottom' and invoke
`gri-option-select'.  To complete the narrowing process, selecting

     draw x axis at bottom lower

move the cursor to some place in the word `lower' and invoke
`gri-option-select again'.  On the other hand, to get

     draw x axis at bottom

you would have put the cursor over either the word `lower' or `upper',
and invoke `gri-kill-option' (`C-C C-k') instead.

   *NOTE:* you might want to practice using this example to learn how
to do it.  If you make a mistake, note that the normal Emacs undo works.


File: gri.info,  Node: User commands,  Next: Gri code fragments,  Prev: Editing the syntax,  Up: Major Gri-mode commands

User commands with gri-mode
---------------------------

   User gri commands defined in `~/.grirc' (*Note Resource File::) or at
the beginning of a gri file can also be used with `gri-complete'.  Note
that user commands are added from the current buffer whenever
`gri-mode' is invoked.  They may override previous user commands, but
not gri system commands.


File: gri.info,  Node: Gri code fragments,  Next: Info interface,  Prev: User commands,  Up: Major Gri-mode commands

Inserting gri code fragments in Emacs
-------------------------------------

   Since gri version 1.063, gri has special commands that begin with a
question mark `?'.  These special commands have no options, and are
composed only of standard gri commands.  Their purpose is to provide a
short-cut for entering many lines of gri at once (e.g.  bits of sample
code about contouring grids, or your own preamble which you use at the
time to set fonts and line widths).

   `gri-complete' acts in a special way with these commands, by
replacing the abbreviated name which you are completing by all the lines
contained within the gri command.

   The user is allowed to define new fragments in `~/.grirc', and also
to override the gri system fragments.  You can therefore fine-tune gri's
fragments to your taste.  To see the names of all gri fragments, type in
a question mark at the beginning of a line in a gri buffer and press
<M-Tab> twice to `gri-complete' it and display possible choices.  The
gri commands used to replace them are found in the `*gri-syntax*'
buffer.


File: gri.info,  Node: Info interface,  Next: Other features,  Prev: Gri code fragments,  Up: Major Gri-mode commands

Info interface for help on current command
------------------------------------------

   The Info system is built into Emacs (`C-h i'), and provides an easy
method of navigation on-line help (including this manual).  We suggest
that you install the gri info files on your system (they are already
installed with packaged versions of gri in Debian or Red Hat formats).

   Not only will Info (`C-h i') be able to navigate through all of
gri's inline manual, but gri-mode's function `gri-info-this-command'
(`C-c C-i') will display the correct info page about the gri command
being edited on the current line.

   Additionally, gri-mode has the command `gri-info' (`C-c M-i') which
will prompt you (using <tab> completion) for any command to list Info
about.  There's also a menu-bar pull-down menu which lists all gri
commands, and you can get to Info from that too.


File: gri.info,  Node: Other features,  Next: Dealing with many Gri versions,  Prev: Info interface,  Up: Emacs Mode

Other features of gri-mode
==========================

   * `IMenu support': IMenu is a GNU/Emacs package used to source code
     files.  It can be setup for a particular mode to list a menu of
     function definitions and variable declarations.  In gri-mode, the
     IMenu is available from the menubar and provides links to `new
     command declarations' as well as value settings for `variables'
     and `synomyns'.

   * `Toolbar support': XEmacs21 and Emacs-21 have support for a
     toolbar (a set of iconic buttons that are shortcuts for commands),
     however the two editors don't not have compatible toolbar setups.
     Currently gri-mode only defines a single icon for XEmacs (to run
     gri on the current buffer) and defines three for GNU/Emacs (to run
     gri, to view the postscript file, and to lookup Info about the
     command on the current line).

   * `Idle Help': When GNU/Emacs sits idle with the cursor on a command
     line, it looks up any defaults the command may have and displays
     the information in the minibuffer.  For example, sitting on a line
     that says `set font size 10', it will display `set font size:
     default is 12 point in variable ..fontsize..'.


File: gri.info,  Node: Dealing with many Gri versions,  Next: Filename arguments when running gri,  Prev: Other features,  Up: Emacs Mode

Dealing with many Gri versions, gri-mode handles it.
====================================================

   Earlier we explained that you might have many versions of gri
installed on your system (*Note Installing gri-mode.el::).  You may use
gri-mode to access these various versions with the following gri-mode
commands:

   * `gri-set-version': Tells gri-mode to use a given version as the
     default for all your gri files.  Tab completion is available
     listing all available versions (if they are not all listed, that
     means that the Emacs variable `gri*directory-tree' is not
     correctly set (*Note Installing gri-mode.el::)).  Your selection
     is stored in the file `~/.gri-using-version' and is remembered
     across editing sessions. If you select *default* as your answer,
     gri-mode reverts to using the default version of gri as installed
     on your system (which may change after you update it) and deletes
     the `~/.gri-using-version' file.

   * `gri-set-local-version': Tells gri-mode to use a given version of
     gri *this* gri file (the one currently being edited when you
     invoke the command).  Tab completion is again available to list
     all available versions.  Your selection overrides the default
     version selected by `gri-set-version' for this file, and is stored
     as an Emacs variable at the bottom of the gri file.  It is
     remembered across editing sessions. If you select *default* as
     your answer, gri-mode reverts to using the default version of gri
     as selected by `gri-set-version' and deletes the Emacs variable
     setting at the bottom of the gri file.


File: gri.info,  Node: Filename arguments when running gri,  Next: History,  Prev: Dealing with many Gri versions,  Up: Emacs Mode

Filename arguments when running gri
===================================

   Usually, gri is run specifying only a gri command file to process,
which lends itself well to the gri-mode command `gri-run'.  But Gri can
be also invoked from the command line using optional arguments, usually
filenames but not necessarily, e.g.

     $ gri somefile.gri datafile.dat datafile2.dat ...

or

     $ gri somefile.gri *.dat

   The arguments are accessed with RPN operators `argc' and `argv'
(*Note Unary Operators::).

   gri-mode provides a method to set the arguments (usually filenames)
to use when `gri-run' is called in a specific gri script.  Use the
gri-mode command `gri-set-command-postarguments' to setup a string that
gri-mode will use, and the gri-mode command
`gri-unset-command-postarguments' to clear it.  For ease-of-use, these
commands are made available from the menubar under the `Perform -> Run
Settings' entries.  The specified string will be stored in the
locally-defined (aka buffer-local) variable `gri-command-postarguments'
and will be written within a gri comment at the bottom of the file such
that Emacs remembers it across editing sessions.


File: gri.info,  Node: History,  Next: Stable Stream,  Prev: Filename arguments when running gri,  Up: Top

History of Gri Versions
***********************

   Gri, like many modern software projects, has two "streams" of
development running side by side.  One is called "stable," the other
"unstable."  _Most users should use the stable stream_, which has been
well tested.  (The unstable version is for users who wish to try out
new features that are under development.)

   Stable versions always have an even number as the middle number in
their version designation, e.g. `2.6.0', while unstable versions always
have an odd number there, e.g. `2.7.0'.  This middle number indicates a
sort of family of related releases.  Within a stable stream, all
versions sharing a given middle number have the same features; new
releases are made only to fix bugs.  Thus, version `2.6.1' fixed bugs
in version `2.6.0'.

   To learn more about the bugs, and their resolution, visit the bugs
page at gri.sourceforge.net
(http://sourceforge.net/tracker/?func=browse&group_id=5511&atid=105511)
and adjust the "status" menu to read "closed".

* Menu:

* Stable Stream::
* Unstable Stream::
* Deprecated Commands::


File: gri.info,  Node: Stable Stream,  Next: Version 2.12,  Prev: History,  Up: History

Stable Stream
=============

   In any given stable stream, only the version with a `0' as the last
number in the triplet has new features; the later versions only correct
flaws.  For example, version `2.6.0' offers new features compared to
any of the `2.4.x' versions, but `2.6.1' differs only in the fixing of
bugs.

* Menu:

* Version 2.12::
* Version 2.10::
* Version 2.8::
* Version 2.6::
* Version 2.4::
* Version 2.2::


File: gri.info,  Node: Version 2.12,  Next: Version 2.10,  Prev: Stable Stream,  Up: Stable Stream

Version 2.12
------------

Version 2.12.7 [2003 Sep 4]
...........................

   *Bug Fixes*
   * Fix SourceForge bug #800022
     (http://sourceforge.net/tracker/index.php?func=detail&aid=800022&group_id=5511&atid=105511)
     AKA Debian bug #208589
     (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=208589), ... did
     not build on some Debian platforms because it was based on an old
     version of `automake'.


Version 2.12.6 [2003 Sep 1: Labour Day]
.......................................

   *New Features*
   * Add `age' RPN function, for testing file ages (*Note
     age-rpn-operator::).


   *Bug Fixes*
   * Fix SourceForge bug #773850
     (http://sourceforge.net/tracker/index.php?func=detail&aid=773850&group_id=5511&atid=105511)
     ... bounding-box is increased by `draw symbol' even if
     (rectangular) postscript clipping is active.

   * Fix SourceForge bug #760130
     (http://sourceforge.net/tracker/index.php?func=detail&aid=760130&group_id=5511&atid=105511)
     ... Solaris cannot compile with <C-l> in Makefile.

   * Fix SourceForge bug #743134
     (http://sourceforge.net/tracker/index.php?func=detail&aid=743134&group_id=5511&atid=105511)
     ... bounding box not limited by `set clip postscript'

   * Fix SourceForge bug #750561
     (http://sourceforge.net/tracker/index.php?func=detail&aid=750561&group_id=5511&atid=105511)
     ... during compilation, `make' rebuilds HTML docs even if
     up-to-date


Version 2.12.5 [2003 May 19: Victoria Day]
..........................................

   *New Features*
   * Apply a patch provided Kawamura Masao, relating to (a) errors in
     the documentation of file locations and (b) a programming error
     hidden behind an unset precompiler flag.

   * Add hexadecimal colornames (*Note pen-color-hexadecimal::).


   *Bug Fixes*
   * Fix SourceForge bug #739761
     (http://sourceforge.net/tracker/index.php?func=detail&aid=739761&group_id=5511&atid=105511)
     ... `draw time stamp' named the command-file incorrectly

   * Fix SourceForge bug #720607
     (http://sourceforge.net/tracker/index.php?func=detail&aid=720607&group_id=5511&atid=105511)
     ... the emacs mode looked for html documentation files in an
     incorrect location on linux/redhat systems


Version 2.12.4 [2003 Apr 06]
............................

   *Bug Fixes*
   * Fix SourceForge bug #696073
     (http://sourceforge.net/tracker/index.php?func=detail&aid=696073&group_id=5511&atid=105511)
     ... did not handle `\$()' syntax correctly.

   * Fix SourceForge bug #715884
     (http://sourceforge.net/tracker/index.php?func=detail&aid=715884&group_id=5511&atid=105511)
     ... mixup on protected-quotes within double-quoted strings

   * Fix Debian bug #183912
     (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=183912) ...
     would not compile on m86k architecture.

   * Fix SourceForge bug #711354
     (http://sourceforge.net/tracker/index.php?func=detail&aid=711354&group_id=5511&atid=105511)
     ... `Creator:' comment in PostScript file named the command-file
     incorrectly, if there were options on the gri invocation command.
     Since this naming of the command-file was not especially useful,
     and since nobody has complained of this bug but the author, the
     feature has simply been deleted.  Just complain if you want it
     back!

   * Fix SourceForge bug #706202
     (http://sourceforge.net/tracker/index.php?func=detail&aid=706202&group_id=5511&atid=105511)
     ... A hint about the page orientation was not given in the
     Postscript comments.  The lack of this hint has no affect on
     printing, etc., only viewing in some viewers.


Version 2.12.3 [2003 Mar 1]
...........................

   *Bug Fixes*
   * Fix SourceForge bug #685919
     (http://sourceforge.net/tracker/index.php?func=detail&aid=685919&group_id=5511&atid=105511)
     ... `-output' commandline argument failed on `.eps' file extension.


Version 2.12.2 [2003 Feb 7: Munro Day at Dalhousie University (http://www.dal.ca/)]
...................................................................................

   *Bug Fixes*

   * Fix SourceForge bug #675304
     (http://sourceforge.net/tracker/index.php?func=detail&aid=675304&group_id=5511&atid=105511)
     ... Segmentation fault can occur on `read image pgm' if an image
     already exists, e.g. created by `convert grid to image'.

   * Fix SourceForge bug #647234
     (http://sourceforge.net/tracker/index.php?func=detail&aid=647234&group_id=5511&atid=105511)
     ... Source file `draw.cc' will not compile on MAC OS X 10.1.5 at
     optimization level 2, so drop the level to no optimization, as a
     temporary measure.

   * Fix SourceForge bug #671022
     (http://sourceforge.net/tracker/index.php?func=detail&aid=671022&group_id=5511&atid=105511)
     ... `flip image x|y' did not flip images correctly, except in
     special circumstances.

   * Fix SourceForge bug #669603
     (http://sourceforge.net/tracker/index.php?func=detail&aid=669603&group_id=5511&atid=105511)
     ... `skip backward .n.' erroneously skipped forward

   * Fix SourceForge bug #667754
     (http://sourceforge.net/tracker/index.php?func=detail&aid=667754&group_id=5511&atid=105511)
     ... `read image pgm' segfaults on memory if an image has already
     been created by `convert grid to image'

   * Fix SourceForge bug #664388
     (http://sourceforge.net/tracker/index.php?func=detail&aid=664388&group_id=5511&atid=105511)
     ... `read image pgm' fails if an image already exists

   * Fix SourceForge bug #654129
     (http://sourceforge.net/tracker/index.php?func=detail&aid=654129&group_id=5511&atid=105511)
     ... ignoring `~/.grirc' file

   * Fix SourceForge bug #654127
     (http://sourceforge.net/tracker/index.php?func=detail&aid=654127&group_id=5511&atid=105511)
     ... configure scripts are broken

   * Fix SourceForge bug #649132
     (http://sourceforge.net/tracker/index.php?func=detail&aid=649132&group_id=5511&atid=105511)
     ... removed unused LDFLAGS phrase from Makefile

   * Fix SourceForge bug #649134
     (http://sourceforge.net/tracker/index.php?func=detail&aid=649134&group_id=5511&atid=105511)
     ... tweak gcc optimization

   * Fix SourceForge bug #649136
     (http://sourceforge.net/tracker/index.php?func=detail&aid=649136&group_id=5511&atid=105511)
     ... examples 8 and 9 broken

   * Fix SourceForge bug #641406
     (http://sourceforge.net/tracker/index.php?func=detail&aid=641406&group_id=5511&atid=105511)
     ... RPN too aggressive on missing values


Version 2.12.1 [2002 Sep 25]
............................

   *Bug Fixes*

   * Fix SourceForge bug #613075
     (http://sourceforge.net/tracker/index.php?func=detail&aid=613075&group_id=5511&atid=105511)
     ... RPN operators `sin', `cos', and `tan' were limited in range
     (new bug in last release)


Version 2.12.0 [2002 Sep 15: Terry Fox Day (http://www.terryfox.org/), Canada.]
...............................................................................

   *New Features*

   * Add `sed' RPN operator, to work on strings *Note Binary
     Operators::.

   * Add `skewness' and `kurtosis' RPN operators, to work on columns
     *Note Manipulation of Columns etc::.


   *Removed Features*

   * n/a


   *Bug Fixes*

   * Fix SourceForge bug #606303
     (http://sourceforge.net/tracker/index.php?func=detail&aid=606303&group_id=5511&atid=105511)
     ... web-pages were not valid html-4.0.

   * Fix SourceForge bug #593958
     (http://sourceforge.net/tracker/index.php?func=detail&aid=593958&group_id=5511&atid=105511)
     ... missing-values should be ignored if they occur in intermediate
     results of RPN calculations.

   * Fix SourceForge bug #600395
     (http://sourceforge.net/tracker/index.php?func=detail&aid=600395&group_id=5511&atid=105511)
     ... won't compile with recently released version (3.2) of GCC
     compiler.

   * Fix SourceForge bug #600233
     (http://sourceforge.net/tracker/index.php?func=detail&aid=600223&group_id=5511&atid=105511)
     ... segfaults if some RPN operators are used on stacks that do not
     contain enough entries (e.g. `show {rpn cosh}').


File: gri.info,  Node: Version 2.10,  Next: Version 2.8,  Prev: Version 2.12,  Up: Stable Stream

Version 2.10
------------

Version 2.10.1 [2002 Jun 1]
...........................

   *Bug Fixes*

   * Fix SourceForge bug #562911
     (http://sourceforge.net/tracker/index.php?func=detail&aid=562911&group_id=5511&atid=105511)
     ... won't build with `gcc-3.0' compiler.  This was reported by the
     Debian hppa builder as Debian bug #148572
     (http://bugs.debian.org/148572).

   * Fix SourceForge bug #562558
     (http://sourceforge.net/tracker/index.php?func=detail&aid=562558&group_id=5511&atid=105511)
     ... `draw title' terminates program if have non-positive data and
     had initially specified log axes.

   * Fix SourceForge bug #562014
     (http://sourceforge.net/tracker/index.php?func=detail&aid=562014&group_id=5511&atid=105511)
     ... won't build if `popt' library is unavailable.  This was
     reported by the Debian ia64 builder as Debian bug #148493
     (http://bugs.debian.org/148493).

   * Fix SourceForge bug #558463
     (http://sourceforge.net/tracker/index.php?func=detail&aid=558463&group_id=5511&atid=105511)
     ... in HTML docs, the "press" margin tag was misdirected.

   * Fix SourceForge bug #562017
     (http://sourceforge.net/tracker/index.php?func=detail&aid=562017&group_id=5511&atid=105511)
     ... parser fails with DOS end-of-line.

   * Fix SourceForge bug #562113
     (http://sourceforge.net/tracker/index.php?func=detail&aid=562113&group_id=5511&atid=105511)
     ... `new page' postscript error in `gv' viewer.


Version 2.10.0 [2002 May 20: Victoria Day]
..........................................

   *New Features*

   * In the documentation, change the names of some variables to be
     clearer: `ll_x' is now written `xleft', etc.

   * Add RPN binary operators `and', `or' for logical operations *Note
     Binary Operators::, along with negation operator `not' *Note Unary
     Operators::.

   * Add `draw arc' command (*Note Draw Arc::).

   * Add `set x axis labels' (*Note Set X Axis::) and `set y axis
     labels' (*Note Set Y Axis::) commands.

   * Permit specification of `pt' units for `draw label' (*Note Draw
     Label::), `draw box' (*Note Draw Box::), `draw symbol at' (*Note
     Draw Symbol At::), and `draw line from' (*Note Draw Line From::).

   * Add `set clip to curve' (*Note Set Clip::) command.  _Caution:_
     this needs extension, and may have a bug if called twice in
     succession [but is this with an intervening `set clip off']

   * Add `group' and `end group' commands, in preparation for SVG
     output.  So far these commands do nothing, and are basically just a
     signal that users should not create commands with these names
     since Gri will need them soon.

   * Add `..xinc..' and `..yinc..' builtin variables (*Note Axis
     Scaling::).

   * Make the `open' command accept URLs as filenames (*Note Open::).


   *Removed Features*

   * Remove `gri -repair old.ps new.ps' since (a) it was only half
     functional, (b) it was hard to code in the new scheme of
     argument-processing and (c) the author was not aware of anybody
     every having used it.

   * Make the `-chatty' commandline option require a value (*Note
     Invoking Gri::).


   *Bug Fixes*

   * Fix SourceForge bug #552009 (`rpn' can segfault if `!=' operator
     is written as `=!')

   * Fix SourceForge bug #546109 (bounding box wrong if postscript
     clipping used)

   * Fix SourceForge bug #514495 in which `set clip to curve' failed to
     handle missing values in the curve.

   * Fix SourceForge bug #450465 (`create columns from function' was
     broken).



File: gri.info,  Node: Version 2.8,  Next: Version 2.6,  Prev: Version 2.10,  Up: Stable Stream

Version 2.8
-----------

Version 2.8.7 [2002 Apr 03]
...........................

   * Fix SourceForge bug #482120 (`regress' ignores data weights)

   * Fix SourceForge bug #508657 (missing backslash in drawing
     undefined synonyms)

   * Fix SourceForge bug #523450 (log axes detect non-positive values
     too late)

   * Fix SourceForge bug #521045 (installation/compilation with Solaris
     Workshop V6 Update 2 compiler)

Version 2.8.6 [2002 Feb 14]
...........................

   * Fix SourceForge bug #513002 (minor documentation error in `set
     clip')

   * Fix SourceForge bug #509592 (HTML docs had midordered indices)

   * Fix SourceForge bug #506534 (map axes give wrong minutes in
     negative regions).  Thanks, Brian, for the patch on this!

   * Fix SourceForge bug #508088 (grimode: gv should update, not be
     relaunched)

   * Fix SourceForge bug #506490 (`-v' commandline option returned
     wrong version number)

Version 2.8.5 [2001 Dec 13]
...........................

   * Fix SourceForge bug #492472 (`inf' rpn operator caused segfault)

Version 2.8.4 [2001 Oct 4]
--------------------------

   * Fix SourceForge bug #467973 (`gri -version' gave wrong version
     number, breaking the Emacs Gri mode.)

   * Fix SourceForge bug #468014 (`draw grid' disobeyed pencolor.)

Version 2.8.3 [2001 Oct 1]
..........................

   * Fix SourceForge bug #462243 (endian problem in Rasterfile images +
     reading problem in PGM images).

Version 2.8.2 [2001 Sep 19]
...........................

   * Fix SourceForge bug #461444 (wouldn't compile with the `mingw32'
     compiler, for windows 32 machines).

   * Fix SourceForge bug #454557 (wouldn't compile with the pre-release
     version 3.0.1 of the GNU c++ compiler, in the case in which netCDF
     was already installed)

Version 2.8.1 [2001 Sep 7]
..........................

   * Fix SourceForge bug #450465 (`create columns from function' was
     broken).

   * Fix SourceForge bug #454557 (wouldn't compile with the pre-release
     version 3.0.1 of the GNU c++ compiler)

Version 2.8.0 [2001 Jul 30]
---------------------------

   New command syntax
   * Add `unlink' command as a unix-familiar way to delete files (*Note
     Unlink::).

   * Add `set page size' command to clip to a given page size (*Note
     Set Page::).

   * Add `substr' RPN operator to permit extraction of sub-strings
     (*Note Tertiary Operators::).

   * Add `default' possibility for the `set x name' and the `set y
     name' commands.

   * Add Perl-like ability to put underscores in numerical constants, to
     guide your eye.  These underscores are ignored by Gri, so that for
     example `.v. = 1_000' and `.v. = 1000' are equivalent as far as
     Gri is concerned.

   Emacs mode (*Note Emacs Mode::)
   * Give <M-Tab> the ability to complete builtin variables and
     synonyms as well as commands

   * Add "idle-timer minibuffer help" to display defaults for builtin
     variables under the cursor.

   * Add fontification of builtin variables _only_ if they are spelled
     correctly.

   Developer changes
   * Add `make source-arch-indep' target in sources.  This will build a
     source tar file in which all the architecture-independent material
     (documentation in HTML, postscript and Info formats) is pre-made.
     This makes it easier to install gri on a host that doesn't have
     TeX and ImageMagick installed.

   * Complete the port to IBM's compiler for their AIX operating system.


File: gri.info,  Node: Version 2.6,  Next: Version 2.4,  Prev: Version 2.8,  Up: Stable Stream

Version 2.6
-----------

Version 2.6.4 [2001 Jul 9: Dan's birthday]
------------------------------------------

   * Fix SourceForge bug #435688 (remnants of `polar' column type, no
     longer supported, remained in documentation)

   * Fix SourceForge bug #435603 (`set dash' produced broken PostScript)

   * Fix SourceForge bug #431114 (`-0' could appear on axes)

Version 2.6.3 [2001 Jun 22]
---------------------------

   * Fix SourceForge bug #433250 (`draw symbol' ignored dashing state
     sometimes)

   * Fix SourceForge bug #432549 (contours sometimes unlabelled)

   * Tweak internal coding for compilation on AIX compilers.

Version 2.6.2 [2001 May 19]
...........................

   * Fix SourceForge bug #425174 (synonym interpolation broken on e.g.
     `show "[\syn]"'

   * Fix SourceForge bug #425175 (`while !..eof..' acted ignored end of
     file)

Version 2.6.1 [2001 May 10]
...........................

   * Fix SourceForge bug #420499 (gri-mode.el compatibility issues with
     emacs-21;  Mostly bad old code.)

   * Fix SourceForge bug #421076 (byte-compiled gri-mode.el has broken
     IMenu support;  Affects Debian package.)

   * Fix SourceForge bug #419599 (wouldn't compile under GNU g++ 3.x
     compiler)

   * Fix SourceForge bug #418065 (documentation mentions back-tic
     notation, which is not available)

   * Fix SourceForge bug #417333 (vague error message `RPN string
     operator')

   * Fix SourceForge bug #415277 (make fails on MSDOS)

   * Fix SourceForge bug #415149 (`file.cc' parse error on MSDOS)

   * Fix SourceForge bug #414520 (`draw symbol ... at' should
     automatically produces axes unless the location is in `cm'
     coordinates)

   * Fix SourceForge bug #414010 (items in the html concept index were
     in an odd order)

   * Fix SourceForge bug #413986 (`~username' was broken in `open')

   * Fix SourceForge bug #411904 (`/' was ugly in math mode)

Version 2.6.0 [2001 April 1]
............................

   * Permit `rewind' to take a filename.

   * Make `open' set `\.return_value.' to the full pathname of the file
     that was opened.

   * Add `set path' command (*Note Set Path To::).

   * Remove functioning of `GRIINPUTS' environment variable, since this
     is more cleanly handled with the newly added `set path to' command
     (*Note Set Path To::).

   * Remove `\.awk.' synonym, which was deemed to be unhelpful.  Users
     with many scripts that use this variable might wish to put a line
     like
          \.awk. = "gawk"
     in their `~/.grirc' file.

   * Change the format of images in the PostScript output file, as a
     workaround for a bug in the `ps2pdf' program.

   * Add "ampersand" (`\&' and `\&&') syntax to permit newcommands to
     look up the name and nesting level of changeable arguments (*Note
     Changeable Command Arguments::).

   * Add "at-sign" (`@') syntax for aliases (*Note Alias Synonyms::).

   * Add ability to embed newlines in `show' commands with the `\<<'
     sequence (*Note Show::).

   * Add ability to embed TAB characters in `show' commands with the
     `\>>' sequence (*Note Show::).

   * Make various `read' commands (*Note Read::) able to decode synonyms
     as well as variables and simple numbers.

   * Add `strlen' RPN operator (*Note Unary Operators::).

   * Add `default' option to `set x format' and `set y format' commands.

   * Add `new postscript file' (*Note New Postscript File::) command.

   * Switch email list from `majordomo' to GNU `mailman'.

   * No longer remove comments from data lines that are read.  This
     served little function, interfered with recent user code, and
     could be accomplished by reading through a `sed' pipe in any case.

   * Make the first element of the `argv' array be the name of the
     command-file.  (This makes Gri consistent with languages such as
     C.)

   * Add chapter on test suite (*Note Test Suite::).

   * Let newcommands have changeable arguments (*Note Changeable
     Command Arguments::).

   * Remove `-s' as an abbreviation for the commandline option
     `-superuser'.

   * Remove the `:' syntax from the commandline options.

   * Add commandline option `-output PS_file_name'.

   * Add `assert' command (*Note Assert::).

   * Add test suite (mainly for developers).

   * Add `sleep' command (*Note Sleep::).

   * Remove command `show hint of the day', since I no longer permission
     to use cgi-bin to provide the hints via web-server.

   * Permit indexing of synonym words with variables, in addition to
     constants.

   * Fix bug in interpolating synonyms in the test-expression of
     `while' loops.

   * Put source on the Source Forge open-source development website, at
     <http://gri.sourceforge.net>.  Gri users can benefit from this
     site in may ways.  First, it is a great way to keep track of new
     versions.  With a mouse-click you can cause SourceForge to email
     you whenever a new version of Gri is released.  Second,
     SourceForge has newsgroups
     (<http://sourceforge.net/forum/?group_id=5511>) and email lists
     (<http://sourceforge.net/mail/?group_id=5511>) devoted to Gri.
     These are archived, so that you can stop monitoring them for a
     while and then go back and see what you've missed.  Third, Source
     Forge has a powerful bug-tracking facility.
     (<http://sourceforge.net/bugs/?group_id=5511>) With this you may
     check for existing bugs reported by users, submit new bug reports,
     and also track the process of bug removal (e.g. optionally
     receiving emails when the bug is removed).

   * Add `set colorname' command (*Note Set Colorname::).

   * Add `source' command (*Note Source::).

   * Add RPN operators `wordc' (*Note Solitary Operators::) and `wordv'
     (*Note Unary Operators::) for accessing the words in the present
     Gri command.

   * Add RPN operators `argc' (*Note Solitary Operators::) and `argv'
     (*Note Unary Operators::) for accessing the command-line arguments
     used when Gri was invoked from the operating system.

   * Add automatic support for compressed data files.  So far, this only
     works with gzipped files (*Note Open::).

   * Add two new RPN operators, `file_exists' and `directory_exists'
     (*Note Unary Operators::).

   * Reorganize parts of manual (e.g.  changing the section about the
     Emacs `gri-mode.el' into a chapter, with screen snapshots).

   * Improve the HTML form of the manual (e.g. color-code the Gri
     syntax in examples, provide access to all the indices, use Jpeg
     format, et.).

   * Add several new features to `gri-mode.el':

     1) Add a menubar pull-down menu listing all Gri commands,
     allowing the user to get `Help' or `Info' on any command or
     `Insert' it in the current Gri file.

     2) Add a menubar pull-down entry to `Perform' to set
     `gri-run' settings such as flag options passed to gri.

     3) Gri info file can have *.info* extension now.

     4) Made `gri-apropos' an alias for `gri-help-apropos'.

     5) gri-mode now uses the customize interface (See
     `gri-customize').

     6) The `~/.gri-syntax' file has changed format.  As a
     side-effect, spaces are used instead of hyphens to display Gri
     commands,       and one can now select a command with the mouse in
     the       *Completions* buffer.



File: gri.info,  Node: Version 2.4,  Next: Version 2.2,  Prev: Version 2.6,  Up: Stable Stream

Version 2.4
-----------

Version 2.4.4 [2000 May 7]
..........................

   Change so that only a warning is printed if mathematical operations
are requested on empty arrays (e.g. `y += 10').  Previously, an error
was reported and Gri exited with an error condition, which is bothersome
in scripts that rely on successful completion of the Gri job.

   Port to the BeOS operating system.

Version 2.4.3 [2000 Apr 1]
..........................

   Change location of all files, to be consistent with Redhat
convention.  Previously, things were in `/opt/gri'; now they are in more
standard locations.

Version 2.4.2 [2000 Mar 25]
...........................

   Remove bug in which `convert grid to image' produced incorrect
images, visible as a patchy appearance with coarse grids.

Version 2.4.1 [2000Jan 31]
..........................

   Remove bug in which `convert image to grid' failed to take note of
the gri minimum and maximum, so that contouring of the grid was not
possible for grids created from images.

Version 2.4.0 [2000 Jan 05]
...........................

   Add `set input data separator'.  Make `read columns' work with
various input separators. Make `read .x.', etc, work with various input
separators.

