<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Accessing Scaler Data from NSCL buffers in SpecTcl</title>
  </head>

  <body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <th width="9%" nowrap><a href="http://www.nscl.msu.edu"><img
        src="../images/nscl_logo_small.gif"
        alt="nscl_logo_small.gif (2463 bytes)" width="63"
        height="52"></a></th>

        <td width="79%"><h1>Recovering Scaler Data in SpecTcl.</h1>
        </td>
        <td width="12%"><a href="../index.htm"><img
        src="../images/HH00706_.jpg" alt="HH00706_.wmf (6530 bytes)"
        width="192" height="84"></a></td>
    </tr>
</table>

<p><a href="../index.htm">SpecTcl Home</a>&nbsp; <a
href="../general_information.htm">General Information</a> <a
href="../users_guide.htm">User Guide</a> <a
href="../programmers_guide.htm">Programmer's Guide</a> <a
href="../obtaining_and_installing.htm">Obtaining and Installing</a></p>
<a name="top"></a>
<p>This page describes how to make scaler data available to your SpecTcl data
   analysis software.  The software described on this page assumes that your
   event data is in NSCL data buffer format.
<p>The remainder of this page describes:
<ul>
      <li><a href="#what">What the scaler data event processor produces</a> </li>
      <li><a href="#how">How to enable it in your tailored SpecTcl</a> </li>
</ul>

<H2><a name="what">What the scaler data event processor produces</a></H2>
<p>The scaler event processer is highly compatible with the scaler display
      <em>sclclient</em> feed program.  It maintains the following variables
      and arrays:
<table border="2">
   <tr>
      <th>Variable</th>
      <th>Type </th>
      <th>Initialized to</th>
      <th>Contains</th>
   </tr>
   <tr>
      <td>Scaler_Totals</td>
      <td>Array of floats</td>
      <td>zeroes</td>
      <td>Scaler totals for the run so far</td>
   </tr>
   <tr>
      <td>Scaler_Increments</td>
      <td>Array of ints</td>
      <td> zeroes </td>
      <td>Increments from the last scaler read</td>
   </tr>
   <tr>
      <td>ScalerDeltaTime</td>
      <td>Integer</td>
      <td>zero</td>
      <td>The number of seconds of run time covered by the most recent event
          scaler read interval.</td>
   </tr>
   <tr>
      <td>ElapsedRunTime</td>
      <td>Integer</td>
      <td>Zero</td>
      <td>The elapsed active time in the run in seconds</td>
   </tr>
   <tr>
      <td>RunNumber</td>
      <td>Integer</td>
      <td>-1</td>
      <td>The run number of the active or most recently ended run </td>
   </tr>
   <tr>
      <td>ScalerRunState</td>
      <td>Text</td>
      <td></td>
      <td>The current run state.  Note that the name of this variable is
          different than the corresponding variable in the scaler display
          subsystem (RunState).  This is because standard SpecTcl uses the
          the variable RunState in an incompatble manner.</td>
   </tr>
   <tr>
      <td>RunTitle</td>
      <td>Text</td>
      <td></td>
      <td>The title of the active or most recently ended run.</td>
   </tr>
</table>
<p>  In addition to maintaining these variables, the scaler event processor
      will invoke Tcl procedures at significant times if they have been
      defined.  The Tcl procedures should be defined to take no parameters and
      are defined in the table below:
<table border="2">
   <tr>
      <th>Procedure</th>
      <th>When invoked</th>
   </tr>
   <tr> 
      <td>Update</td>
      <td>Data has been updated. If you maintain computed data based on 
          tde raw data produced by the event processor you should update
          tde computed data at this time.
      </td>
   </tr>
   <tr>
      <td>BeginRun</td>
      <td>A begin run buffer has been received and processed.</td>
   </tr>
   <tr>
      <td>EndRun</td>
      <td>An end run buffer has been received and processed.</td>
   </tr>
   <tr>
      <td>PauseRun</td>
      <td>A pause run buffer has been received and processed.</td>
   </tr>
   <tr>
      <td>ResumeRun</td>
      <td>A resume run buffer has been received and processed</td>
   </tr>
</table>

<a href="#top">Top</a>
<H2><a name="how">How to enable the scaler data processor in your tailored SpecTcl</a></H2>
<p>This section provides a step by step recipe for adding scaler data
      processing to your tailored SpecTcl. The Scaler data processing is
      implemented as an event processor.  To enable it you must therefore:
<OL>
   <li>Add includes to your spectcl application code to define the scaler event
      processing class </li>
   <li>Create an instance of the scaler data event processor.</li>
   <li>Register the event processor in CMySpecTclApp::CreateAnalysisPipeline
      </li>
   <li>Use <em>make</em> to build your tailored SpecTcl.
</OL>
<p>This discussion assumes you already know how to run make to rebuild your
      SpecTcl.

<h3>Adding includes to MySpecTclApp.cpp</h3>
<P>  The Scaler event processor is defined in the header
      <em>ScalerProcessor.h</em>.  The fragment of MySpecTclApp.cpp shown below
      shows this header incorporated into that module:
<PRE>
#include &lt;config.h&gt;
#include "MySpecTclApp.h"    
#include "EventProcessor.h"
#include "TCLAnalyzer.h"
#include &lt;Event.h&gt;
#include &lt;ScalerProcessor.h&gt;  //-- this line added.

</PRE>

<h3>Creating an instance of the scaler event processor</h3>
The ScalerProcessor.h header defines the class CScalerProcessor.  You must
    create an instance of this class (an object). The code below shows
    MySpecTclApp.cpp as it appears out of the box modified to create a static
    instance of this class:
<PRE>
static CFixedEventUnpacker Stage1;
static CAddFirst2          Stage2;

static CScalerProcessor ScalerStage;    //-- this line added.

</PRE>

<h3>Registering the event processor in CMySpecTclApp::CreateAnalysisPipline</h3>
Finally, you must register this processor with the Event analysis pipeline.
    The code below shows how this is done in the MySpecTclApp.cpp that comes
    out of the box.:
<PRE>
void 
CMySpecTclApp::CreateAnalysisPipeline(CAnalyzer& rAnalyzer)  
{ 

#ifdef WITHF77UNPACKER
  RegisterEventProcessor(legacyunpacker);
#endif
  
    RegisterEventProcessor(Stage1);
    RegisterEventProcessor(Stage2);
    RegisterEventProcessor(ScalerStage);   //--- This line added.
}  

</PRE>
<a href="#top">Top</a>
    <hr>
<p>Last modified: Fri Feb 18 14:04:52 EST 2005 by:
<a href="mailto:fox@nscl.msu.edu">fox@nscl.msu.edu</a><br>
<font size="2">© Copyright NSCL 1999, All rights reserved</font></p>
  </body>
</html>
