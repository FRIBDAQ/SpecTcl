Content-type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of Buffer analysis framework library</TITLE>
</HEAD><BODY>
<H1>Buffer analysis framework library</H1>
Section: NSCL Data analysis packages (3)<BR>Updated: 0.1<BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>


<BR>



<PRE>
<BR>
<HR></PRE>



<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

libBufferAnalysis - C interface to buffer analysis framework
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>


<DL COMPACT><DT><DD>
<PRE>

  /* Include these:  */
  #include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
  #include &lt;<A HREF="file:///usr/include/BufferAnalysis.h">BufferAnalysis.h</A>&gt;
  #include &lt;<A HREF="file:///usr/include/buffer.h">buffer.h</A>&gt;
  #include &lt;<A HREF="file:///usr/include/buftypes.h">buftypes.h</A>&gt;

  /* And you get these  */

  
  typedef void   (NSCLBufferCallback)(unsigned int, const void*, void*);

  void ProcessNSCLBuffer(const void* pBuffer); /*!&lt; Process a single buffer */
  int  ScalersSeen();                          /*!&lt; scalers present this run? */
  int  ScalerCount();                          /*!&lt; # scalers this run */
  unsigned long LastIncrement(unsigned int n); /*!&lt; increment for a channel */
  float Total(unsigned int n);                 /*!&lt; Totals for a channel    */
  long LastIntervalStart();                    /*!&lt; scaler interval start time   */
  long LastIntevalEnd();                       /*!&lt; Scaler interval end time */
  const char*  Title();                        /*!&lt; Run title. */
  unsigned int RunNumber();                    /*!&lt; Number of current run   */
  const char*  RunStartTime();                 /*!&lt; When the run started.  */
  const char*  RunEndTime();                   /*!&lt; When the run ended.    */

  void AddBufferCallback(NSCLBufferCallback* cb,
                         unsigned int        type,
                         void*               userdata); /*!&lt; add a callback */
  void RemoveBufferCallback(NSCLBufferCallback* cb,
                            unsigned int        type,
                            void*               userdata); /*!&lt; get rid of a callback */


  /* In your code: */

  void* gpTCLApplication;

  /* Compile sort of like this */

  cc -o yourprogram yourprogram.c -I$SpecTclHome/include  -L$SpecTclHome/lib \
        -lAnalysis -ltclPlus -lException -lBufferAnalysis


</PRE>

</DL>

<P>

<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<P>

<B>BufferAnalysis</B> provides a C language programming framework for ad-hoc
analysis of NSCL data buffers.   While this framework is used within SpecTcl
for NSCL specific buffer processing, you may also use this framework to build
ad-hoc analysis programs that don't depend on SpecTcl to operate.
<P>

The software decodes buffers by buffer type and dispatches to an ordered set of
callbacks that can be established on each buffer type.  The library establishes
a standard set of callbacks to support the processing of run state transition
and scaler buffers to maintain the information that is provided by the other
functions in the library.
<P>

See <B>EXAMPLES</B> below for more information about how to use this software.
<A NAME="lbAE">&nbsp;</A>
<H2>PUBLIC INTERFACE</H2>

<DL COMPACT>
<DT><B>typedef void   (NSCLBufferCallback)(unsigned int, const void*, void*)</B><DD>
This typedef defines a the form of the callback functions you can register for
each buffer type.  The first parameter of your callback is the buffer type.
This allows the same callback to be registered on multiple buffer types.  The
second paramter will be a pointer to the buffer. The final parameter will be
your <I>userdata</I> parameter to <B>AddBufferCallback</B> passed to your
callback without any interpretation.
<DT><B>void ProcessNSCLBuffer(const void* </B><I>pBuffer</I><B>)</B><DD>
Call this function to process a bufffer.  The buffer type is decoded, and all
callbacks (standard and user supplied) are invoked for the appropriate buffer
type in the order in which they were registered.  Normally your program will
register zero or more callbacks, open an event file and then, for each buffer
in the file, you will call <B>ProcessBuffer</B> passing it the buffer as a
parameter.
<DT><B>int  ScalersSeen()fR<DD>
This can be called at any time in an analysis (even from within one of your
callbacks).  ScalersSeen</B> will return nonzero if at least one scaler
buffer has been processed in the run being analyzed.  The functions that
retrieve
scaler data will not retrieve valid data unless <B>ScalersSeen</B> would return
<I>true</I>.
<DT><B>int  ScalerCount()</B><DD>
Returns the number of scalers that were read this run if <B>ScalersSeen()</B>
returns <I>true</I>. Otherwise this will return -1.
Note that all properly terminated NSCL runs will have at least one scaler
buffer, just prior to the end of run.
<DT><B>unsigned long LastIncrement(unsigned int </B><I>n</I><B>)</B><DD>
Returns the value of the last increment for scaler channel number <I>n</I>.
Scaler channels are numbered from 0.  If <B>ScalersSeen()</B> would return
<I>false</I>, this will return a -1.
<DT><B> float Total(unsigned int </B><I>n</I><B>)</B><DD>
Returns the total number of counts read from a scaler channel <I>n</I> at this
point in the run.  This will return -1 if <B>ScalerSeen</B> would return
<I>false</I>. 
<DT><B>long LastIntervalStart()</B><DD>
Returns the number of seconds into the run at which the most recent scaler
readout interval started.  This will be -1 if <B>ScalersSeen</B> would return
false.
<DT><B>long LastIntevalEnd()</B><DD>
Returns the number of seconds in to the run at which the most recent scaler
readout interval ended.  This will be a -1 if <B>ScalersSeen</B> would return
false.
<DT><B>const char*  Title()</B><DD>
Returns a pointer to the title string that was present in the most recent
control buffer.  Control buffers include start, stop, pause, resume buffer
types.  If there has been no control buffer at this point (only possible if the
run is badly formatted enough not to contain a begin buffer, or if you have not
sent any buffers to the processing engine), this will returna pointer to an
empty string.
<DT><B>const char*  RunStartTime()</B><DD>
Returns a pointer to a timestamp string that indicates when the current run was
started. This string will have the form ``Month day, year, hh:mm:ss'' 
For example, the timestamp that describes when this text was being typed in is:
``February 18, 2005, 10:32:40''
<DT><B>const char*  RunEndTime()</B><DD>
Returns a pointer to a timestamp string that indicates when the current run was
ended.  This string will have the same form as the string returned by
<B>RunStartTime</B>.   If the run has seen a start buffer, but no end buffer
yet, this string will be empty.
<DT><B>void AddBufferCallback(NSCLBufferCallback* </B><I>cb</I><B>, unsigned inttype</B><I>, void* userdata</I><B>)</B><DD>
Call this function to install a callback funtion on a buffer type.  The first
parameter <I>cb</I> is a pointer to your callback function.  <I>type</I> is the
type of buffer you want to install a callback on. <I>userdata</I> is user data
that will be passed without interpretation to your function when it is called.
Note that buffer types are defined symbolically in the header <B>buftypes.h</B>,
the structure of the buffer header and buffer bodies are described by the
structs in the header <B>buffer.h</B>.
<DT><B>void RemoveBufferCallback(NSCLBufferCallback* </B><I>cb</I><B>, unsigned int  </B><I>type</I><B>, void* </B><I>userdata</I><B>)</B><DD>
Call this function to remove a callback from a buffer type.  <I>cb</I> is the
pointer to the callback you established.  <I>type</I> is the buffer type on
which it was established.  <I>userdata</I> is the userdata that was associated
with the callback.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>EXAMPLES</H2>

<P>

<B>Note</B>:  much error checking that should be done is not done in the
examples below in order to keep the brief.
<P>

The first example, processes buffers and prints out the scaler totals at the
end of a run.  Note that this requires on user callbacks.

<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/BufferAnalysis.h">BufferAnalysis.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/sys/types.h">sys/types.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/sys/stat.h">sys/stat.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/fcntl.h">fcntl.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/stdio.h">stdio.h</A>&gt;
int main(int argc, char** argv)
{
  unsigned short buffer[4096];
  int fd;
  int nread;
  int i;

  fd = open(argv[1], O_RDONLY);
  
  while((nread = read(fd, buffer, sizeof(buffer))) &gt; 0) {
    ProcessNSCLBuffer(buffer);
  }
  printf(&quot;File: %s, Run number %d, Title: %sStarted %s Ended %s,
         argv[1], RunNumber(), Title(), RunStartTime(), RunEndTime());
  printf(&quot;Elapsed run time: %d seconds, LastIntervalEnd());
  for(i = 0; i &lt; ScalerCount(); i++) {
    printf(&quot;Scaler channel %d total: %f,
           i, Total(i));
  }

  return 0;
}


</PRE>

</DL>

<P>

<P>
<P>

The second example establishes a scaler buffer callback that prints out scaler
increments and totals for each scaler buffer.  It uses the fact that callbacks
are ordered to avoid having to actually analyze the buffer as all the
information it needs is produced by the standard callbacks.  In order to
identify the run, a begin run callback is also established.

<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/BufferAnalysis.h">BufferAnalysis.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/buftypes.h">buftypes.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/sys/types.h">sys/types.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/sys/stat.h">sys/stat.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/fcntl.h">fcntl.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/stdio.h">stdio.h</A>&gt;


void BeginCallback(unsigned int ntype, const void* pBuffer, void* pData)
{
  const char* pFilename = (const char*)pData;

  printf(&quot;Starting analysis of %s, Run %d %sun started: %s,
         pFilename, RunNumber(), Title(), RunStartTime());

}
void ScalerCallback(unsigned int ntype, const void* pBuffer, void* pData)
{
  int i;
  printf(&quot;---- Scalers from %d sec to %d sec elapsed time----&quot;,
         LastIntervalStart(), LastIntervalEnd());

  for(i =0; i &lt; ScalerCount(); i++) {
    printf(&quot;Chanel %d Increments %d  Totals %d,
           i, LastIncrement(i), Total(i));
  }
}


int main(int argc, char** argv)
{
  unsigned short buffer[4096];
  int fd;
  int nread;
  int i;

  fd = open(argv[1], O_RDONLY);
 
  AddBufferCallback(BeginCallback, BEGRUNBF, argv[1]);
  AddBufferCallback(ScalerCallback, SCALERBF, NULL);
 
  while((nread = read(fd, buffer, sizeof(buffer))) &gt; 0) {
    ProcessNSCLBuffer(buffer);
  }

  printf(&quot;Run Ended %s, RunEndTime());

  return 0;
}
void*  gpTCLApplication;


</PRE>

</DL>

<P>

<A NAME="lbAG">&nbsp;</A>
<H2>BUGS</H2>

<P>

The <B>LastIncrement</B> function can only operate over 1/2 full scale range
since it uses negative values to return errors.  This provides only 31 bits of
scaler range, while some NSCL scaler modules support 32 bits of range.
<P>
<A NAME="lbAH">&nbsp;</A>
<H2>SEE ALSO</H2>

<A HREF="/cgi-bin/man/man2html?3+CBufferProcessor">CBufferProcessor</A>(3), <A HREF="/cgi-bin/man/man2html?3+CBufferCallback">CBufferCallback</A>(3)

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">PUBLIC INTERFACE</A><DD>
<DT><A HREF="#lbAF">EXAMPLES</A><DD>
<DT><A HREF="#lbAG">BUGS</A><DD>
<DT><A HREF="#lbAH">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 18:37:14 GMT, February 18, 2005
</BODY>
</HTML>
