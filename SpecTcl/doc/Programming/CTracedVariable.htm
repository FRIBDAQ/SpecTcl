Content-type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of Tracing TCL variables</TITLE>
</HEAD><BODY>
<H1>Tracing TCL variables</H1>
Section: NSCL Data Analysis packages (3)<BR>Updated: 0.1<BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>


<BR>



<PRE>
<BR>
<HR></PRE>



<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

CTCLTracedVariable - A TCL/Tk variable with traces attached.
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>


<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/TCLTracedVariable.h">TCLTracedVariable.h</A>&gt;

class CTCLTracedVariable : public CTCLVariable
{
  CTCLTracedVariable(CTCLInterpreter*           pInterp,
                  STD(string)                Name,
                  CVariableTraceCallback&amp;    Trace,
                  int                        flags = (TCL_TRACE_READS  |
                                                      TCL_TRACE_WRITES | 
                                                      TCL_TRACE_UNSETS));
  virtual ~CTCLTracedVariable();
  CVariableTraceCallback&amp; getCallback() 
};

#endif

</PRE>

</DL>

<P>

<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<P>

This class is derived from CTCLVariable.  CTCLVariable encapsulates TCL/Tk
variables.  This class adds to that encapsulation a seperable callback object.
The callback object is derived from the abstract base class
CVariableTraceCallback. 
<A NAME="lbAE">&nbsp;</A>
<H2>PUBLIC INTERFACE</H2>

<DL COMPACT>
<DT><B>CTCLTracedVariable(CTCLInterpreter* </B><I>pInterp</I><B>, string </B><I>Name</I><B>,CVariableTraceCallback&amp; </B><I>Trace</I><B>, int </B><I>flags</I><B> =(TCL_TRACE_READS  |  TCL_TRACE_WRITES | TCL_TRACE_UNSETS))<DD>
<P>
</B>Creates a traced variable.  <I>pInterp</I> is the interpreter in which the
variable is or will be defined.   It is possible to establish traces on
variables that don't yet exist.  <I>Name</I> is the name of the variable.  If
the variable names an array, the trace will apply to all elements of the
array.  If the trace is an array element it should be specified in TCL array
element selection notation (e.g. <I>testing(anelement)</I>).  <I>Trace</I> is an
object that will be dispatched to when the trace fires.  <I>flags</I> is a
bitwise or of flags indicating which operations on a variable trigger a trace
callback. <B>TCL_TRACE_READS</B> fires a trace whenever the value of a variable
is computed. <B>TCL_TRACE_WRITES</B> fires a tracek whenever a variable is
modified. <B>TCL_TRACE_UNSETS</B> fires a trace whenever the variable goes out of
existence.  Note that this includes destruction of <I>Name</I> due to the
destruction of the interpreter.
<DT>~CTCLTracedVariable()<DD>
<BR>&nbsp;&nbsp;&nbsp;Destroys&nbsp;an&nbsp;existing&nbsp;traced&nbsp;variable.
<DT>CVariableTraceCallback&amp; getCallback()<DD>
Returns a reference to the callback object.  The callback object is the same as
the one registered at object creation time.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>EXAMPLES</H2>

&lt;none yet&gt;
<A NAME="lbAG">&nbsp;</A>
<H2>SEE ALSO</H2>

<A HREF="/cgi-bin/man/man2html?3+CVariableTraceCallback">CVariableTraceCallback</A>(3), <A HREF="/cgi-bin/man/man2html?3+CLanguageTraceCallback">CLanguageTraceCallback</A>(3), <A HREF="/cgi-bin/man/man2html?3+TracingIntro">TracingIntro</A>(3)

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">PUBLIC INTERFACE</A><DD>
<DT><A HREF="#lbAF">EXAMPLES</A><DD>
<DT><A HREF="#lbAG">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 14:18:39 GMT, February 25, 2005
</BODY>
</HTML>
