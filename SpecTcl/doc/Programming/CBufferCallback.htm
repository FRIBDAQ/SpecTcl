Content-type: text/html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML><HEAD><TITLE>Man page of Buffer analysis framework library</TITLE>
</HEAD><BODY>
<H1>Buffer analysis framework library</H1>
Section: NSCL Data analysis packages (3)<BR>Updated: 0.1<BR><A HREF="#index">Index</A>
<A HREF="/cgi-bin/man/man2html">Return to Main Contents</A><HR>

<A NAME="lbAB">&nbsp;</A>
<H2>NAME</H2>

CBufferCallback - A callback class for ad-hoc buffer analysis.
<A NAME="lbAC">&nbsp;</A>
<H2>SYNOPSIS</H2>


<DL COMPACT><DT><DD>
<PRE>


 /* include: */

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferCallback.h">CBufferCallback.h</A>&gt;

/* to get: */

class CBufferCallback
{
 public:

  // The constructor and destructor are just place holders for now.

  CBufferCallback() {}
  virtual ~CBufferCallback() {}

  int operator==(const CBufferCallback&amp; rhs) const { return 1; }
  int operator!=(const CBufferCallback&amp; rhs) const { return 0; }

  // Class functions:

  virtual void operator()(unsigned int nType, const void* pBuffer) = 0;

};

  /* In your code somewhere: */

  void* gpTCLApplication;

  /* Compile sort of like this */

  c++ -o yourprogram yourprogram.c -I$SpecTclHome/include  -L$SpecTclHome/lib \
        -lAnalysis -ltclPlus -lException -lBufferAnalysis

</PRE>

</DL>

<P>

<P>
<A NAME="lbAD">&nbsp;</A>
<H2>DESCRIPTION</H2>

<P>

The <B>CBufferCallback</B> class is an abstract base class that you must create
a derived class from in order to create callbacks for the C++ buffer analysis
framework.  See <B>EXAMPLES</B> for an example of how this is supposed to work.
Be sure, as well, to see the man page for <B><A HREF="/cgi-bin/man/man2html?3+CBufferProcessor">CBufferProcessor</A>(3)</B>.  If you are
more comfortable programming to a C interface, check out the man page for
<B><A HREF="/cgi-bin/man/man2html?3+BufferAnalysis">BufferAnalysis</A>(3)</B>. 
<A NAME="lbAE">&nbsp;</A>
<H2>PUBLIC INTERFACE</H2>

<DL COMPACT>
<DT><B> virtual void operator()(unsigned int </B><I>nType</I><B>, const void* </B><I>pBuffer</I><B>)</B><DD>
You must override this member function in your derived class to supply the
behavior you want when your callback is invoked.  This member function is
called whenever your callback is invoked.  The first parameter <I>nType</I> will
be the buffer type.  The second parameter <I>pBuffer</I> will point to the
actual buffer.  The headers <B>buffer.h</B> and <B>buftypes.h</B> describe the
shape of the buffer and its contents respectively.
</DL>
<A NAME="lbAF">&nbsp;</A>
<H2>EXAMPLE</H2>

<P>

Much of the error handling require for production software is omitted for this
example for the sake of brevity.
<P>

The example registers a callback object on all buffer types from 0 through
MAXBUFTYPE.  It counts the number of buffers of each type and, and the end of
the data file, prints out the histogram of buffer types with zeroes supressed.

<DL COMPACT><DT><DD>
<PRE>

#include &lt;<A HREF="file:///usr/include/config.h">config.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferCallback.h">CBufferCallback.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/CBufferProcessor.h">CBufferProcessor.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/buftypes.h">buftypes.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/sys/types.h">sys/types.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/sys/stat.h">sys/stat.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/fcntl.h">fcntl.h</A>&gt;
#include &lt;<A HREF="file:///usr/include/string.h">string.h</A>&gt;

#include &lt;<A HREF="file:///usr/include/Iostream.h">Iostream.h</A>&gt;

#ifdef HAVE_STD_NAMESPACE
using namespace std;
#endif

class HistogramCallback : public CBufferCallback
{
private:
  int histogram[MAXBUFTYPE];
public:
  void clear() {
    memset(histogram, 0, sizeof(histogram));
  }
  void dump(ostream&amp; output) {
    for(int i=0; i &lt; MAXBUFTYPE; i++) {
      if(histogram[i] != 0) {
        output &lt;&lt; histogram[i] &lt;&lt; &quot; instances of buffer type: &quot; &lt;&lt; i &lt;&lt; endl;
      }
    }
  }
  virtual void operator()(unsigned int ntype, const void* pBuffer) {
    histogram[ntype]++;
  }
};

int main(int argc, char** argv)
{
  unsigned short buffer[4096];
  int fd = open(argv[1], O_RDONLY);
  int nread;
  CBufferProcessor processor;
  HistogramCallback callback;

  for(int i=0; i &lt; MAXBUFTYPE; i++) {
    processor.addCallback(i, callback);
  }

  callback.clear();
  
  while((nread = read(fd, buffer, sizeof(buffer))) &gt; 0) {
    processor(buffer);
  }
  
  cout &lt;&lt; &quot;File : &quot; &lt;&lt; argv[1] &lt;&lt; &quot; run &quot; &lt;&lt; processor.runNumber()
       &lt;&lt; &quot; &quot; &lt;&lt; processor.Title() &lt;&lt; endl;
  cout &lt;&lt; &quot;Run started: &quot; &lt;&lt; processor.runStartTime();
  cout &lt;&lt; &quot; Run ended: &quot; &lt;&lt; processor.runEndTime() &lt;&lt; endl;
  cout &lt;&lt; &quot;Buffer type distribution: ;

  callback.dump(cout);
}

void* gpTCLApplication;


</PRE>

</DL>

<P>

<A NAME="lbAG">&nbsp;</A>
<H2>SEE ALSO</H2>

<A HREF="/cgi-bin/man/man2html?3+BufferAnalysis">BufferAnalysis</A>(3), <A HREF="/cgi-bin/man/man2html?3+CBufferProcessor">CBufferProcessor</A>(3)

<HR>
<A NAME="index">&nbsp;</A><H2>Index</H2>
<DL>
<DT><A HREF="#lbAB">NAME</A><DD>
<DT><A HREF="#lbAC">SYNOPSIS</A><DD>
<DT><A HREF="#lbAD">DESCRIPTION</A><DD>
<DT><A HREF="#lbAE">PUBLIC INTERFACE</A><DD>
<DT><A HREF="#lbAF">EXAMPLE</A><DD>
<DT><A HREF="#lbAG">SEE ALSO</A><DD>
</DL>
<HR>
This document was created by
<A HREF="/cgi-bin/man/man2html">man2html</A>,
using the manual pages.<BR>
Time: 18:37:14 GMT, February 18, 2005
</BODY>
</HTML>
