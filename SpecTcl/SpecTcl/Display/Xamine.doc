  This is a very brief description of how to write programs for Xamine.
First I'll describe the AEDTSK compatibility mode which allows older AEDTSK
programs to work with Xamine.  Then I'll describe the 'native' mode which 
should be used by new programs.

AEDTSK compatibility mode is available only to Fortran programs.
It provides a reasonably high degree of compatibility with the
programatic interface to the AEDTSK.  

  Fortran programs accessing the AEDTSK compatibility mode (called 
AEDTSK/XAMINE from now on) should include the AEDTSK/XAMINE include file.
On Unix system this file is /daq/include/aedshare.for on VMS systems, this
include file is called daq_include:aedshare.for.  This file contains common
block pointer and function definitions which map between the Xamine native
interface and AEDTSK/XAMINE.
   The first thing an AEDTSK/XAMINE program should do is create and map
the shared memory region between the application and AEDTSK/XAMINE.  This is
done by calling AEDINIT as follows:
	LOGICAL istatus

	CALL AEDINIT(istatus, isize)
	IF(.NOT. istatus) THEN
 	  PRINT *,'AED Initialization failed'
	  STOP
  	END

isize is the number of bytes of spectrum region desired. On VMS this
should be fixed at 8*1024*1024 (8Mbytes), on Unix the limit is fixed by
the maximum size of a shared memory region.  NOTE: On VMS, the .TRUE. value
for istatus has been set to be SS$_NORMAL for compatibility sake.

   Once AEDINIT has been called, the application can describe the set
of spectra to be displayed.  This set can change dynamically.  The spectra
are described by the following variables (declared in the include file):

INTEGER *2 AED_XY(2, AED_ISMAX)   
	X,Y channel dimensions for up to AED_ISMAX spectra.
	X is (1, ispec), y is (2, ispec).
BYTE AED_TITLE(72,AED_ISMAX)
	Up to 72 bytes of title characters for each spectrum.  Note that
        this is a BYTE array for compatibility with AEDTSK not CHARACTER.
        Note also that there are 2 extra characters for alignment purposes
	on RISC platforms.
INTEGER AED_OFFSET(AED_ISMAX)
	Indicates where each spectrum begins inside the spectrum storage
	region.  These are offsets which will be added into indices into
	AED_DATA1, AED_DATA2, and AED_DATA4.
INTEGER AED_TYPE(AED_ISMAX)
	Indicates the type of each spectrum:
	0   - undefined.
	1   - 2-d BYTE
        2   - 1-d INTEGER*2.
	3   - 2-d INTEGER*2.
	4   - 1-d INTEGER*4
INTEGER*4 AED_DATA4(*)
INTEGER*2 AED_DATA2(*)
BYTE      AED_DATA1(*)
    These arrays are where the spectrum data should be stored. On UNIX
    systems, these arrays may not be equivalenced to other arrays so
    you will have to do your own index calculations.  These restrictions
    are due to restrictions on the use of EQUIVALENCE and pointers.
    These arrays all are located on top of each other's address space...
    e.g. they share space.

Linking to AEDTSK/XAMINE:

VMS:
	SETUP XAMINE
	link  yourstuff,XAMINE_DIR:client/lib,xamine/opt

UNIX:
	f77 -L/daq/lib -o yourpgm yourstuff -lXamine


Sample program:

C
C  THIS PROGRAM READS 4 STORED 2D SPECTRA FROM 
C  DISK AND DISPLAYS THEM ON THE AED.
	PROGRAM DEMO

	CHARACTER COM*5
	INCLUDE '/daq/include/aedshare.for'
	INCLUDE '/daq/include/qtree.for'
	INCLUDE '/daq/include/daqfile.for'
	INCLUDE '/daq/include/daqcvt.for'
C
C  SET UP FOR DISPLAY
C
	INTEGER DAQFILE, QTREE

	CALL AEDINIT(IERR, 8*1024*1024)
	AED_OFFSET(1)=0
	AED_OFFSET(2)=65536
	AED_OFFSET(3)=131072
	AED_OFFSET(4)=196608
	AED_TYPE(1)=3
	AED_TYPE(2)=3
	AED_TYPE(3)=3
	AED_TYPE(4)=3
	AED_XY(1,1)=256
	AED_XY(2,1)=256
	AED_XY(1,2)=256
	AED_XY(2,2)=256
	AED_XY(1,3)=256
	AED_XY(2,3)=256
	AED_XY(1,4)=256
	AED_XY(2,4)=256
	CALL SET_TITLE(1, 'Detector 1')
	CALL SET_TITLE(2, 'Detector 2')
	CALL SET_TITLE(3, 'Detector 3')
	CALL SET_TITLE(4, 'Detector 4')
	DO 10 I=5,AED_ISMAX
	AED_TYPE(I)=0
	AED_XY(1,I)=0
	AED_XY(2,I)=0
10	CONTINUE
C
C  START THE AED TASK
C
	TYPE *,' STARTING AED'
C	CALL AEDBLOCKS
	CALL AEDSTART(IERR)
	IF(IERR .NE. 1)CALL EXIT(IERR)
C
C  GET SPECTRUM FILE 1 AND READ SPEC
	TYPE *,' READING DATA FILE'
	DAQFILE = F77DAQOPEN('demo.qtree')
	IF (DAQFILE .LE. 0) THEN
	   PRINT *,'Could not open datta file demo.qtree'
	   STOP
        ENDIF
	ichan   = 1
C
C          For each spectrum, create/READ a quad tree, 
C          transfer to Xamine holding area and then delete the quadtree:
C
	DO ISP = 1,4
	   QTREE = F77QREAD(DAQFILE)
	   DO J = 0,255
	     DO I = 0,255
	       ic     = F77QGETCHAN(QTREE, I, J)
	       if(ic .GT. '8000'x) ic = IOR(ic, 'ffff0000'x) !SEXT.
               AED_DATA2(ICHAN) = ic
	       ICHAN = ICHAN + 1
             END DO
	   END DO
	   istat =  F77QDELETE(QTREE)
        END DO
20	CONTINUE
	TYPE *,' TYPE "EXIT" TO EXIT PROGRAM'
	ACCEPT 30,COM
30	FORMAT(A)
	IF(COM.NE.'EXIT')GO TO 20
	CALL AEDSTOP(ISTAT)
	END	
	SUBROUTINE SET_TITLE(ID, STRING)
C
C          SUBROUTINE TO SET AN AEDTSK/XAMINE TITLE STRING.
C
        INCLUDE '/daq/include/aedshare.for'
	character string*(*)

	ILEN = MIN(LEN(STRING), 72)
	DO I = 1, ILEN
	   AED_TITLE(I, ID) = ICHAR(STRING(I:I))
	END DO
	RETURN
	END


To start Xamine call:

	CALL AEDSTART(ISTAT)

To stop Xamine, call:

	CALL AEDSTOP(ISTAT)

Note:  stopping Xamine does not destroy the shared memory region and
       later invocations of AEDSTART will use the same shared memory region.

NATIVE Bindings:
FORTRAN:
  Native bindings also require the use of an include file.  On VMS it is
DAQ_INCLUDE:xamineshare.for   On UNIX, /daq/include/xamineshare.for
The size of the shared spectrum region is user settable.  The parameter
XAMINE_SPECBYTES must be defined prior to the inclusion and is used to
appropriately dimension the shared region.  On VMS for example, to use
a 16Mbyte shared spectrum region:

	INTEGER XAMINE_SPECBYTES
	PARAMETER (XAMINE_SPECBYTES = 16*1024*1024)
	INCLUDE 'daq_include:xamineshared.for'
	...
	istat = f77Xamine_init(XAMINE_SPECBYTES)
	IF(istat .eq. 0) THEN
	   print *,' Failed to create shared region'
	   STOP
	ENDIF

	...

f77Xamine_init is called to setup the shared region.  Once set up, the
region can be filled in.  This is done using:

INTEGER*2 XAMINE_XY(2, XAMINE_ISMAX) 
	X/Y dimensions as for AED_XY
INTEGER*4 XAMINE_OFFSETS(XAMINE_ISMAX)
	Offsets as for AED_OFFSETS
BYTE XAMINE_TITLES(72, XAMINE_ISMAX)
	Titles as for AED_TITLE
INTEGER XAMINE_TYPES(XAMINE_ISMAX)
	Types of spectra  As for AED_TYPE, but there are symbolics as 	
	follows:
	XAMINE_UNDEFINED, XAMINE_ONEDLONG, XAMINE_ONEDWORD, XAMINE_TWODWORD,
	XAMINE_TWODBYTE.
XAMINE_DATA1, XAMINE_DATA2, and XAMINE_DATA4 are identical in function
   to AED_DATA1 ... AED_DATA4.

Start the Xamine process with:

	istat = f77Xamine_start()
	if(istat .eq. 0) THEN
	    .... error code.
	ENDIF
Stop Xamine with:
	istat = f77Xamine_stop()
	if(istat .eq. 0) THEN
	    ... error code.
	ENDIF
Test for Xamine still alive with:

	IF(F77Xamine_Alive()) THEN
	    ... Xamine is alive.
	ELSE
	    ... Xamine is not alive
	ENDIF

Link as follows:

VMS:
	SETUP XAMINE
	LINK  yourstuff,XAMINE_DIR:CLIENT/LIB,XAMINE/OPT

UNIX:
	f77 -L/daq/lib -o yourpgm yourstuff -lXamine

C bindings:

Include either:
VMS:
	Xamine_dir:client.h
UNIX:
	/daq/include/Xamine.h

Unless you want a default spectrum size (8Mbytes), prior to including
the file, you should 

#define XAMINE_SPECBYTES    ....

where .... is the number of bytes of spectrum memory you want.

To map to shared memory:

#ifdef VMS
Xamine_shared _align(page) shared;
#endif
Xamine_shared *shared_memory;

...
#ifdef VMS
        shared_memory = &shared;
#endif
	if(!Xamine_CreateSharedMemory(specsize, &shared_memory)) {
	    ... error processing, errno is set for perror etc.
        }
	/* Now shared_memory points to the shared region. */
	/* This will be true whether on VMS or UNIX       */

Xamine_shared is a structure which contains the following fields:

struct {
         short xdim, ydim;
       } dsp_xy[XAMINE_MAXSPEC];   /* X/Y dimensions of spectra */

char dsp_titles[XAMINE_MAXSPEC][72];  /* SPectrum titles */

unsigned int dsp_offsets[XAMINE_MAXPEC];  /* Offsets to spectra */

enum { undefined,
	onedlong,
	onedword,
	twodword,
	twodbyte
      } dsp_types[XAMINE_MAXSPEC];   /* SPectrum tyeps */

union {
	unsigned char XAMINE_b[];   /* Byte array of channels */
	unsigned short XAMINE_w[];  /* Word array of channels */
	unsigned int   XAMINE_l[]     /* Long array of channels. */
      } dsp_spectra;                /* The spectrum storage region. */


Functions available:

	int Xamine_Start()   - start Xamine, returns 1 on success,
			       0 on failure.
	int Xamine_Stop()    - Stop Xamine, returns 1 on success, 0 on
	   	               failure
	int Xamine_Alive()   - Returns true if the caller has an Xamine
				subprocess.


To link native bindings C programs:

cc -L/daq/lib -o yourpgrm yourstuff -lXamine


Sample C bindings program:
/*
** Test program for Xamine
*/
#include <stdio.h>
#include <errno.h>
#define XAMINE_SPECBYTES   1024*1024    /* Only using 1Mbyte shared region */
#include "/daq/include/Xamine.h"
#ifdef VMS
Xamine_shared _align(PAGE) shared;
#endif

/*
** setupspectra:
**   sets up the classical test spectra.
*/
static void setupspectra(Xamine_shared *sp)
{
  unsigned int *spl;
  unsigned short *spw;
  unsigned char  *spb;
  int i,j;

  /* Set up the ramp spectrum as spectrum 1: */

  strcpy(sp->dsp_titles[0], "Upward ramp");
  sp->dsp_types[0]   = onedlong;
  sp->dsp_offsets[0] = 0;
  sp->dsp_xy[0].xchans = 64;
  spl   = sp->dsp_spectra.XAMINE_l;
  for(i = 0; i < 64; i++) {
    *spl++ = i;
  }

  /* set up downward ramp function as spectrum 2: */

  strcpy(sp->dsp_titles[1], "Downward Ramp");
  sp->dsp_types[1]     = onedlong;
  sp->dsp_offsets[1]   = 64;
  sp->dsp_xy[1].xchans = 64;
  for(i = 0; i < 64; i++) {
    *spl++ = 96 - i/2;
  }

  /* Set up spectrum the step function: */

  strcpy(sp->dsp_titles[2], "Step Function");
  sp->dsp_types[2]      = onedword; /* Another diff from XMWtest specs */
  sp->dsp_offsets[2]    = 128*2; /* Word offset like AEDTSK. */
  sp->dsp_xy[2].xchans  = 128;
  spw  = (unsigned short *)spl;
  for(i = 0; i < 128; i++) {
    if(i < 64)
      *spw++ = 256;
    else
      *spw++ = 0;
  }

  /* Set up 2d word spectrum Z = X * Y as spectrum 4 */

  strcpy(sp->dsp_titles[3], "Z = X*Y [word]");
  sp->dsp_types[3]      = twodword;
  sp->dsp_offsets[3]    = 128+128*2; /* Word offset. */
  sp->dsp_xy[3].xchans  = 64;
  sp->dsp_xy[3].ychans  = 64;
  for(j = 0; j < 64; j++) {
    for(i = 0; i < 64; i++) {
      *spw++ = i * j;
    }
  }
  /* Set up 2-d byte spectrum z = x + y on upper diagonal */

  strcpy(sp->dsp_titles[4], "Z = X+Y on upper diagonal");
  sp->dsp_types[4]     = twodbyte;
  sp->dsp_offsets[4]   = (64*64 + 128 + 128*2)*2; /* Byte offset */
  sp->dsp_xy[4].xchans = 128;
  sp->dsp_xy[4].ychans = 128;
  spb = (unsigned char *)spw;
  for(j = 0; j < 128; j++) {
    for(i = 0; i < 128; i++) {
      if( i < j )
	*spb++ = i + j;
      else
	*spb++ = 0;
    }
  }
}

main()
{
  Xamine_shared *spectra;
  char junk[100];
#ifdef VMS
 spectra = &shared;
#endif
  if(!Xamine_CreateSharedMemory(1*MEG, &spectra)) {
    perror("Failed to make shared memory region");
    exit(errno);
  }
  printf("Made shared memory at %x\n",spectra);

  setupspectra(spectra);	/* Set up the classical test spectra. */
  printf("Created test spectra\n");

  if(!Xamine_Start()) {
    perror("Failed to start Xamine subprocess\n");
    exit(errno);
  }
  printf("Xamine is started up\n");
  printf("Press return to exit\n");
  scanf("%s", junk);

  if(!Xamine_Stop()) {
    perror("Couldn't stop Xamine");
    exit(errno);
  }

  printf("Xamine stopped\n");
  
}



