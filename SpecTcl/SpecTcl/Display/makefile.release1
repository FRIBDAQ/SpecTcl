#
#   Make file for the display program.
#
CCFLAGS= -c -DXTFUNCPROTO
CC      = gcc -g
CPP     = g++ -g 
LD     = g++ -g
YACC   = bison
LEX    = flex
LEXOUT = lex.yy.c



SYSTEM: XAMINE_FILES WINDOW_FILE  GROBJ_FILE  DISP_SHARED \
	MOTIF_LIB COLORSET Xamine CLIENT
	echo "System rebuild complete"

WINDOW_FILE: windfile_parse.o windfile_lex.o dispwind.o
	touch WINDOW_FILE
	echo "Window file I/O subsystem built"

WINDOW_TEST: wintest
	echo "Windows file test suite finished"

wintest: wintest.cc WINDOW_FILE spectra.o
	$(CPP) $(CCFLAGS) wintest.cc
	$(LD) -o wintest wintest.o dispwind.o windfile_parse.o windfile_lex.o \
	         spectra.o \
	 -ly -lfl 

dispwind.o: dispwind.cc dispwind.h
	$(CPP) $(CCFLAGS) dispwind.cc

windfile_parse.o: windfile.y  dispwind.h dispshare.h
	$(YACC) -p windfile -b windfile windfile.y
	mv windfile.tab.c windfile_parse.cc
	$(CPP) $(CCFLAGS)  windfile_parse.cc

windfile_lex.h: windfile.y
	$(YACC) -p windfile -b windfile -dl  windfile.y
	mv windfile.tab.h windfile_lex.h

windfile_lex.o: windfile.l dispwind.h windfile_lex.h
	$(LEX) windfile.l
	mv $(LEXOUT) windfile_lex.cc
	$(CPP) $(CCFLAGS) windfile_lex.cc

GROBJ_FILE: dispgrob.o grobfile_lex.o grobfile_parse.o grobjdb.o grobfile.o
	echo "GROBJ_FILE rebuilt"

dispgrob.o: dispgrob.cc dispgrob.h
	$(CPP) $(CCFLAGS) dispgrob.cc

grobjdb.o: grobjdb.cc dispgrob.h
	$(CPP) $(CCFLAGS) grobjdb.cc

grobfile_lex.o: grobfile.l dispgrob.h grobfile_lex.h
	$(LEX) grobfile.l
	mv $(LEXOUT) grobfile_lex.cc
	$(CPP) $(CCFLAGS) grobfile_lex.cc

grobfile_parse.o: grobfile.y dispgrob.h
	$(YACC) -p grobfile -b grobfile grobfile.y
	mv grobfile.tab.c  grobfile_parse.cc
	$(CPP) $(CCFLAGS) grobfile_parse.cc

grobfile_lex.h: grobfile.y
	$(YACC) -p grobfile -d grobfile.y
	mv grobfile.tab.h  grobfile_lex.h

grobfile.o: grobfile.cc dispgrob.h
	$(CPP) $(CCFLAGS) grobfile.cc

GROBJ_TEST: grobjtest
	echo "Graphical object tests built"

grobjtest: grobjtest.cc GROBJ_FILE
	$(CPP) $(CCFLAGS) grobjtest.cc
	$(LD) -o grobjtest grobjtest.o dispgrob.o grobfile_lex.o \
		grobfile_parse.o grobjdb.o grobfile.o -ly -lfl


DISP_SHARED: spectra.o
	echo "Spectrum access package rebuilt"

spectra.o: spectra.cc dispshare.h
	$(CPP) $(CCFLAGS) spectra.cc

MOTIF_LIB: XMcallback.o XMMenus.o XMDialogs.o XMManagers.o XMWlist.o 
	touch MOTIF_LIB
	echo "MOTIF Library built"

XMcallback.o: XMcallback.cc XMWidget.h
	$(CPP) $(CCFLAGS) XMcallback.cc

XMMenus.o: XMMenus.cc XMWidget.h XMPushbutton.h XMMenus.h
	$(CPP) $(CCFLAGS) XMMenus.cc

Xamine: Xamine.o \
	 MOTIF_LIB \
	 WINDOW_FILE \
	 XAMINE_FILES
	$(LD) -o Xamine Xamine.o XMcallback.o XMMenus.o XMDialogs.o \
	XMManagers.o XMWlist.o \
	windfile_parse.o windfile_lex.o dispwind.o \
	menusetup.o exit.o helpmenu.o winiomenu.o grobjiomenu.o \
	geometrymenu.o errormsg.o logging.o toggles.o spectra.o specchoose.o \
	spcdisplay.o advprompt.o properties.o panemgr.o buttonsetup.o pkgmgr.o \
	dfltmgr.o axisdefault.o titledefault.o attribdefault.o reducedefault.o \
	rend1default.o rend2default.o printer.o refreshctl.o axes.o scaling.o \
	text.o titles.o chanplot.o plot1d.o  plot2d.o colormgr.o shared.o \
	-lXm -lXt -lX11 -lm

Xamine.o: Xamine.cc XMPushbutton.h XMWidget.h  dispshare.h XMManagers.h \
	panemgr.h pkgmgr.h optionmenu.h colormgr.h \
	menusetup.h dfltmgr.h
	$(CPP) $(CCFLAGS) Xamine.cc

XMDialogs.o: XMDialogs.cc XMDialogs.h
	$(CPP) $(CCFLAGS) XMDialogs.cc

XAMINE_FILES: menusetup.o exit.o helpmenu.o winiomenu.o grobjiomenu.o geometrymenu.o \
	errormsg.o procede.o logging.o toggles.o specchoose.o spectra.o \
	spcdisplay.o advprompt.o properties.o buttonsetup.o panemgr.o \
	pkgmgr.o dfltmgr.o axisdefault.o titledefault.o attribdefault.o \
	reducedefault.o rend1default.o rend2default.o printer.o refreshctl.o \
	axes.o scaling.o text.o titles.o chanplot.o plot1d.o plot2d.o \
	colormgr.o shared.o
	echo "Xamine objects built"

menusetup.o: menusetup.cc XMMenus.h exit.h winiomenu.h grobjiomenu.h \
	geometrymenu.h toggles.h logging.h specchoose.h properties.h \
	menusetup.h dispshare.h helpmenu.h winiomenu.h spcdisplay.h \
	advprompt.h panemgr.h pkgmgr.h optionmenu.h printer.h refreshctl.h
	$(CPP) $(CCFLAGS) menusetup.cc

exit.o: exit.cc XMDialogs.h
	$(CPP) $(CCFLAGS) exit.cc

helpmenu.o: helpmenu.cc helpmenu.h XMDialogs.h
	$(CPP) $(CCFLAGS) helpmenu.cc


winiomenu.o: winiomenu.cc XMDialogs.h helpmenu.h winiomenu.h panemgr.h \
	dispwind.h exit.h refreshctl.h
	$(CPP) $(CCFLAGS) winiomenu.cc


grobjiomenu.o: grobjiomenu.cc grobjiomenu.h XMDialogs.h helpmenu.h
	$(CPP) $(CCFLAGS) grobjiomenu.cc


geometrymenu.o: geometrymenu.cc XMLabel.h XMDialogs.h helpmenu.h \
	errormsg.h geometrymenu.h menusetup.h XMPushbutton.h XMManagers.h \
	XMSeparators.h exit.h
	$(CPP) $(CCFLAGS) geometrymenu.cc

errormsg.o: errormsg.cc XMDialogs.h XMWidget.h
	$(CPP) $(CCFLAGS) errormsg.cc

COLORSET: colorset colorset.ico
	touch COLORSET
	echo "colorset - color map generation tool rebuilt."

colorset: colorset.o MOTIF_LIB errormsg.o helpmenu.o procede.o
	$(LD)  -o colorset colorset.o errormsg.o helpmenu.o procede.o \
	XMDialogs.o XMMenus.o XMcallback.o -lXm -lXt -lX11

colorset.o: colorset.cc XMDialogs.h XMWidget.h XMPushbutton.h XMMenus.h \
	helpmenu.h errormsg.h procede.h
	$(CPP) $(CCFLAGS) colorset.cc

procede.o: procede.cc procede.h XMDialogs.h
	$(CPP) $(CCFLAGS) procede.cc

logging.o: logging.cc logging.h XMDialogs.h helpmenu.h errormsg.h
	$(CPP) $(CCFLAGS) logging.cc

toggles.o: toggles.cc toggles.h XMWidget.h
	$(CPP) $(CCFLAGS) toggles.cc

specchoose.o: specchoose.cc specchoose.h XMDialogs.h helpmenu.h errormsg.h \
	spcdisplay.h
	$(CPP) $(CCFLAGS) specchoose.cc

spcdisplay.o: spcdisplay.cc spcdisplay.h dispwind.h panemgr.h dfltmgr.h \
	      refreshctl.h dfltmgr.h exit.h
	$(CPP) $(CCFLAGS) spcdisplay.cc

advprompt.o: advprompt.cc XMDialogs.h helpmenu.h advprompt.h spcdisplay.h \
	errormsg.h
	$(CPP) $(CCFLAGS)  advprompt.cc

properties.o: properties.cc XMWidget.h XMDialogs.h XMManagers.h helpmenu.h \
	errormsg.h properties.h spcdisplay.h dispwind.h optionmenu.h \
	panemgr.h refreshctl.h colormgr.h exit.h
	$(CPP) $(CCFLAGS) properties.cc

XMManagers.o: XMManagers.cc XMManagers.h XMWidget.h
	$(CPP) $(CCFLAGS) XMManagers.cc

panemgr.o: panemgr.cc XMManagers.h XMWidget.h panemgr.h menusetup.h \
	buttonsetup.h pkgmgr.h dispshare.h
	$(CPP) $(CCFLAGS) panemgr.cc

buttonsetup.o: buttonsetup.cc XMManagers.h XMPushbutton.h buttonsetup.h \
	geometrymenu.h panemgr.h specchoose.h spcdisplay.h pkgmgr.h \
	refreshctl.h
	$(CPP) $(CCFLAGS) buttonsetup.cc

XMWlist.o: XMWlist.cc XMWlist.h XMWidget.h XMPushbutton.h
	$(CPP) $(CCFLAGS) XMWlist.cc

pkgmgr.o: pkgmgr.cc XMWlist.h pkgmgr.h
	$(CPP) $(CCFLAGS) pkgmgr.cc

dfltmgr.o: dfltmgr.cc dfltmgr.h dispwind.h
	$(CPP) $(CCFLAGS) dfltmgr.cc

axisdefault.o: axisdefault.cc  XMPushbutton.h XMDialogs.h \
		helpmenu.h dispwind.h dfltmgr.h optionmenu.h
	$(CPP) $(CCFLAGS) axisdefault.cc

titledefault.o: titledefault.cc XMPushbutton.h  XMDialogs.h \
	helpmenu.h dispwind.h dfltmgr.h optionmenu.h
	$(CPP) $(CCFLAGS) titledefault.cc

attribdefault.o: attribdefault.cc XMDialogs.h XMPushbutton.h XMLabel.h \
	XMText.h dispwind.h dfltmgr.h optionmenu.h helpmenu.h
	$(CPP) $(CCFLAGS) attribdefault.cc

reducedefault.o: reducedefault.cc XMDialogs.h XMPushbutton.h XMManagers.h \
	dispwind.h dfltmgr.h optionmenu.h helpmenu.h
	$(CPP) $(CCFLAGS) reducedefault.cc

rend1default.o: rend1default.cc XMDialogs.h XMPushbutton.h XMManagers.h \
	optionmenu.h dfltmgr.h dispwind.h helpmenu.h
	$(CPP) $(CCFLAGS) rend1default.cc

rend2default.o: rend2default.cc XMDialogs.h XMPushbutton.h XMManagers.h \
	optionmenu.h dfltmgr.h dispwind.h helpmenu.h colormgr.h
	$(CPP) $(CCFLAGS) rend2default.cc

printer.o: printer.cc XMDialogs.h XMManagers.h XMPushbutton.h XMText.h  \
	printer.h
	$(CPP) $(CCFLAGS) printer.cc

refreshctl.o: refreshctl.cc refreshctl.h XMWidget.h panemgr.h axes.h titles.h \
	chanplot.h dfltmgr.h
	$(CPP) $(CCFLAGS) refreshctl.cc

axes.o: axes.cc axes.h XMWidget.h dispwind.h dispshare.h XBatch.h text.h
	$(CPP) $(CCFLAGS) axes.cc

scaling.o: scaling.cc scaling.h XMWidget.h dispwind.h scaling.h dispshare.h \
	axes.h
	$(CPP) $(CCFLAGS) scaling.cc

text.o: text.cc text.h
	$(CPP) $(CCFLAGS) text.cc

titles.o: titles.cc dispshare.h titles.h axes.h panemgr.h text.h
	$(CPP) $(CCFLAGS) titles.cc

chanplot.o: chanplot.cc refreshctl.h dispwind.h axes.h scaling.h chanplot.h \
	panemgr.h XMWidget.h
	$(CPP) $(CCFLAGS) chanplot.cc

plot1d.o: plot1d.cc XMWidget.h XBatch.h chanplot.h panemgr.h  \
	dispshare.h dispwind.h
	$(CPP) $(CCFLAGS) plot1d.cc

plot2d.o: plot2d.cc XMWidget.h XBatch.h dispwind.h dispshare.h chanplot.h \
	scaling.h colormgr.h
	$(CPP) $(CCFLAGS)  plot2d.cc

colormgr.o: colormgr.cc XMWidget.h colormgr.h
	$(CPP) $(CCFLAGS) colormgr.cc

CLIENT: libXamine.a Xaminetest demo
	echo "Client software and tests built"

libXamine.a: client.o aedxamine.o 
	rm -f libXamine.a
	ar cq libXamine.a client.o aedxamine.o
	ranlib libXamine.a

Xaminetest: Xaminetest.o libXamine.a
	$(LD) -L. -o Xaminetest Xaminetest.o client.o -lXamine

Xaminetest.o: Xaminetest.c client.h
	$(CC) $(CCFLAGS) Xaminetest.c

client.o: client.c client.h
	$(CC) -g $(CCFLAGS) client.c

shared.o: shared.cc dispshare.h
	$(CPP) $(CCFLAGS) shared.cc

aedxamine.o: aedxamine.for aedshare.for xamineshare.for
	f77 -c -g aedxamine.for

demo: demo.o libXamine.a
	f77 -g -L. -L/daq/lib -o demo demo.o -lXamine -lc -lqtree -lfile -lcvt

demo.o: demo.for aedshare.for
	f77 -g -c demo.for


